//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\github\410proj\application\finalconbine.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: Jerry
//              Version: NX 7.5
//              Date: 01-17-2013  (Format: mm-dd-yyyy)
//              Time: 09:18 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class finalconbine
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    public static finalconbine thefinalconbine;
    private string theDialogName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.UIBlock group0;// Block type: Group
    private NXOpen.BlockStyler.UIBlock mgroup0;// Block type: Group
    private NXOpen.BlockStyler.UIBlock menum0;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock mstring0;// Block type: String
    private NXOpen.BlockStyler.UIBlock tabControl;// Block type: Tabs Page
    private NXOpen.BlockStyler.UIBlock tabPage1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock macdimtog;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock group6;// Block type: Group
    private NXOpen.BlockStyler.UIBlock dimenum0116;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock dimbut0116;// Block type: Button
    private NXOpen.BlockStyler.UIBlock zgroup0;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zselection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock ztoggle01;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock zpoint01;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock zpoint02;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock zbutton0;// Block type: Button
    private NXOpen.BlockStyler.UIBlock zenum0;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock zgroup;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zdouble0;// Block type: Double
    private NXOpen.BlockStyler.UIBlock separator04;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock zdoubleup;// Block type: Double
    private NXOpen.BlockStyler.UIBlock zdoubledown;// Block type: Double
    private NXOpen.BlockStyler.UIBlock zbutton1;// Block type: Button
    private NXOpen.BlockStyler.UIBlock zgroup01;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zenum01;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock zlabel0;// Block type: Label
    private NXOpen.BlockStyler.UIBlock zlabel01;// Block type: Label
    private NXOpen.BlockStyler.UIBlock zgroup1;// Block type: Group
    private NXOpen.BlockStyler.ListBox list_box0;// Block type: List Box
    private NXOpen.BlockStyler.UIBlock tabPage;// Block type: Group
    private NXOpen.BlockStyler.UIBlock button0115fea;// Block type: Button
    private NXOpen.BlockStyler.UIBlock group2;// Block type: Group
    private NXOpen.BlockStyler.UIBlock tolatt;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock framstyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock double0;// Block type: Double
    private NXOpen.BlockStyler.UIBlock valuestyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock matrstyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock group;// Block type: Group
    private NXOpen.BlockStyler.UIBlock mainbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock maiinbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator0;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock separator01;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock ifotherbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator02;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock firstrefbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock firstrefbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator03;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock secrefbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock secrefbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock group1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock double02;// Block type: Double
    private NXOpen.BlockStyler.UIBlock double01;// Block type: Double
    private NXOpen.BlockStyler.UIBlock toggle0;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock selection01;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock selection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock point0;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock tabPage2;// Block type: Group
    private NXOpen.BlockStyler.UIBlock button0115rou;// Block type: Button
    private NXOpen.BlockStyler.UIBlock group3;// Block type: Group
    private NXOpen.BlockStyler.UIBlock rouname;// Block type: String
    private NXOpen.BlockStyler.UIBlock astring0;// Block type: String
    private NXOpen.BlockStyler.UIBlock jgroup3;// Block type: Group
    private NXOpen.BlockStyler.UIBlock jmatoff;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock jstand;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock jgroup4;// Block type: Group
    private NXOpen.BlockStyler.UIBlock separator05;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jtogglejy;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock jcrospt;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock separator06;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jintobj;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock g;// Block type: Face Collector
    private NXOpen.BlockStyler.UIBlock separator07;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jplcpt;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock tabPage3;// Block type: Group
    private NXOpen.BlockStyler.UIBlock china;// Block type: Integer
    private NXOpen.BlockStyler.UIBlock japan;// Block type: Integer
    private NXOpen.BlockStyler.UIBlock enum1314;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock there;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock here;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock obutton0;// Block type: Button
    private NXOpen.BlockStyler.UIBlock toggle1314;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock separator08;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jiaoyanshitol;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock jiaoyanshisel;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock jiaoyanshibut;// Block type: Button
    private NXOpen.BlockStyler.Tree tree_control0;// Block type: Tree Control
    private NXOpen.BlockStyler.UIBlock tabPage4;// Block type: Group
    private NXOpen.BlockStyler.UIBlock button0117zhushi;// Block type: Button
    private NXOpen.BlockStyler.UIBlock group4;// Block type: Group
    private NXOpen.BlockStyler.UIBlock ifcro;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock cro;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock realanno;// Block type: Multiline String
    private NXOpen.BlockStyler.UIBlock iflabel;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock selection020116;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock point010116;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock group5;// Block type: Group
    private NXOpen.BlockStyler.UIBlock dic;// Block type: Multiline String
    private NXOpen.BlockStyler.UIBlock str;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock button0;// Block type: Button
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesEnabled
    //------------------------------------------------------------------------------
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int          SnapPointTypesOnByDefault_UserDefined = (1 << 0);
    public static readonly int             SnapPointTypesOnByDefault_Inferred = (1 << 1);
    public static readonly int       SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 <<13);
    public static readonly int         SnapPointTypesOnByDefault_TangentPoint = (1 <<14);
    public static readonly int                SnapPointTypesOnByDefault_Poles = (1 <<15);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    //------------------------------------------------------------------------------
    //Bit Option for Property: EntityType
    //------------------------------------------------------------------------------
    public static readonly int                          EntityType_AllowFaces = (1 << 4);
    public static readonly int                         EntityType_AllowDatums = (1 << 5);
    public static readonly int                         EntityType_AllowBodies = (1 << 6);
    //------------------------------------------------------------------------------
    //Bit Option for Property: FaceRules
    //------------------------------------------------------------------------------
    public static readonly int                           FaceRules_SingleFace = (1 << 0);
    public static readonly int                          FaceRules_RegionFaces = (1 << 1);
    public static readonly int                         FaceRules_TangentFaces = (1 << 2);
    public static readonly int                   FaceRules_TangentRegionFaces = (1 << 3);
    public static readonly int                            FaceRules_BodyFaces = (1 << 4);
    public static readonly int                         FaceRules_FeatureFaces = (1 << 5);
    public static readonly int                        FaceRules_AdjacentFaces = (1 << 6);
    public static readonly int                  FaceRules_ConnectedBlendFaces = (1 << 7);
    public static readonly int                        FaceRules_AllBlendFaces = (1 << 8);
    public static readonly int                             FaceRules_RibFaces = (1 << 9);
    public static readonly int                            FaceRules_SlotFaces = (1 <<10);
    public static readonly int                   FaceRules_BossandPocketFaces = (1 <<11);
    public static readonly int                       FaceRules_MergedRibFaces = (1 <<12);
    public static readonly int                  FaceRules_RegionBoundaryFaces = (1 <<13);
    public static readonly int                 FaceRules_FaceandAdjacentFaces = (1 <<14);
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public finalconbine()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDialogName = "finalconbine.dlx";
            theDialog = theUI.CreateDialog(theDialogName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        try
        {
            thefinalconbine = new finalconbine();
            // The following method shows the dialog immediately
            thefinalconbine.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            thefinalconbine.Dispose();
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static int UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group0");
            mgroup0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("mgroup0");
            menum0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("menum0");
            mstring0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("mstring0");
            tabControl = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabControl");
            tabPage1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage1");
            macdimtog = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("macdimtog");
            group6 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group6");
            dimenum0116 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("dimenum0116");
            dimbut0116 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("dimbut0116");
            zgroup0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup0");
            zselection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zselection0");
            ztoggle01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("ztoggle01");
            zpoint01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zpoint01");
            zpoint02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zpoint02");
            zbutton0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zbutton0");
            zenum0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zenum0");
            zgroup = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup");
            zdouble0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdouble0");
            separator04 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator04");
            zdoubleup = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdoubleup");
            zdoubledown = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdoubledown");
            zbutton1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zbutton1");
            zgroup01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup01");
            zenum01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zenum01");
            zlabel0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zlabel0");
            zlabel01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zlabel01");
            zgroup1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup1");
            list_box0 = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("list_box0");
            tabPage = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage");
            button0115fea = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("button0115fea");
            group2 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group2");
            tolatt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tolatt");
            framstyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("framstyle");
            double0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double0");
            valuestyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("valuestyle");
            matrstyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("matrstyle");
            group = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group");
            mainbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("mainbase");
            maiinbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("maiinbasemat");
            separator0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator0");
            separator01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator01");
            ifotherbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("ifotherbase");
            separator02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator02");
            firstrefbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("firstrefbase");
            firstrefbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("firstrefbasemat");
            separator03 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator03");
            secrefbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("secrefbase");
            secrefbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("secrefbasemat");
            group1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group1");
            double02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double02");
            double01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double01");
            toggle0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle0");
            selection01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection01");
            selection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection0");
            point0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("point0");
            tabPage2 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage2");
            button0115rou = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("button0115rou");
            group3 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group3");
            rouname = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("rouname");
            astring0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("astring0");
            jgroup3 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jgroup3");
            jmatoff = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jmatoff");
            jstand = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jstand");
            jgroup4 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jgroup4");
            separator05 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator05");
            jtogglejy = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jtogglejy");
            jcrospt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jcrospt");
            separator06 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator06");
            jintobj = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jintobj");
            g = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("g");
            separator07 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator07");
            jplcpt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jplcpt");
            tabPage3 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage3");
            china = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("china");
            japan = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("japan");
            enum1314 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("enum1314");
            there = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("there");
            here = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("here");
            obutton0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("obutton0");
            toggle1314 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle1314");
            separator08 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator08");
            jiaoyanshitol = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jiaoyanshitol");
            jiaoyanshisel = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jiaoyanshisel");
            jiaoyanshibut = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jiaoyanshibut");
            tree_control0 = (NXOpen.BlockStyler.Tree)theDialog.TopBlock.FindBlock("tree_control0");
            tabPage4 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage4");
            button0117zhushi = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("button0117zhushi");
            group4 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group4");
            ifcro = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("ifcro");
            cro = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("cro");
            realanno = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("realanno");
            iflabel = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("iflabel");
            selection020116 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection020116");
            point010116 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("point010116");
            group5 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group5");
            dic = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("dic");
            str = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("str");
            button0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("button0");
            //------------------------------------------------------------------------------
            //Registration of Treelist specific callbacks
            //------------------------------------------------------------------------------
            //tree_control0.SetOnExpandHandler(new NXOpen.BlockStyler.Tree.OnExpandCallback(OnExpandCallback));
            
            //tree_control0.SetOnInsertColumnHandler(new NXOpen.BlockStyler.Tree.OnInsertColumnCallback(OnInsertColumnCallback));
            
            //tree_control0.SetOnInsertNodeHandler(new NXOpen.BlockStyler.Tree.OnInsertNodeCallback(OnInsertNodecallback));
            
            //tree_control0.SetOnDeleteNodeHandler(new NXOpen.BlockStyler.Tree.OnDeleteNodeCallback(OnDeleteNodecallback));
            
            //tree_control0.SetOnPreSelectHandler(new NXOpen.BlockStyler.Tree.OnPreSelectCallback(OnPreSelectcallback));
            
            //tree_control0.SetOnSelectHandler(new NXOpen.BlockStyler.Tree.OnSelectCallback(OnSelectcallback));
            
            //tree_control0.SetOnStateChangeHandler(new NXOpen.BlockStyler.Tree.OnStateChangeCallback(OnStateChangecallback));
            
            //tree_control0.SetToolTipTextHandler(new NXOpen.BlockStyler.Tree.ToolTipTextCallback(ToolTipTextcallback));
            
            //tree_control0.SetColumnSortHandler(new NXOpen.BlockStyler.Tree.ColumnSortCallback(ColumnSortcallback));
            
            //tree_control0.SetStateIconNameHandler(new NXOpen.BlockStyler.Tree.StateIconNameCallback(StateIconNameCallback));
            
            //tree_control0.SetOnBeginLabelEditHandler(new NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback(OnBeginLabelEditCallback));
            
            //tree_control0.SetOnEndLabelEditHandler(new NXOpen.BlockStyler.Tree.OnEndLabelEditCallback(OnEndLabelEditCallback));
            
            //tree_control0.SetOnEditOptionSelectedHandler(new NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback(OnEditOptionSelectedCallback));
            
            //tree_control0.SetAskEditControlHandler(new NXOpen.BlockStyler.Tree.AskEditControlCallback(AskEditControlCallback));
            
            //tree_control0.SetOnMenuHandler(new NXOpen.BlockStyler.Tree.OnMenuCallback(OnMenuCallback));;
            
            //tree_control0.SetOnMenuSelectionHandler(new NXOpen.BlockStyler.Tree.OnMenuSelectionCallback(OnMenuSelectionCallback));;
            
            //tree_control0.SetIsDropAllowedHandler(new NXOpen.BlockStyler.Tree.IsDropAllowedCallback(IsDropAllowedCallback));;
            
            //tree_control0.SetIsDragAllowedHandler(new NXOpen.BlockStyler.Tree.IsDragAllowedCallback(IsDragAllowedCallback));;
            
            //tree_control0.SetOnDropHandler(new NXOpen.BlockStyler.Tree.OnDropCallback(OnDropCallback));;
            
            //tree_control0.SetOnDropMenuHandler(new NXOpen.BlockStyler.Tree.OnDropMenuCallback(OnDropMenuCallback));
            
            //------------------------------------------------------------------------------
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == menum0)
            {
            //---------Enter your code here-----------
            }
            else if(block == mstring0)
            {
            //---------Enter your code here-----------
            }
            else if(block == macdimtog)
            {
            //---------Enter your code here-----------
            }
            else if(block == dimenum0116)
            {
            //---------Enter your code here-----------
            }
            else if(block == dimbut0116)
            {
            //---------Enter your code here-----------
            }
            else if(block == zselection0)
            {
            //---------Enter your code here-----------
            }
            else if(block == ztoggle01)
            {
            //---------Enter your code here-----------
            }
            else if(block == zpoint01)
            {
            //---------Enter your code here-----------
            }
            else if(block == zpoint02)
            {
            //---------Enter your code here-----------
            }
            else if(block == zbutton0)
            {
            //---------Enter your code here-----------
            }
            else if(block == zenum0)
            {
            //---------Enter your code here-----------
            }
            else if(block == zdouble0)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator04)
            {
            //---------Enter your code here-----------
            }
            else if(block == zdoubleup)
            {
            //---------Enter your code here-----------
            }
            else if(block == zdoubledown)
            {
            //---------Enter your code here-----------
            }
            else if(block == zbutton1)
            {
            //---------Enter your code here-----------
            }
            else if(block == zenum01)
            {
            //---------Enter your code here-----------
            }
            else if(block == zlabel0)
            {
            //---------Enter your code here-----------
            }
            else if(block == zlabel01)
            {
            //---------Enter your code here-----------
            }
            else if(block == list_box0)
            {
            //---------Enter your code here-----------
            }
            else if(block == button0115fea)
            {
            //---------Enter your code here-----------
            }
            else if(block == tolatt)
            {
            //---------Enter your code here-----------
            }
            else if(block == framstyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == double0)
            {
            //---------Enter your code here-----------
            }
            else if(block == valuestyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == matrstyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == mainbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == maiinbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator0)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator01)
            {
            //---------Enter your code here-----------
            }
            else if(block == ifotherbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator02)
            {
            //---------Enter your code here-----------
            }
            else if(block == firstrefbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == firstrefbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator03)
            {
            //---------Enter your code here-----------
            }
            else if(block == secrefbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == secrefbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == double02)
            {
            //---------Enter your code here-----------
            }
            else if(block == double01)
            {
            //---------Enter your code here-----------
            }
            else if(block == toggle0)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection01)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection0)
            {
            //---------Enter your code here-----------
            }
            else if(block == point0)
            {
            //---------Enter your code here-----------
            }
            else if(block == button0115rou)
            {
            //---------Enter your code here-----------
            }
            else if(block == rouname)
            {
            //---------Enter your code here-----------
            }
            else if(block == astring0)
            {
            //---------Enter your code here-----------
            }
            else if(block == jmatoff)
            {
            //---------Enter your code here-----------
            }
            else if(block == jstand)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator05)
            {
            //---------Enter your code here-----------
            }
            else if(block == jtogglejy)
            {
            //---------Enter your code here-----------
            }
            else if(block == jcrospt)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator06)
            {
            //---------Enter your code here-----------
            }
            else if(block == jintobj)
            {
            //---------Enter your code here-----------
            }
            else if(block == g)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator07)
            {
            //---------Enter your code here-----------
            }
            else if(block == jplcpt)
            {
            //---------Enter your code here-----------
            }
            else if(block == china)
            {
            //---------Enter your code here-----------
            }
            else if(block == japan)
            {
            //---------Enter your code here-----------
            }
            else if(block == enum1314)
            {
            //---------Enter your code here-----------
            }
            else if(block == there)
            {
            //---------Enter your code here-----------
            }
            else if(block == here)
            {
            //---------Enter your code here-----------
            }
            else if(block == obutton0)
            {
            //---------Enter your code here-----------
            }
            else if(block == toggle1314)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator08)
            {
            //---------Enter your code here-----------
            }
            else if(block == jiaoyanshitol)
            {
            //---------Enter your code here-----------
            }
            else if(block == jiaoyanshisel)
            {
            //---------Enter your code here-----------
            }
            else if(block == jiaoyanshibut)
            {
            //---------Enter your code here-----------
            }
            else if(block == button0117zhushi)
            {
            //---------Enter your code here-----------
            }
            else if(block == ifcro)
            {
            //---------Enter your code here-----------
            }
            else if(block == cro)
            {
            //---------Enter your code here-----------
            }
            else if(block == realanno)
            {
            //---------Enter your code here-----------
            }
            else if(block == iflabel)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection020116)
            {
            //---------Enter your code here-----------
            }
            else if(block == point010116)
            {
            //---------Enter your code here-----------
            }
            else if(block == dic)
            {
            //---------Enter your code here-----------
            }
            else if(block == str)
            {
            //---------Enter your code here-----------
            }
            else if(block == button0)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: filter_cb
    //------------------------------------------------------------------------------
    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        return(NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    //------------------------------------------------------------------------------
    //Treelist specific callbacks
    //------------------------------------------------------------------------------
    //public void OnExpandCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
    //{
    //}
    
    //public void OnInsertColumnCallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    //{
    //}
    
    //public void OnInsertNodecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
    //{
    //}
    
    //public void OnDeleteNodecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node)
    //{
    //}
    
    //public void OnPreSelectcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, bool Selected)
    //{
    //}
    
    //public void OnSelectcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID, bool Selected)
    //{
    //}
    
    //public void OnStateChangecallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int State)
    //{
    //}
    
    //public string ToolTipTextcallback(NXOpen.BlockStyler.Tree tree, NXOpen.BlockStyler.Node node, int columnID)
    //{
    //}
    
    //public int ColumnSortcallback(NXOpen.BlockStyler.Tree tree, int columnID, NXOpen.BlockStyler.Node node1, NXOpen.BlockStyler.Node node2)
    //{
    //}
    
    //public string StateIconNameCallback(Tree tree, Node node, int state)
    //{
    //}
    
    //public Tree.BeginLabelEditState OnBeginLabelEditCallback(Tree tree, Node node, int columnID)
    //{
    //}
    
    //public Tree.EndLabelEditState OnEndLabelEditCallback(Tree tree, Node node, int columnID, string editedText)
    //{
    //}
    
    //public Tree.EditControlOption OnEditOptionSelectedCallback(Tree tree, Node node, int columnID, int selectedOptionID, string selectedOptionText, Tree.ControlType type)
    //{
    //}
    
    //public Tree.ControlType AskEditControlCallback(Tree tree, Node node, int columnID)
    //{
    //}
    
    //public void OnMenuCallback(Tree tree, Node node, int columnID)
    //{
    //}
    
    //public void OnMenuSelectionCallback(Tree tree, Node node, int menuItemID)
    //{
    //}
    
    //public Node.DropType IsDropAllowedCallback(Tree tree, Node node, int columnID, Node targetNode, int targetColumnID)
    //{
    //}
    
    //public Node.DragType IsDragAllowedCallback(Tree tree, Node node, int columnID)
    //{
    //}
    
    //public bool OnDropCallback(Tree tree, Node[] node, int columnID, Node targetNode, int targetColumnID, Node.DropType dropType, int dropMenuItemId)
    //{
    //}
    
    //public void OnDropMenuCallback(BlockStyler.Tree tree, BlockStyler.Node node, int columnID, BlockStyler.Node targetNode, int targetColumnID)
    //{
    //}
    
    
}
