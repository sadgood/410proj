//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\gitest\410proj\application\fcfsetting.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: yibo
//              Version: NX 7.5
//              Date: 09-04-2012  (Format: mm-dd-yyyy)
//              Time: 17:01 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class fcfsetting
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    public static fcfsetting thefcfsetting;
    private string theDialogName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.UIBlock group0;// Block type: Group
    private NXOpen.BlockStyler.UIBlock tolatt;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock framstyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock double0;// Block type: Double
    private NXOpen.BlockStyler.UIBlock valuestyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock matrstyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock group;// Block type: Group
    private NXOpen.BlockStyler.UIBlock mainbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock maiinbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator0;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock separator01;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock ifotherbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator02;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock firstrefbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock firstrefbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator03;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock secrefbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock secrefbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock group1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock double02;// Block type: Double
    private NXOpen.BlockStyler.UIBlock double01;// Block type: Double
    private NXOpen.BlockStyler.UIBlock toggle0;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock selection01;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock postion;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock selection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock point0;// Block type: Specify Point
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesEnabled
    //------------------------------------------------------------------------------
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int          SnapPointTypesOnByDefault_UserDefined = (1 << 0);
    public static readonly int             SnapPointTypesOnByDefault_Inferred = (1 << 1);
    public static readonly int       SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 <<13);
    public static readonly int         SnapPointTypesOnByDefault_TangentPoint = (1 <<14);
    public static readonly int                SnapPointTypesOnByDefault_Poles = (1 <<15);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public fcfsetting()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDialogName = "fcfsetting.dlx";
            theDialog = theUI.CreateDialog(theDialogName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        try
        {
            thefcfsetting = new fcfsetting();
            // The following method shows the dialog immediately
            thefcfsetting.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            thefcfsetting.Dispose();
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static int UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group0");
            tolatt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tolatt");
            framstyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("framstyle");
            double0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double0");
            valuestyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("valuestyle");
            matrstyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("matrstyle");
            group = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group");
            mainbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("mainbase");
            maiinbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("maiinbasemat");
            separator0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator0");
            separator01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator01");
            ifotherbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("ifotherbase");
            separator02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator02");
            firstrefbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("firstrefbase");
            firstrefbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("firstrefbasemat");
            separator03 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator03");
            secrefbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("secrefbase");
            secrefbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("secrefbasemat");
            group1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group1");
            double02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double02");
            double01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double01");
            toggle0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle0");
            selection01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection01");
            postion = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("postion");
            selection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection0");
            point0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("point0");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == tolatt)
            {
            //---------Enter your code here-----------
            }
            else if(block == framstyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == double0)
            {
            //---------Enter your code here-----------
            }
            else if(block == valuestyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == matrstyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == mainbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == maiinbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator0)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator01)
            {
            //---------Enter your code here-----------
            }
            else if(block == ifotherbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator02)
            {
            //---------Enter your code here-----------
            }
            else if(block == firstrefbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == firstrefbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator03)
            {
            //---------Enter your code here-----------
            }
            else if(block == secrefbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == secrefbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == double02)
            {
            //---------Enter your code here-----------
            }
            else if(block == double01)
            {
            //---------Enter your code here-----------
            }
            else if(block == toggle0)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection01)
            {
            //---------Enter your code here-----------
            }
            else if(block == postion)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection0)
            {
            //---------Enter your code here-----------
            }
            else if(block == point0)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
}
