//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  F:\410NEW\application\RevolveTrim.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ZWL
//              Version: NX 7.5
//              Date: 08-23-2010  (Format: mm-dd-yyyy)
//              Time: 18:56 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using TDPPM;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class RevolveTrim
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    public static RevolveTrim theRevolveTrim;
    private string theDialogName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.UIBlock group0;// Block type: Group
    private NXOpen.BlockStyler.UIBlock bodySelect0;// Block type: Body Collector
    private NXOpen.BlockStyler.UIBlock super_section0;// Block type: Super Section
    private NXOpen.BlockStyler.UIBlock axis0;// Block type: Specify Axis
    private NXOpen.BlockStyler.UIBlock toggle0;// Block type: Button
    private NXOpen.BlockStyler.UIBlock group1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock toggle01;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock button01;// Block type: Button
    private NXOpen.BlockStyler.UIBlock group;// Block type: Group
    private NXOpen.BlockStyler.ListBox list_box0;// Block type: List Box
    public static readonly int EntityType_AllowEdgesandCurves = (1 << 2);
    public static readonly int EntityType_AllowPoints = (1 << 3);
    public static readonly int EntityType_AllowBodies = (1 << 6);
    public static readonly int BodyRules_SingleBody = (1 << 0);
    public static readonly int BodyRules_FeatureBodies = (1 << 1);
    public static readonly int BodyRules_BodiesinGroup = (1 << 2);
    public static readonly int SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int SnapPointTypesEnabled_PointonCurve = (1 << 10);
    public static readonly int SnapPointTypesEnabled_PointonSurface = (1 << 11);
    public static readonly int SnapPointTypesEnabled_PointConstructor = (1 << 12);
    public static readonly int SnapPointTypesEnabled_TwocurveIntersection = (1 << 13);
    public static readonly int SnapPointTypesEnabled_TangentPoint = (1 << 14);
    public static readonly int SnapPointTypesEnabled_Poles = (1 << 15);
    public static readonly int SnapPointTypesEnabled_BoundedGridPoint = (1 << 16);
    public static readonly int SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int SnapPointTypesOnByDefault_PointonCurve = (1 << 10);
    public static readonly int SnapPointTypesOnByDefault_PointonSurface = (1 << 11);
    public static readonly int SnapPointTypesOnByDefault_PointConstructor = (1 << 12);
    public static readonly int CurveRules_SingleCurve = (1 << 0);
    public static readonly int CurveRules_ConnectedCurves = (1 << 1);
    public static readonly int CurveRules_TangentCurves = (1 << 2);
    public static readonly int CurveRules_FaceEdges = (1 << 3);
    public static readonly int CurveRules_SheetEdges = (1 << 5);
    public static readonly int CurveRules_FeatureCurves = (1 << 6);
    public static readonly int CurveRules_InferCurves = (1 << 7);
    public static readonly int CurveRules_RegionBoundaryCurves = (1 << 11);
    public static readonly int CurveRules_CurvesinGroup = (1 << 12);

    public bool isShowResult;  //是否为显示结果状态
    public static Session.UndoMarkId markid;
    public NXOpen.Features.Revolve revolve;

    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public RevolveTrim()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDialogName = "RevolveTrim.dlx";
            theDialog = theUI.CreateDialog(theDialogName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(ApplyCB));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(InitializeCB));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
    public static void MainFun()
    {
        try
        {
            theRevolveTrim = new RevolveTrim();
            theRevolveTrim.Show();
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            theRevolveTrim.Dispose();
        }
    }

    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if (theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }


    //------------------------------------------------------------------------------
    //Callback Name: InitializeCB
    //------------------------------------------------------------------------------
    public void InitializeCB()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group0");
            bodySelect0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("bodySelect0");
            super_section0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("super_section0");
            axis0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("axis0");
            toggle0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle0");
            group1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group1");
            toggle01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle01");
            button01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("button01");
            group = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group");
            list_box0 = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("list_box0");
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            isShowResult = false;
            button01.GetProperties().SetString("Bitmap", "3dppm_finder");
            button01.GetProperties().SetString("Label", "显示结果");
            group1.GetProperties().SetLogical("Show", false);
//             if (theSession.IsInTaskEnvironment)
//             {
//                 theSession.BeginTaskEnvironment();
//             }
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: ApplyCB
    //------------------------------------------------------------------------------
    public int ApplyCB()
    {
        int errorCode = 0;
        try
        {
         //   Session.UndoMarkId markid = tSetUndoMark(Session.MarkVisibility.Visible, "Test");

            // theSession.UndoToMark(markid, "Test");
           // theSession.DeleteUndoMark(markids[index++], "");
           // markids[index] = theSession.SetUndoMark(Session.MarkVisibility.Visible, "a");

            //回转母线
            TaggedObject[] obs1 = super_section0.GetProperties().GetTaggedObjectVector("SelectedObjects");
            if (obs1.GetLength(0) == 0)
            {
                // theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择回转母线！");
                return 1;
            }
            //回转轴
            TaggedObject[] obs2 = axis0.GetProperties().GetTaggedObjectVector("SelectedObjects");
            if (obs2.GetLength(0) == 0)
            {
                // theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择回转轴！");
                return 1;
            }
            //要修剪的体
            TaggedObject[] obs3 = bodySelect0.GetProperties().GetTaggedObjectVector("SelectedObjects");
            if (obs3.GetLength(0) == 0)
            {
                // theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择目标体！");
                return 1;
            }

            //是否反向
            bool reverse = toggle0.GetProperties().GetLogical("Value");

            Section section = (Section)obs1[0];
            Axis axis = (Axis)obs2[0];
            Body body = (Body)obs3[0];
            NXOpen.Features.Revolve revolve = NXFun.Revolve(section, axis);
            Body[] bodys = revolve.GetBodies();

            //修剪体
            NXFun.TrimBody(body, bodys[0],reverse);

            //隐藏面
            Body[] bs = revolve.GetBodies();
            NXFun.BlankObject(bs[0]);
           
        }
        catch (Exception ex)
        {
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb(NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if (block == bodySelect0)
            {
            }
            else if (block == super_section0)
            {
            }
            else if (block == axis0)
            {
         
            }
            else if (block == toggle0)
            {
            
            }
            else if (block == toggle01)
            {
              
            }
            else if (block == button01)
            {
//                 if (!isShowResult)
//                 {
//                    //markid = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Test");
//                    //回转母线
//                    TaggedObject[] obs1 = super_section0.GetProperties().GetTaggedObjectVector("SelectedObjects");
//                    if (obs1.GetLength(0) == 0)
//                    {
//                        // theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择回转母线！");
//                        return 1;
//                    }
//                    //回转轴
//                    TaggedObject[] obs2 = axis0.GetProperties().GetTaggedObjectVector("SelectedObjects");
//                    if (obs2.GetLength(0) == 0)
//                    {
//                        // theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择回转轴！");
//                        return 1;
//                    }
//                    //要修剪的体
//                    TaggedObject[] obs3 = bodySelect0.GetProperties().GetTaggedObjectVector("SelectedObjects");
//                    if (obs3.GetLength(0) == 0)
//                    {
//                        // theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择目标体！");
//                        return 1;
//                    }
//                    Section section = (Section)obs1[0];
//                    Axis axis = (Axis)obs2[0];
//                    Body body = (Body)obs3[0];
//                    /*NXOpen.Features.Revolve */revolve = NXFun.Revolve(section, axis);
////                     Body[] bodys = revolve.GetBodies();
//// 
////                     //修剪体
////                     NXFun.TrimBody(body, bodys[0]);
//                    isShowResult = true;
//                    int nErrs = theSession.UpdateManager.DoUpdate(markid); 
//                }
//                else
//                {
//                    //theSession.UndoToMark(markid, "TEST");
//                    NXFun.DeleteObject(revolve);
//                }
               
            }
            else if (block == list_box0)
            {
            }
           
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = ApplyCB();
//             if (theSession.IsInTaskEnvironment)
//             {
//                 theSession.EndTaskEnvironment();
//             }
        }
        catch (Exception ex)
        {
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        try
        {
//             if (theSession.IsInTaskEnvironment)
//             {
//                 theSession.EndTaskEnvironment();
//             }
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Callback Name: filter_cb
    //------------------------------------------------------------------------------
    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        return (NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }

    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

}
