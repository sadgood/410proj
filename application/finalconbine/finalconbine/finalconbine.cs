//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\yibo\Desktop\finalconbine.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: yibo
//              Version: NX 7.5
//              Date: 09-10-2012  (Format: mm-dd-yyyy)
//              Time: 09:58 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.UF;
using System.Xml;
using System.Reflection;
using System.Diagnostics;
//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class finalconbine
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    public static finalconbine thefinalconbine;
    private string theDialogName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.UIBlock tabControl;// Block type: Tabs Page
    private NXOpen.BlockStyler.UIBlock tabPage1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zgroup0;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zselection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock ztoggle01;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock zpoint01;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock zpoint02;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock zbutton0;// Block type: Button
    private NXOpen.BlockStyler.UIBlock zbutton1;// Block type: Button
    private NXOpen.BlockStyler.UIBlock zenum0;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock zgroup;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zdouble0;// Block type: Double
    private NXOpen.BlockStyler.UIBlock separator04;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock zdoubleup;// Block type: Double
    private NXOpen.BlockStyler.UIBlock zdoubledown;// Block type: Double
    private NXOpen.BlockStyler.UIBlock zgroup01;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zenum01;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock zlabel0;// Block type: Label
    private NXOpen.BlockStyler.UIBlock zlabel01;// Block type: Label
    private NXOpen.BlockStyler.UIBlock zgroup1;// Block type: Group
    private NXOpen.BlockStyler.ListBox list_box0;// Block type: List Box
    private NXOpen.BlockStyler.UIBlock tabPage;// Block type: Group
    private NXOpen.BlockStyler.UIBlock group2;// Block type: Group
    private NXOpen.BlockStyler.UIBlock tolatt;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock framstyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock double0;// Block type: Double
    private NXOpen.BlockStyler.UIBlock valuestyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock matrstyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock group;// Block type: Group
    private NXOpen.BlockStyler.UIBlock mainbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock maiinbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator0;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock separator01;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock ifotherbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator02;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock firstrefbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock firstrefbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator03;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock secrefbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock secrefbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock group1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock double02;// Block type: Double
    private NXOpen.BlockStyler.UIBlock double01;// Block type: Double
    private NXOpen.BlockStyler.UIBlock toggle0;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock selection01;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock postion;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock selection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock point0;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock tabPage2;// Block type: Group
    private NXOpen.BlockStyler.UIBlock jgroup3;// Block type: Group
    private NXOpen.BlockStyler.UIBlock jmatoff;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock jstand;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock jgroup4;// Block type: Group
    private NXOpen.BlockStyler.UIBlock jendobj;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock separator05;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jtogglejy;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock jcrospt;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock separator06;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jintobj;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock separator07;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jplcpt;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock group3;// Block type: Group
    private NXOpen.BlockStyler.UIBlock rouname;// Block type: String
    public static NXOpen.TaggedObject[] firstpt;//第一个点
    public static NXOpen.TaggedObject[] secpt;//第2个点
    public static NXOpen.TaggedObject[] thepmi;
    private NXOpen.BlockStyler.UIBlock astring0;// Block type: String
    public NXOpen.TaggedObject[] plcpoint;//放置点
    public Point theplcpoint = null;
    pubfun thepubfunfcf = new pubfun();
    private NXOpen.BlockStyler.UIBlock g;
    public string hb = "HB5800.xml";
    public string folderpath = "3dppmplugin\\";
    private NXOpen.BlockStyler.UIBlock mstring0;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock menum0;// Block type: Group
    NXOpen.ModelingView[] aaa = null;//所有的视图
    string[] strvalue;
    public string viewname = null;
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesEnabled
    //------------------------------------------------------------------------------
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int          SnapPointTypesOnByDefault_UserDefined = (1 << 0);
    public static readonly int             SnapPointTypesOnByDefault_Inferred = (1 << 1);
    public static readonly int       SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 <<13);
    public static readonly int         SnapPointTypesOnByDefault_TangentPoint = (1 <<14);
    public static readonly int                SnapPointTypesOnByDefault_Poles = (1 <<15);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public finalconbine()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDialogName = "finalconbine.dlx";
            theDialog = theUI.CreateDialog(theDialogName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        try
        {
            thefinalconbine = new finalconbine();
            // The following method shows the dialog immediately
            thefinalconbine.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            thefinalconbine.Dispose();
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static int UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            tabControl = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabControl");
            tabPage1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage1");
            zgroup0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup0");
            zselection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zselection0");
            ztoggle01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("ztoggle01");
            zpoint01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zpoint01");
            zpoint02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zpoint02");
            zbutton0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zbutton0");
            zbutton1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zbutton1");
            zenum0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zenum0");
            zgroup = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup");
            zdouble0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdouble0");
            separator04 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator04");
            zdoubleup = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdoubleup");
            zdoubledown = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdoubledown");
            zgroup01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup01");
            zenum01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zenum01");
            zlabel0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zlabel0");
            zlabel01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zlabel01");
            zgroup1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup1");
            list_box0 = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("list_box0");
            tabPage = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage");
            group2 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group2");
            tolatt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tolatt");
            framstyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("framstyle");
            double0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double0");
            valuestyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("valuestyle");
            matrstyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("matrstyle");
            group = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group");
            mainbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("mainbase");
            maiinbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("maiinbasemat");
            separator0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator0");
            separator01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator01");
            ifotherbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("ifotherbase");
            separator02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator02");
            firstrefbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("firstrefbase");
            firstrefbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("firstrefbasemat");
            separator03 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator03");
            secrefbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("secrefbase");
            secrefbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("secrefbasemat");
            group1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group1");
            double02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double02");
            double01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double01");
            toggle0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle0");
            selection01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection01");
            postion = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("postion");
            selection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection0");
            point0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("point0");
            jgroup3 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jgroup3");
            jmatoff = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jmatoff");
            jstand = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jstand");
            jgroup4 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jgroup4");
            jendobj = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jendobj");
            separator05 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator05");
            jtogglejy = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jtogglejy");
            jcrospt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jcrospt");
            separator06 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator06");
            jintobj = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jintobj");
            separator07 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator07");
            jplcpt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jplcpt");
            group3 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group3");
            rouname = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("rouname");
            astring0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("astring0");
            g = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("g");
            menum0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("menum0");
            mstring0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("mstring0");

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //TaggedObject[] obb = null;
            //zselection0.GetProperties().SetTaggedObjectVector("SelectedObjects", obb);
            selection01.GetProperties().SetLogical("Enable", false);
            ifotherbase.GetProperties().SetEnum("Value", 0);
            firstrefbase.GetProperties().SetLogical("Enable", false);
            firstrefbasemat.GetProperties().SetLogical("Enable", false);
            secrefbase.GetProperties().SetLogical("Enable", false);
            secrefbasemat.GetProperties().SetLogical("Enable", false);
            toggle0.GetProperties().SetLogical("Value", false);
            ztoggle01.GetProperties().SetLogical("Value",false);
            //jtogglejy.GetProperties().GetLogical("Value")

            jtogglejy.GetProperties().SetLogical("Value", false);
                jcrospt.GetProperties().SetLogical("Enable",false);
                refreshenum();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    /// <summary>
    /// 反射技术，唯我独尊！！！
    /// </summary>
    /// <param name="ob"></param>
    /// <param name="funName"></param>
    /// <returns></returns>
    public static object ReflectFun(object ob, string funName)
    {
        Type type = ob.GetType();
        MethodInfo mi = type.GetMethod(funName);
        return mi.Invoke(ob, null);
    }
    public static object ReflectFun(object ob, string funName, object parm)
    {
        Type type = ob.GetType();
        MethodInfo mi = type.GetMethod(funName);
        object[] parms = new object[1];
        parms[0] = parm;
        return mi.Invoke(ob, parms);
    }
    /// <summary>
    /// 这个多参的貌似有问题啊！
    /// </summary>
    /// <param name="ob"></param>
    /// <param name="funName"></param>
    /// <param name="parm1"></param>
    /// <param name="parm2"></param>
    /// <param name="parm3"></param>
    public static void ReflectFun(object ob, string funName, object parm1, object parm2, object parm3)
    {
        Type type = ob.GetType();
        MethodInfo mi = type.GetMethod(funName);
        object[] parms = new object[3];
        parms[0] = parm1;
        parms[1] = parm2;
        parms[2] = parm3;
        mi.Invoke(ob, parms);
        //mi.Invoke()
    }
    public static object ReflectGetProperty(object ob, string funName)
    {
        Type type = ob.GetType();
        PropertyInfo pi = type.GetProperty(funName);
        return pi.GetValue(ob, null);
    }
    public static void ReflectSetProperty(object ob, string funName, object parm)
    {
        Type type = ob.GetType();
        PropertyInfo pi = type.GetProperty(funName);
        pi.SetValue(ob, parm, null);
    }
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public static void SetDimensionTolerance(NXOpen.Annotations.Dimension dimension, double upper, double lower)
    {
        Session theSession = Session.GetSession();
        Part workPart = theSession.Parts.Work;
        Part displayPart = theSession.Parts.Display;
        NXOpen.Session.UndoMarkId markId1;
        markId1 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start");
        NXOpen.Annotations.Value lowerToleranceMm1;
        lowerToleranceMm1.ItemValue = lower;
        Expression nullExpression = null;
        lowerToleranceMm1.ValueExpression = nullExpression;
        lowerToleranceMm1.ValuePrecision = 3;
        NXOpen.Annotations.Value upperToleranceMm1;
        upperToleranceMm1.ItemValue = upper;
        upperToleranceMm1.ValueExpression = nullExpression;
        upperToleranceMm1.ValuePrecision = 3;
        Object tol = ReflectFun(dimension, "GetTolerance");
        Type type = tol.GetType();
        if (type.Name == "LinearTolerance")
        {
            ReflectFun(tol, "SetLowerToleranceMm", lowerToleranceMm1);
            ReflectFun(tol, "SetUpperToleranceMm", upperToleranceMm1);
        }
        else
        {
            ReflectFun(tol, "SetLowerToleranceDegrees", lowerToleranceMm1);
            ReflectFun(tol, "SetUpperToleranceDegrees", upperToleranceMm1);
        }
        //设置公差类型
        if (upper + lower == 0)
        {
            ReflectSetProperty(tol, "ToleranceType", NXOpen.Annotations.ToleranceType.BilateralOneLine);
        }
        else if (lower == 0)
        {
            ReflectSetProperty(tol, "ToleranceType", NXOpen.Annotations.ToleranceType.UnilateralAbove);
        }
        else if (upper == 0)
        {
            ReflectSetProperty(tol, "ToleranceType", NXOpen.Annotations.ToleranceType.UnilateralBelow);
        }
        else
        {
            ReflectSetProperty(tol, "ToleranceType", NXOpen.Annotations.ToleranceType.UnilateralAbove);
        }
        ReflectFun(dimension, "SetTolerance", tol);

        //设置公差的显示大小
        NXOpen.Annotations.LetteringPreferences letteringPreferences1;
        letteringPreferences1 = dimension.GetLetteringPreferences();
        NXOpen.Annotations.Lettering toleranceText1 = letteringPreferences1.GetDimensionText();
        if (upper + lower != 0)
            toleranceText1.Size = 0.57 * toleranceText1.Size;
        letteringPreferences1.SetToleranceText(toleranceText1);
        dimension.SetLetteringPreferences(letteringPreferences1);
        int nErrs2 = theSession.UpdateManager.DoUpdate(markId1);
    }
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
          
           
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------

    public static double ConvertDegreesToRadians(double degrees)//角度到弧度的转换方法
    {
        double radians = (Math.PI / 180) * degrees;
        // return (radians);
        return radians;//return 的这两种写法都是可以的
    }
    public static T Tag2NXObject<T>(Tag tag)
    {
        try
        {
            object to = NXOpen.Utilities.NXObjectManager.Get(tag);
            return (T)to;
        }
        catch (System.Exception ex)
        {
            UI.GetUI().NXMessageBox.Show("Message", NXMessageBox.DialogType.Error, ex.Message);
            return default(T);
        }
    }
    public NXObject shank(Point point1, Point point2)
    {
        Part workPart = theSession.Parts.Work;
        NXObject shanker;
        NXOpen.Features.Feature nullFeatures_Feature = null;
        NXOpen.Features.DatumAxisBuilder abuilder;
        abuilder = workPart.Features.CreateDatumAxisBuilder(nullFeatures_Feature);
        abuilder.ArcLength.Expression.RightHandSide = "0";
        abuilder.Type = NXOpen.Features.DatumAxisBuilder.Types.TwoPoints;
        abuilder.IsAssociative = true;
        Xform nullXform = null;
        Point pt1 = workPart.Points.CreatePoint(point1, nullXform, NXOpen.SmartObject.UpdateOption.WithinModeling);
        Point pt2 = workPart.Points.CreatePoint(point2, nullXform, NXOpen.SmartObject.UpdateOption.WithinModeling);
        abuilder.Point1 = pt1;
        abuilder.Point2 = pt2;
        shanker = abuilder.Commit();
        abuilder.Destroy();

        return shanker;


    }
    public double[] angle(DatumAxis axis)
    {
        double[] angle3d = { 0, 0, 0 };
        Part workPart = theSession.Parts.Work;
        NXObject nullNXObject = null;
        MeasureAngleBuilder bbuilder;
        bbuilder = workPart.MeasureManager.CreateMeasureAngleBuilder(nullNXObject);
        DatumAxis a = (DatumAxis)axis;
        bbuilder.Object1.Value = a;
        DatumAxis b = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) X axis");
        bbuilder.Object2.Value = b;
        //    NXObject f = bbuilder.Commit();
        Unit nullUnit = null;
        MeasureAngle measureAngle1;
        measureAngle1 = workPart.MeasureManager.NewAngle(nullUnit, a, NXOpen.MeasureManager.EndpointType.StartPoint, b, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg = measureAngle1.Value;
        DatumAxis b1 = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) Y axis");
        DatumAxis b2 = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) Z axis");
        bbuilder.Object2.Value = b1;
        Unit nullUnit1 = null;
        MeasureAngle measureAngle2;
        measureAngle2 = workPart.MeasureManager.NewAngle(nullUnit1, a, NXOpen.MeasureManager.EndpointType.StartPoint, b1, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg1 = measureAngle2.Value;
        bbuilder.Object2.Value = b2;
        Unit nullUnit11 = null;
        MeasureAngle measureAngle3;
        measureAngle3 = workPart.MeasureManager.NewAngle(nullUnit11, a, NXOpen.MeasureManager.EndpointType.StartPoint, b2, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg2 = measureAngle3.Value;
        angle3d[0] = deg;//deg 是相对与X轴的角度
        angle3d[1] = deg1;//相对于Y
        angle3d[2] = deg2;//相对于Z

        bbuilder.Destroy();
        return angle3d;//在一个方法中返回一个数组，直接写return +数组名就可以了
    }
    public void hideit(NXObject objtohide)//////这是一个隐藏NXObject的方法
    {
        DisplayableObject a = (DisplayableObject)objtohide;
        DisplayableObject[] objects1 = new DisplayableObject[1];
        objects1[0] = a;
        theSession.DisplayManager.BlankObjects(objects1);

    }
    public static bool isNum(char a)
    {
        string num = "0123456789.,-";
        string s = "" + a;
        return num.Contains(s);
    }
    public static string GetNumberFromString(string str)
    {
        string num = "";
        foreach (char a in str)
        {
            if (isNum(a))
            {
                if (a == ',')
                {
                    num += '.';
                }
                else
                {
                    num += a;
                }
            }
        }
        return num;

    }
    public static double GetDimensionValue(NXOpen.Annotations.Dimension dimension)
    {
        try
        {
            string[] mainTextLines;
            string[] dualTextLines;
            dimension.GetDimensionText(out mainTextLines, out dualTextLines);
            if (mainTextLines.Length > 0)
            {
                //这里可能包含特殊字符，从中得到连续数字
                string num = GetNumberFromString(mainTextLines[0]);
                return System.Convert.ToDouble(num);
            }
            else
            {
                return 0;
            }
        }
        catch/* (System.Exception ex)*/
        {
            throw new Exception("读取尺寸值失败，请手动指定尺寸值");
        }

    }
    public int FindTol()
    {
        TaggedObject[] obs = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
        if (obs.Length == 0)
        {
            return 0;
        }
        NXOpen.Annotations.Dimension d = (NXOpen.Annotations.Dimension)obs[0];
        double dim = GetDimensionValue(d);
        zdouble0.GetProperties().SetDouble("Value", dim);
        string type = zenum0.GetProperties().GetEnumAsString("Value");
        double upper, lower;
        if (!GetTolerance(dim, type, out upper, out lower, ApplicationPath + folderpath + hb))//undone
        {
            theUI.NXMessageBox.Show("提示", NXMessageBox.DialogType.Error, "没有查询到该尺寸的相关公差，请手动填写！");
        }
        zdoubleup.GetProperties().SetDouble("Value", upper);
        zdoubledown.GetProperties().SetDouble("Value", lower);
        return 1;
    }
    public static bool GetTolerance(double dim, string type, out double upper, out double lower, string xmlfile)
    {
        XmlDocument mydoc = new XmlDocument();
        mydoc.Load(xmlfile);
        XmlNodeList nodes = mydoc.SelectNodes("/Tolerance/Table/Tol");
        foreach (XmlElement xe in nodes)
        {
            if (xe.GetAttribute("type") == type)
            {
                string a = xe.GetAttribute("a");
                string b = xe.GetAttribute("b");
                char a_pre = a[0];
                char b_pre = b[0];
                double a_num = System.Convert.ToDouble(a.Substring(1));
                double b_num = System.Convert.ToDouble(b.Substring(1));
                if (dim > a_num && dim < b_num)
                {
                    upper = System.Convert.ToDouble(xe.GetAttribute("up"));
                    lower = System.Convert.ToDouble(xe.GetAttribute("low"));
                    return true;
                }
                else if (a_pre == 'E' && dim == a_num)
                {
                    upper = System.Convert.ToDouble(xe.GetAttribute("up"));
                    lower = System.Convert.ToDouble(xe.GetAttribute("low"));
                    return true;
                }
                else if (b_pre == 'E' && dim == b_num)
                {
                    upper = System.Convert.ToDouble(xe.GetAttribute("up"));
                    lower = System.Convert.ToDouble(xe.GetAttribute("low"));
                    return true;
                }
            }
        }
        upper = lower = 0;
        return false;

    }
  
    public static string TDPPMPath
    {
        get
        {
            string dll = ApplicationPath;
            return dll.Substring(0, dll.Length - 12) + "3DPPM\\";
        }
    }
    public int FindTol(double dim)
    {
        double0.GetProperties().SetDouble("Value", dim);
        string type = zenum0.GetProperties().GetEnumAsString("Value");
        double upper, lower;
        if (!GetTolerance(dim, type, out upper, out lower, ApplicationPath + folderpath + hb))//undone
        {
            theUI.NXMessageBox.Show("提示", NXMessageBox.DialogType.Error, "没有查询到该尺寸的相关公差，请手动填写！");
        }
        zdoubleup.GetProperties().SetDouble("Value", upper);
        zdoubledown.GetProperties().SetDouble("Value", lower);
        return 1;
    }
    public void refreshenum()
    {
        Part workPart = theSession.Parts.Work;
        ModelingViewCollection a = workPart.ModelingViews;
        aaa = a.ToArray();
        strvalue = new string[aaa.Length + 1];
        int i;
        for (i = 0; i < aaa.Length; i++)
        {
            //enum0.GetProperties().SetEnum("Value", i);
            strvalue[i] = aaa[i].Name;

        }
        strvalue[i] = "添加新视图";
        menum0.GetProperties().SetEnumMembers("Value", strvalue);

    }
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == zselection0)
            {
                //TaggedObject[] obs = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                //if (obs.Length == 0)
                //{
                //    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择尺寸");
                //    return 1;
                //}
                FindTol();
            //---------Enter your code here-----------
            }
            else if(block == ztoggle01)
            {
                if (ztoggle01.GetProperties().GetLogical("Value"))
                {
                    zpoint01.GetProperties().SetLogical("Show", true);
                    zpoint02.GetProperties().SetLogical("Show", true);
                   zbutton0.GetProperties().SetLogical("Show", true);

                }
                else if (!ztoggle01.GetProperties().GetLogical("Value"))
                {
                    zpoint01.GetProperties().SetLogical("Show", false);
                    zpoint02.GetProperties().SetLogical("Show", false);
                    zbutton0.GetProperties().SetLogical("Show", false);
                }
            //---------Enter your code here-----------
            }
            else if (block == zbutton1)
            {
                TaggedObject[] obs = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                if (obs.Length == 0)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择尺寸");
                    return 1;
                }
                double upper = zdoubleup.GetProperties().GetDouble("Value");
                double lower = zdoubledown.GetProperties().GetDouble("Value");
                NXOpen.Annotations.Dimension d = (NXOpen.Annotations.Dimension)obs[0];
                SetDimensionTolerance(d, upper, lower);
            //---------Enter your code here-----------
            }
            else if(block == zpoint02)
            {
            //---------Enter your code here-----------
            }
            else if(block == zbutton0)
            {
                firstpt = zpoint01.GetProperties().GetTaggedObjectVector("SelectedObjects");
                secpt = zpoint02.GetProperties().GetTaggedObjectVector("SelectedObjects");
                TaggedObject[] obs = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                if (obs.Length == 0)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择尺寸");
                    return 1;
                }
                if (firstpt.Length == 0)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择起始点");
                    return 1;
                }
                if (secpt.Length == 0)
                {

                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择终止点");
                    return 1;
                }
                Point a = Tag2NXObject<Point>(firstpt[0].Tag);
                Point b = Tag2NXObject<Point>(secpt[0].Tag);
                NXObject axisyo = shank(a, b);
                double[] real3d;
                NXOpen.Features.DatumAxisFeature axisreal = (NXOpen.Features.DatumAxisFeature)axisyo;
                DatumAxis axisreal1 = axisreal.DatumAxis;
                Point3d stpt;//轴的起点
                Point3d endpt;//轴的终点
                stpt = a.Coordinates;
                endpt = b.Coordinates;
                // axisreal1.GetEndPoints(out stpt, out endpt);
                hideit(axisreal1);
                real3d = angle(axisreal1);
                thepmi = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                if(thepmi.Length == 0)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择尺寸");
                      return 1;
                }
                NXObject last = Tag2NXObject<NXObject>(thepmi[0].Tag);
                NXOpen.Annotations.Dimension lastdimn = (NXOpen.Annotations.Dimension)last;
                double m = lastdimn.ComputedSize;
                double cosx = Math.Cos(ConvertDegreesToRadians(real3d[0]));
                double cosy = Math.Cos(ConvertDegreesToRadians(real3d[1]));
                double cosz = Math.Cos(ConvertDegreesToRadians(real3d[2]));
                double cosxx = cosx * m;
                double cosyy = cosy * m;
                double coszz = cosz * m;
                last.SetAttribute("X", cosxx);
                last.SetAttribute("Y", cosyy);
                last.SetAttribute("Z", coszz);
                last.SetAttribute("START-X", stpt.X);
                last.SetAttribute("START-Y", stpt.Y);
                last.SetAttribute("START-Z", stpt.Z);
                last.SetAttribute("END-X", endpt.X);
                last.SetAttribute("END-Y", endpt.Y);
                last.SetAttribute("END-Z", endpt.Z);
            //---------Enter your code here-----------
            }
            else if(block == zenum0)
            {
                FindTol();
            //---------Enter your code here-----------
            }
            else if(block == zdouble0)
            {
                double dim = zdouble0.GetProperties().GetDouble("Value");
                FindTol(dim);
            //---------Enter your code here-----------
            }
            else if (block == mstring0)
            {
                Part workPart = theSession.Parts.Work;
                viewname = mstring0.GetProperties().GetString("Value");
                workPart.Views.SaveAs(workPart.ModelingViews.WorkView, viewname, true, false);
                refreshenum();
              
                //---------Enter your code here-----------
            }
            else if(block == menum0)
            {
                Part workPart = theSession.Parts.Work;
                Layout layout1 = (Layout)workPart.Layouts.FindObject("L1");//此处写死了。。。。。TAG ERROR
                int sel = menum0.GetProperties().GetEnum("Value");
                string addnewstr = menum0.GetProperties().GetEnumAsString("Value");
                if (addnewstr != "添加新视图")
                {
                    layout1.ReplaceView(workPart.ModelingViews.WorkView, aaa[sel], true);
                }
                else
                {
                    mstring0.GetProperties().SetLogical("Show", true);

                    //string newviewname = null;
                    ////add.Show_add();
                    //add theadd = new add();
                    //theadd.Show();
                    //newviewname = theaddnew.string0.GetProperties().GetString("Value");

                }
            //---------Enter your code here-----------
            }
            else if(block == jplcpt)
            {

               

                string roughness = null;
              
                string jmatoffstr = null;//材料移除
              roughness = rouname.GetProperties().GetString("Value");//粗糙度
              string jstandenum = jstand.GetProperties().GetEnumAsString("Value");
                
                object StandardType=null;
                if (roughness == "")
                {
                    theUI.NXMessageBox.Show("请输入粗糙度", NXMessageBox.DialogType.Warning, "未输入粗糙度");
                    return 1;
                }
                string mgh = astring0.GetProperties().GetString("Value");
                if(mgh == "")
                {

                    theUI.NXMessageBox.Show("请输入位置符号", NXMessageBox.DialogType.Warning, "未输入位置符号");
                    return 1;

                }
              switch (jstandenum)
              { 
                  case "ANSI":
                  StandardType =NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Ansi;
                  break;
                  case "ISO 1992":
                   StandardType =NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Iso;
                      break;
                    case "JIS":
                   StandardType =NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Jis;
                      break;
                   case "DIN":
                   StandardType =NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Din;
                      break;
                   case "ISO 2002":
                   StandardType =NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Iso2002;
                      break;
                   case "DIN 2002":
                   StandardType =NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Din2002;
                      break;
                   case "GB":
                   StandardType =NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Gb;
                      break;
                    case "ESKD":
                   StandardType =NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Eskd;
                   break;
              }
                      string jmatoffenum = jmatoff.GetProperties().GetEnumAsString("Value");
                object  FinishType=null;
                      switch (jmatoffenum)
              { 
                          case "打开":
                          FinishType=NXOpen.Annotations.SurfaceFinishBuilder.FinishType.Basic;
                              break;
                           case "打开,修饰符":
                          FinishType=NXOpen.Annotations.SurfaceFinishBuilder.FinishType.Modifier;
                              break;
                               case "需要移除材料":
                          FinishType=NXOpen.Annotations.SurfaceFinishBuilder.FinishType.MaterialRemovalRequired;
                              break;
                               case "修饰符，需要移除材料":
                          FinishType=NXOpen.Annotations.SurfaceFinishBuilder.FinishType.ModifierMaterialRemovalRequired;
                              break;
                               case "禁止移除材料":
                          FinishType=NXOpen.Annotations.SurfaceFinishBuilder.FinishType.MaterialRemovalProhibited;
                              break;
                               case "修饰符，禁止移除材料":
                          FinishType=NXOpen.Annotations.SurfaceFinishBuilder.FinishType.ModifierMaterialRemovalProhibited;
                              break;
                 
              
              }
                     TaggedObject[] fnfaceobj = g.GetProperties().GetTaggedObjectVector("SelectedObjects");//关联对象



                     if (fnfaceobj.Length == 0)//tag undone
                     {
                         theUI.NXMessageBox.Show("请选择关联对象", NXMessageBox.DialogType.Warning, "未选择关联对象");
                         return 1;
                     }
                  Face   fnface = (Face)fnfaceobj[0];
                 NXOpen.Point jcrosptobj=null;
                      if (jtogglejy.GetProperties().GetLogical("Value"))
                      {
                          TaggedObject[] jcrosptobjobj = null;
                          jcrosptobjobj = jcrospt.GetProperties().GetTaggedObjectVector("SelectedObjects");//折线位置
                          if (jcrosptobjobj.Length == 0)
                          {
                              theUI.NXMessageBox.Show("请选择折线位置", NXMessageBox.DialogType.Warning, "未选择折线位置");
                              return 1;
                          }
                          jcrosptobj = (Point)jcrosptobjobj[0];
                      }
                     
                    // TaggedObject[] jintobjobj = jintobj.GetProperties().GetTaggedObjectVector("SelectedObjects");//关联对象
                //DisplayableObject obj=(DisplayableObject)jintobjobj[0];
                     NXOpen.Point jplcptobj = (NXOpen.Point)jplcpt.GetProperties().GetTaggedObjectVector("SelectedObjects")[0];
                Point3d point=jplcptobj.Coordinates;

                thepubfunfcf.SurfaceFinishFunction(roughness, mgh, StandardType, FinishType, point, fnface, jcrosptobj);
              

            }
            else if(block == jtogglejy)
            {
                if (jtogglejy.GetProperties().GetLogical("Value"))
                {
                    jcrospt.GetProperties().SetLogical("Enable", true);
                
                }
                else if (!jtogglejy.GetProperties().GetLogical("Value"))
                {
                
                jcrospt.GetProperties().SetLogical("Enable",false);
                }
            //---------Enter your code here-----------
            }
            else if(block == zenum01)
            {
                string table = zenum01.GetProperties().GetEnumAsString("Value");
                if (table == "表1")
                {
                    zlabel0.GetProperties().SetLogical("Show", true);
                    zlabel01.GetProperties().SetLogical("Show", false);
                }
                else if (table == "表4")
                {
                    zlabel0.GetProperties().SetLogical("Show", false);
                    zlabel01.GetProperties().SetLogical("Show", true);
                }
            //---------Enter your code here-----------
            }
            else if(block == zlabel0)
            {
            //---------Enter your code here-----------
            }
            else if(block == zlabel01)
            {
            //---------Enter your code here-----------
            }
            else if(block == list_box0)
            {
            //---------Enter your code here-----------
            }
            else if(block == tolatt)
            {
            //---------Enter your code here-----------
            }
            else if(block == framstyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == double0)
            {
            //---------Enter your code here-----------
            }
            else if(block == valuestyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == matrstyle)
            {
            //---------Enter your code here-----------
            }
            else if(block == mainbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == maiinbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator0)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator01)
            {
            //---------Enter your code here-----------
            }
            else if(block == ifotherbase)
            {
                int m = ifotherbase.GetProperties().GetEnum("Value");
                if (m == 0)
                {
                    firstrefbase.GetProperties().SetLogical("Enable", false);
                    firstrefbasemat.GetProperties().SetLogical("Enable", false);
                    secrefbase.GetProperties().SetLogical("Enable", false);
                    secrefbasemat.GetProperties().SetLogical("Enable", false);
                }
                else if (m == 1)
                {
                    firstrefbase.GetProperties().SetLogical("Enable", true);
                    firstrefbasemat.GetProperties().SetLogical("Enable", true);
                    secrefbase.GetProperties().SetLogical("Enable", false);
                    secrefbasemat.GetProperties().SetLogical("Enable", false);
                }
                else if (m == 2)
                {
                    firstrefbase.GetProperties().SetLogical("Enable", true);
                    firstrefbasemat.GetProperties().SetLogical("Enable", true);
                    secrefbase.GetProperties().SetLogical("Enable", true);
                    secrefbasemat.GetProperties().SetLogical("Enable", true);

                }
            //---------Enter your code here-----------
            }
            else if(block == separator02)
            {
            //---------Enter your code here-----------
            }
            else if(block == firstrefbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == firstrefbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == separator03)
            {
            //---------Enter your code here-----------
            }
            else if(block == secrefbase)
            {
            //---------Enter your code here-----------
            }
            else if(block == secrefbasemat)
            {
            //---------Enter your code here-----------
            }
            else if(block == double02)
            {
            //---------Enter your code here-----------
            }
            else if(block == double01)
            {
            //---------Enter your code here-----------
            }
            else if(block == toggle0)
            {
                if (toggle0.GetProperties().GetLogical("Value"))
                {
                    selection01.GetProperties().SetLogical("Enable", true);
                }
                else if (!toggle0.GetProperties().GetLogical("Value"))
                {
                    selection01.GetProperties().SetLogical("Enable", false);
                }
            //---------Enter your code here-----------
            }
            else if(block == selection01)
            {
            //---------Enter your code here-----------
            }
            else if(block == postion)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection0)
            {
            //---------Enter your code here-----------
            }
            else if(block == point0)
            {
                plcpoint = point0.GetProperties().GetTaggedObjectVector("SelectedObjects");
              
                theplcpoint = Tag2NXObject<Point>(plcpoint[0].Tag);
                Point3d pt3d = theplcpoint.Coordinates;//这个就是放置点
                string attvalue = tolatt.GetProperties().GetEnumAsString("Value");
                object attrtype = null;//这个是公差类型
                switch (attvalue)
                {
                    case "直线度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Straightness;
                        break;
                    case "平面度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Flatness;

                        break;
                    case "圆度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Circularity;
                        break;
                    case "圆柱度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Cylindricity;
                        break;
                    case "直线轮廓":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.ProfileOfALine;
                        break;
                    case "曲面轮廓":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.ProfileOfASurface;
                        break;
                    case "倾斜度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Angularity;
                        break;
                    case "垂直度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Perpendicularity;
                        break;
                    case "平行度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Parallelism;
                        break;
                    case "位置":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Position;
                        break;
                    case "对称度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Symmetry;
                        break;
                    case "同轴度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Concentricity;
                        break;
                    case "圆跳动":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.CircularRunout;
                        break;
                    case "全跳动":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.TotalRunout;
                        break;

                }
                int i = valuestyle.GetProperties().GetEnum("Value");
                object zhileixing = null;//这个是公差的值类型，可以是fai,Sfai.
                if (i == 0)
                {
                    zhileixing = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceZoneShape.Diameter;
                }
                else if (i == 1)
                {
                    zhileixing = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceZoneShape.None;
                }
                else if (i == 2)
                {
                    zhileixing = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceZoneShape.SphericalDiameter;
                }
                object matcondition = null;//行为公差的材料状况
                //string matconditionatt =  .GetProperties().GetEnumAsString("Value");
                string matconditionatt = matrstyle.GetProperties().GetEnumAsString("Value");
                if (matconditionatt == "最好材料状况")
                {
                    matcondition = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceMaterialModifier.MaximumMaterialCondition;
                }
                else if (matconditionatt == "最差材料状况")
                {
                    matcondition = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceMaterialModifier.LeastMaterialCondition;
                }
                else if (matconditionatt == "不考虑特征大小")
                {
                    matcondition = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceMaterialModifier.RegardlessOfFeatureSize;
                }
                else if (matconditionatt == "无")
                {
                    matcondition = null;
                }
                    string baseattstr = mainbase.GetProperties().GetEnumAsString("Value");//基准类型A----H
                if (baseattstr == "无")
                {
                    baseattstr = null;
                }
                string mainbasematstr = maiinbasemat.GetProperties().GetEnumAsString("Value");
                object mainbasematobj = null;//这个是主基准材料状况
                if (mainbasematstr == "最好材料状况")
                {
                    mainbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.MaximumMaterialCondition;
                }
                else if (mainbasematstr == "最差材料状况")
                {
                    mainbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.LeastMaterialCondition;
                }
                else if (mainbasematstr == "不考虑特征大小")
                {
                    mainbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.RegardlessOfFeatureSize;
                }
                else if (mainbasematstr == "无")
                {
                    mainbasematobj = null;
                }
                string firstbasestr = firstrefbase.GetProperties().GetEnumAsString("Value");//第一参考基准，也就是平常说的第二参考基准
                if (firstbasestr == "无")
                {
                    firstbasestr = null;
                }
                string firstbasematstr = firstrefbasemat.GetProperties().GetEnumAsString("Value");
                object firstbasematobj = null;//这个是第一（第二）参考基准的材料特性
                if (firstbasematstr == "最好材料状况")
                {
                    firstbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.MaximumMaterialCondition;
                }
                else if (firstbasematstr == "最差材料状况")
                {
                    firstbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.LeastMaterialCondition;
                }
                else if (firstbasematstr == "不考虑特征大小")
                {
                    firstbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.RegardlessOfFeatureSize;
                }
                else if (firstbasematstr == "无")
                {
                
                firstbasematobj = null;
                }
                string secbasestr = secrefbase.GetProperties().GetEnumAsString("Value");//第二参考基准（第三）
                if (secbasestr == "无")
                {
                    secbasestr = null;

                }
                string secbasematstr = secrefbasemat.GetProperties().GetEnumAsString("Value");

                object secbasematobj = null;//这个是第二（第三）参考基准的材料特性
                if (secbasematstr == "最好材料状况")
                {
                    secbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.MaximumMaterialCondition;
                }
                else if (secbasematstr == "最差材料状况")
                {
                    secbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.LeastMaterialCondition;
                }
                else if (secbasematstr == "不考虑特征大小")
                {
                    secbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.RegardlessOfFeatureSize;
                }
                else if (secbasematstr == "无")
                {
                    secbasematobj = null;
                
                }
                double tolvalue = double0.GetProperties().GetDouble("Value");//这个是公差值
                double zoom = double01.GetProperties().GetDouble("Value");//这个是放大缩小的因子
                if (tolvalue == 0.0)
                {
                    theUI.NXMessageBox.Show("公差值为0", NXMessageBox.DialogType.Warning, "公差值不能为0");
                return 1;
                }

                int pp = framstyle.GetProperties().GetEnum("Value");
                object kuang = null;//框样式
                if (pp == 0)//单框
                {
                    kuang = NXOpen.Annotations.FeatureControlFrameBuilder.FcfFrameStyle.SingleFrame;
                }
                else if (pp == 1)//多框
                {
                    kuang = NXOpen.Annotations.FeatureControlFrameBuilder.FcfFrameStyle.CompositeFrame;
                }
                //int qq = postion.GetProperties().GetEnum("Value");
                object LeaderType=null;
               // if (qq == 0)//折线形式是选择点
               // {
                    LeaderType = NXOpen.Annotations.LeaderData.LeaderType.Plain;
                //    Selection.MaskTriple[] msktripe = null;
                //    msktripe[0].Type = NXOpen.UF.UFConstants.UF_point_type;
                //    selection0.GetProperties().SetSelectionFilter("SelectionFilter", Selection.SelectionAction.ClearAndEnableSpecific, msktripe);
                //    //NXOpen.TaggedObject tagobj = selection0.GetProperties().GetTaggedObject("SelectedObjects");
              //  }
               // else if (qq == 1)//折现形式是选择线
                //{
                  //  LeaderType=NXOpen.Annotations.LeaderData.LeaderType.Flag;
                //    Selection.MaskTriple[] msktripe = null;
                //    msktripe[0].Type = NXOpen.UF.UFConstants.UF_solid_type;
                //    msktripe[0].Subtype = NXOpen.UF.UFConstants.UF_all_subtype;
                //    msktripe[0].SolidBodySubtype = NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE;


                //}
                DisplayableObject zhexiandian = null;
                NXOpen.TaggedObject[] tagobj00 = selection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                if(tagobj00.Length == 0)
                {
                    theUI.NXMessageBox.Show("未选择折线角点",NXMessageBox.DialogType.Warning,"请先选择折线角点");
                    return 1;
                }
                zhexiandian = Tag2NXObject<DisplayableObject>(tagobj00[0].Tag);
                //Point3d realdian = zhexiandian.Coordinates;//这个是折线点
                DisplayableObject guanlian = null;//关联对象
                if (selection01.GetProperties().GetLogical("Enable"))
                {
                    NXOpen.TaggedObject[] tagobj1 = selection01.GetProperties().GetTaggedObjectVector("SelectedObjects");
                    if (tagobj1.Length == 0)
                    {
                        theUI.NXMessageBox.Show("未选择关联对象", NXMessageBox.DialogType.Warning, "请选择关联对象");
                        return 1;
                    }
                    guanlian = Tag2NXObject<DisplayableObject>(tagobj1[0].Tag);
                }

                int st = ifotherbase.GetProperties().GetEnum("Value");
                if (st == 0)
                {
                    firstbasematobj = null;
                    firstbasestr = null;
                    secbasestr = null;
                    secbasematobj = null;
                }
                else if (st == 1)
                {
                    secbasestr = null;
                    secbasematobj = null;
                }
              double conlength = double02.GetProperties().GetDouble("Value");//这是短线长度。
                //Selection.MaskTriple msktrp;
             //msktrp.Subtype = 
             //selection0.GetProperties().SetSelectionFilter("SelectionFilter",Selection.SelectionAction.ClearAndEnableSpecific,
              //thefun.function(tolvalue.ToString(), baseattstr, firstbasestr, secbasestr, zhileixing, matcondition, mainbasematobj, firstbasematobj, 
                
                thepubfunfcf.function(tolvalue.ToString(), baseattstr, firstbasestr, secbasestr, zhileixing, matcondition, mainbasematobj, firstbasematobj, secbasematobj, kuang, zoom, conlength, pt3d, zhexiandian, guanlian,LeaderType);
            }
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }


    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        if (block == zselection0)
        {
            try
            {
                NXOpen.Annotations.Dimension d = (NXOpen.Annotations.Dimension)selectedObject;
            }
            catch
            {
                return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
            }
        }
        else if (block == selection0)
        {
            try
            {
                Point d = (Point)selectedObject;
            }
            catch
            {
                return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
            }
        
        }

        return (NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }
    public static string NXPath
    {
        get
        {
            string ugraf = Process.GetCurrentProcess().MainModule.FileName;
            return ugraf.Substring(0, ugraf.Length - 14);
        }
    }
    public static string ApplicationPath
    {
        get
        {
            return System.AppDomain.CurrentDomain.BaseDirectory;
        }
    }
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
}
