//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\yibo\Desktop\finalconbine.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: yibo
//              Version: NX 7.5
//              Date: 09-10-2012  (Format: mm-dd-yyyy)
//              Time: 09:58 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.UF;
using System.Xml;
using System.Reflection;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;
//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class finalconbine
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    public static finalconbine thefinalconbine;
    private string theDialogName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.UIBlock tabControl;// Block type: Tabs Page
    private NXOpen.BlockStyler.UIBlock tabPage1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zgroup0;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zselection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock ztoggle01;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock zpoint01;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock zpoint02;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock zbutton0;// Block type: Button
    private NXOpen.BlockStyler.UIBlock zbutton1;// Block type: Button
    private NXOpen.BlockStyler.UIBlock zenum0;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock zgroup;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zdouble0;// Block type: Double
    private NXOpen.BlockStyler.UIBlock separator04;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock zdoubleup;// Block type: Double
    private NXOpen.BlockStyler.UIBlock zdoubledown;// Block type: Double
    private NXOpen.BlockStyler.UIBlock zgroup01;// Block type: Group
    private NXOpen.BlockStyler.UIBlock zenum01;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock zlabel0;// Block type: Label
    private NXOpen.BlockStyler.UIBlock zlabel01;// Block type: Label
    private NXOpen.BlockStyler.UIBlock zgroup1;// Block type: Group
    private NXOpen.BlockStyler.ListBox list_box0;// Block type: List Box
    private NXOpen.BlockStyler.UIBlock tabPage;// Block type: Group
    private NXOpen.BlockStyler.UIBlock group2;// Block type: Group
    private NXOpen.BlockStyler.UIBlock tolatt;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock framstyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock double0;// Block type: Double
    private NXOpen.BlockStyler.UIBlock valuestyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock matrstyle;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock group;// Block type: Group
    private NXOpen.BlockStyler.UIBlock mainbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock maiinbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator0;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock separator01;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock ifotherbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator02;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock firstrefbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock firstrefbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock separator03;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock secrefbase;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock secrefbasemat;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock group1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock double02;// Block type: Double
    private NXOpen.BlockStyler.UIBlock double01;// Block type: Double
    private NXOpen.BlockStyler.UIBlock toggle0;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock selection01;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock postion;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock selection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock point0;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock tabPage2;// Block type: Group
    private NXOpen.BlockStyler.UIBlock jgroup3;// Block type: Group
    private NXOpen.BlockStyler.UIBlock jmatoff;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock jstand;// Block type: Enumeration
    private NXOpen.BlockStyler.UIBlock jgroup4;// Block type: Group
    private NXOpen.BlockStyler.UIBlock jendobj;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock separator05;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jtogglejy;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock jcrospt;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock separator06;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jintobj;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock separator07;// Block type: Separator
    private NXOpen.BlockStyler.UIBlock jplcpt;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock group3;// Block type: Group
    private NXOpen.BlockStyler.UIBlock rouname;// Block type: String
    private NXOpen.BlockStyler.UIBlock toggle1314;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock jiaoyanshitol;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock jiaoyanshisel;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock jiaoyanshibut;// Block type: Button

    private NXOpen.BlockStyler.UIBlock button0115fea;// Block type: Button
    private NXOpen.BlockStyler.UIBlock button0115rou;// Block type: Button


    private NXOpen.BlockStyler.UIBlock enum1314;// Block type: Enumeration
    public static NXOpen.TaggedObject[] firstpt;//第一个点
    public static NXOpen.TaggedObject[] secpt;//第2个点
    public static NXOpen.TaggedObject[] thepmi;
    private NXOpen.BlockStyler.UIBlock astring0;// Block type: String
    private NXOpen.BlockStyler.UIBlock china;// Block type: Integer
    private NXOpen.BlockStyler.UIBlock japan;// Block type: Integer
    private NXOpen.BlockStyler.UIBlock there;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock here;// Block type: Selection
    public NXOpen.TaggedObject[] plcpoint;//放置点
    public Point theplcpoint = null;
    pubfun thepubfunfcf = new pubfun();
    private NXOpen.BlockStyler.UIBlock g;
    public string hb = "HB5800.xml";
    public string folderpath = "3dppmplugin\\";
    private NXOpen.BlockStyler.UIBlock mstring0;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock menum0;// Block type: Group
    NXOpen.ModelingView[] aaa = null;//所有的视图
    string[] strvalue;
    public string viewname = null;
    private NXOpen.BlockStyler.UIBlock obutton0;// Block type: Button
    private NXOpen.BlockStyler.Tree tree_control0;// Block type: Tree Control
    private NXOpen.BlockStyler.UIBlock tabPage3;// Block type: Group
    public Node dimnode = null;//尺寸公差根节点
    Node cddimnode = null;//尺寸公差子节点
    public Node fcfnode = null;//行位公差根节点
    Node cdfcfnode = null;//行位公差子节点
    string fcfguid = null;
    string dimguid = null;
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesEnabled
    //------------------------------------------------------------------------------
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int          SnapPointTypesOnByDefault_UserDefined = (1 << 0);
    public static readonly int             SnapPointTypesOnByDefault_Inferred = (1 << 1);
    public static readonly int       SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 <<13);
    public static readonly int         SnapPointTypesOnByDefault_TangentPoint = (1 <<14);
    public static readonly int                SnapPointTypesOnByDefault_Poles = (1 <<15);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public finalconbine()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDialogName = "finalconbine.dlx";
            theDialog = theUI.CreateDialog(theDialogName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
        }
        catch 
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("提示", NXMessageBox.DialogType.Warning, "请先打开一个模型在使用本工具");
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        try
        {
            thefinalconbine = new finalconbine();
            // The following method shows the dialog immediately
            thefinalconbine.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            thefinalconbine.Dispose();
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static int UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch 
        {
            //---- Enter your exception handling code here -----
            //theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            tabControl = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabControl");
            tabPage1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage1");
            zgroup0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup0");
            zselection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zselection0");
            ztoggle01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("ztoggle01");
            zpoint01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zpoint01");
            zpoint02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zpoint02");
            zbutton0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zbutton0");
            zbutton1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zbutton1");
            zenum0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zenum0");
            zgroup = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup");
            zdouble0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdouble0");
            separator04 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator04");
            zdoubleup = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdoubleup");
            zdoubledown = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zdoubledown");
            zgroup01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup01");
            zenum01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zenum01");
            zlabel0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zlabel0");
            zlabel01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zlabel01");
            zgroup1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("zgroup1");
            list_box0 = (NXOpen.BlockStyler.ListBox)theDialog.TopBlock.FindBlock("list_box0");
            tabPage = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage");
            group2 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group2");
            tolatt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tolatt");
            framstyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("framstyle");
            double0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double0");
            valuestyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("valuestyle");
            matrstyle = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("matrstyle");
            group = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group");
            mainbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("mainbase");
            maiinbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("maiinbasemat");
            separator0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator0");
            separator01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator01");
            ifotherbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("ifotherbase");
            separator02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator02");
            firstrefbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("firstrefbase");
            firstrefbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("firstrefbasemat");
            separator03 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator03");
            secrefbase = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("secrefbase");
            secrefbasemat = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("secrefbasemat");
            group1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group1");
            double02 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double02");
            double01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("double01");
            toggle0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle0");
            selection01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection01");
            postion = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("postion");
            selection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection0");
            point0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("point0");
            jgroup3 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jgroup3");
            jmatoff = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jmatoff");
            jstand = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jstand");
            jgroup4 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jgroup4");
            jendobj = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jendobj");
            separator05 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator05");
            jtogglejy = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jtogglejy");
            jcrospt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jcrospt");
            separator06 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator06");
            jintobj = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jintobj");
            separator07 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("separator07");
            jplcpt = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jplcpt");
            group3 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group3");
            rouname = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("rouname");
            astring0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("astring0");
            g = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("g");
            menum0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("menum0");
            mstring0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("mstring0");
            tabPage3 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("tabPage3");
            obutton0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("obutton0");
            tree_control0 = (NXOpen.BlockStyler.Tree)theDialog.TopBlock.FindBlock("tree_control0");
            there = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("there");
            here = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("here");
            china = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("china");
            japan = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("japan");
            jiaoyanshitol = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jiaoyanshitol");
            jiaoyanshisel = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jiaoyanshisel");
            jiaoyanshibut = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("jiaoyanshibut");
           tree_control0.SetStateIconNameHandler(new NXOpen.BlockStyler.Tree.StateIconNameCallback(StateIconNameCallback));
           enum1314 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("enum1314");
           toggle1314 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle1314");
           button0115fea = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("button0115fea");
           button0115rou = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("button0115rou");
            //tree_control0.SetOnExpandHandler(new NXOpen.BlockStyler.Tree.OnExpandCallback(OnExpandCallback));

            //tree_control0.SetOnInsertColumnHandler(new NXOpen.BlockStyler.Tree.OnInsertColumnCallback(OnInsertColumnCallback));

            //tree_control0.SetOnInsertNodeHandler(new NXOpen.BlockStyler.Tree.OnInsertNodeCallback(OnInsertNodecallback));

            //tree_control0.SetOnDeleteNodeHandler(new NXOpen.BlockStyler.Tree.OnDeleteNodeCallback(OnDeleteNodecallback));

            //tree_control0.SetOnPreSelectHandler(new NXOpen.BlockStyler.Tree.OnPreSelectCallback(OnPreSelectcallback));

            //tree_control0.SetOnSelectHandler(new NXOpen.BlockStyler.Tree.OnSelectCallback(OnSelectcallback));

            //tree_control0.SetOnStateChangeHandler(new NXOpen.BlockStyler.Tree.OnStateChangeCallback(OnStateChangecallback));

            //tree_control0.SetToolTipTextHandler(new NXOpen.BlockStyler.Tree.ToolTipTextCallback(ToolTipTextcallback));

           //tree_control0.SetColumnSortHandler(new NXOpen.BlockStyler.Tree.ColumnSortCallback(ColumnSortCallback));

            //tree_control0.SetStateIconNameHandler(new NXOpen.BlockStyler.Tree.StateIconNameCallback(StateIconNameCallback));

            //tree_control0.SetOnBeginLabelEditHandler(new NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback(OnBeginLabelEditCallback));

            //tree_control0.SetOnEndLabelEditHandler(new NXOpen.BlockStyler.Tree.OnEndLabelEditCallback(OnEndLabelEditCallback));

            //tree_control0.SetOnEditOptionSelectedHandler(new NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback(OnEditOptionSelectedCallback));

            //tree_control0.SetAskEditControlHandler(new NXOpen.BlockStyler.Tree.AskEditControlCallback(AskEditControlCallback));

           tree_control0.SetOnMenuHandler(new NXOpen.BlockStyler.Tree.OnMenuCallback(OnMenuCallback)); ;

           tree_control0.SetOnMenuSelectionHandler(new NXOpen.BlockStyler.Tree.OnMenuSelectionCallback(OnMenuSelectionCallback)); ;

           //tree_control0.setisdropallowedhandler(new nxopen.blockstyler.tree.isdropallowedcallback(isdropallowedcallback)); ;

           //tree_control0.SetIsDragAllowedHandler(new NXOpen.BlockStyler.Tree.IsDragAllowedCallback(IsDragAllowedCallback)); ;
           tree_control0.SetIsDropAllowedHandler(new NXOpen.BlockStyler.Tree.IsDropAllowedCallback(IsDropAllowedCallback)); ;
           tree_control0.SetOnDropHandler(new NXOpen.BlockStyler.Tree.OnDropCallback(OnDropCallback)); ;

            //tree_control0.SetOnDropMenuHandler(new NXOpen.BlockStyler.Tree.OnDropMenuCallback(OnDropMenuCallback));
            
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //TaggedObject[] obb = null;
            //zselection0.GetProperties().SetTaggedObjectVector("SelectedObjects", obb);
            enum1314.GetProperties().SetLogical("Show", true);
            toggle1314.GetProperties().SetLogical("Show", false);
            selection01.GetProperties().SetLogical("Enable", false);
            ifotherbase.GetProperties().SetEnum("Value", 0);
            firstrefbase.GetProperties().SetLogical("Enable", false);
            firstrefbasemat.GetProperties().SetLogical("Enable", false);
            secrefbase.GetProperties().SetLogical("Enable", false);
            secrefbasemat.GetProperties().SetLogical("Enable", false);
            toggle0.GetProperties().SetLogical("Value", false);
            there.GetProperties().SetLogical("Show",false);
            //jtogglejy.GetProperties().GetLogical("Value")
                 enum1314.GetProperties().SetEnumAsString("Value", "本模型内");
                jtogglejy.GetProperties().SetLogical("Value", false);
                jcrospt.GetProperties().SetLogical("Enable",false);
                obutton0.GetProperties().SetString("Label", "查询尺寸标注");
                tree_control0.GetProperties().SetLogical("Show", true);
                tree_control0.InsertColumn(1, "编号", 130);//一定有注意不同的回调函数的问题
                tree_control0.InsertColumn(2, "名义尺", 100);
                tree_control0.InsertColumn(3, "上公差", 100);
                tree_control0.InsertColumn(4, "下公差", 100);
                there.GetProperties().SetLogical("Value", false);
                here.GetProperties().SetLogical("Show", false);
                here.GetProperties().SetLogical("Enable",false);
                Session theSession = Session.GetSession();
                Part workPart = theSession.Parts.Work;
                Part displayPart = theSession.Parts.Display;
                //NXOpen.Section[] sec = workPart.Sections.ToArray();
                refreshenum();
                //string name = workPart.ModelingViews.WorkView.Name;
                string name = null;
               
           
          
                ztoggle01.GetProperties().SetLogical("Value", false);
                china.GetProperties().SetLogical("Enable", false);
                japan.GetProperties().SetLogical("Enable", false);


                jiaoyanshitol.GetProperties().SetLogical("Value", false);
                jiaoyanshisel.GetProperties().SetLogical("Show", false);
                jiaoyanshibut.GetProperties().SetLogical("Show", false);
                try
                {
                    name = workPart.ModelingViews.WorkView.Name;
                    menum0.GetProperties().SetEnumAsString("Value", name);
                }
                catch
                {
                    theUI.NXMessageBox.Show("提示", NXMessageBox.DialogType.Warning, "当前工作视图为轻量级剖视图，在此视图下本工具中视图切换工具无法正常使用，\n可将其他非轻量级剖视图设为工作视图后重新启用本工具");
                    menum0.GetProperties().SetLogical("Enable", false);
                    return;
                }
            
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    /// <summary>
    /// 反射技术，唯我独尊！！！
    /// </summary>
    /// <param name="ob"></param>
    /// <param name="funName"></param>
    /// <returns></returns>
    public static object ReflectFun(object ob, string funName)
    {
        Type type = ob.GetType();
        MethodInfo mi = type.GetMethod(funName);
        return mi.Invoke(ob, null);
    }
    public static object ReflectFun(object ob, string funName, object parm)
    {
        Type type = ob.GetType();
        MethodInfo mi = type.GetMethod(funName);
        object[] parms = new object[1];
        parms[0] = parm;
        return mi.Invoke(ob, parms);
    }
    /// <summary>
    /// 这个多参的貌似有问题啊！
    /// </summary>
    /// <param name="ob"></param>
    /// <param name="funName"></param>
    /// <param name="parm1"></param>
    /// <param name="parm2"></param>
    /// <param name="parm3"></param>
    public static void ReflectFun(object ob, string funName, object parm1, object parm2, object parm3)
    {
        Type type = ob.GetType();
        MethodInfo mi = type.GetMethod(funName);
        object[] parms = new object[3];
        parms[0] = parm1;
        parms[1] = parm2;
        parms[2] = parm3;
        mi.Invoke(ob, parms);
        //mi.Invoke()
    }
    public static object ReflectGetProperty(object ob, string funName)
    {
        Type type = ob.GetType();
        PropertyInfo pi = type.GetProperty(funName);
        return pi.GetValue(ob, null);
    }
    public static void ReflectSetProperty(object ob, string funName, object parm)
    {
        Type type = ob.GetType();
        PropertyInfo pi = type.GetProperty(funName);
        pi.SetValue(ob, parm, null);
    }
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public static void SetDimensionTolerance(NXOpen.Annotations.Dimension dimension, double upper, double lower)
    {
        Session theSession = Session.GetSession();
        Part workPart = theSession.Parts.Work;
        Part displayPart = theSession.Parts.Display;
        NXOpen.Session.UndoMarkId markId1;
        markId1 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start");
        NXOpen.Annotations.Value lowerToleranceMm1;
        lowerToleranceMm1.ItemValue = lower;
        Expression nullExpression = null;
        lowerToleranceMm1.ValueExpression = nullExpression;
        lowerToleranceMm1.ValuePrecision = 3;
        NXOpen.Annotations.Value upperToleranceMm1;
        upperToleranceMm1.ItemValue = upper;
        upperToleranceMm1.ValueExpression = nullExpression;
        upperToleranceMm1.ValuePrecision = 3;
        Object tol = ReflectFun(dimension, "GetTolerance");
        Type type = tol.GetType();
        if (type.Name == "LinearTolerance")
        {
            ReflectFun(tol, "SetLowerToleranceMm", lowerToleranceMm1);
            ReflectFun(tol, "SetUpperToleranceMm", upperToleranceMm1);
        }
        else
        {
            ReflectFun(tol, "SetLowerToleranceDegrees", lowerToleranceMm1);
            ReflectFun(tol, "SetUpperToleranceDegrees", upperToleranceMm1);
        }
        //设置公差类型
        if (upper + lower == 0)
        {
            ReflectSetProperty(tol, "ToleranceType", NXOpen.Annotations.ToleranceType.BilateralOneLine);
        }
        else if (lower == 0)
        {
            ReflectSetProperty(tol, "ToleranceType", NXOpen.Annotations.ToleranceType.UnilateralAbove);
        }
        else if (upper == 0)
        {
            ReflectSetProperty(tol, "ToleranceType", NXOpen.Annotations.ToleranceType.UnilateralBelow);
        }
        else
        {
            ReflectSetProperty(tol, "ToleranceType", NXOpen.Annotations.ToleranceType.UnilateralAbove);
        }
        ReflectFun(dimension, "SetTolerance", tol);

        //设置公差的显示大小
        NXOpen.Annotations.LetteringPreferences letteringPreferences1;
        letteringPreferences1 = dimension.GetLetteringPreferences();
        NXOpen.Annotations.Lettering toleranceText1 = letteringPreferences1.GetDimensionText();
        if (upper + lower != 0)
            toleranceText1.Size = 0.57 * toleranceText1.Size;
        letteringPreferences1.SetToleranceText(toleranceText1);
        dimension.SetLetteringPreferences(letteringPreferences1);
        int nErrs2 = theSession.UpdateManager.DoUpdate(markId1);
    }
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
          
           
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------

    public static double ConvertDegreesToRadians(double degrees)//角度到弧度的转换方法
    {
        double radians = (Math.PI / 180) * degrees;
        // return (radians);
        return radians;//return 的这两种写法都是可以的
    }
    public static T Tag2NXObject<T>(Tag tag)
    {
        try
        {
            object to = NXOpen.Utilities.NXObjectManager.Get(tag);
            return (T)to;
        }
        catch (System.Exception ex)
        {
            UI.GetUI().NXMessageBox.Show("Message", NXMessageBox.DialogType.Error, ex.Message);
            return default(T);
        }
    }
    public NXObject shank(Point point1, Point point2)
    {
        Part workPart = theSession.Parts.Work;
        NXObject shanker;
        NXOpen.Features.Feature nullFeatures_Feature = null;
        NXOpen.Features.DatumAxisBuilder abuilder;
        abuilder = workPart.Features.CreateDatumAxisBuilder(nullFeatures_Feature);
        abuilder.ArcLength.Expression.RightHandSide = "0";
        abuilder.Type = NXOpen.Features.DatumAxisBuilder.Types.TwoPoints;
        abuilder.IsAssociative = true;
        Xform nullXform = null;
        //Point pt1 = workPart.Points.CreatePoint(point1, nullXform, NXOpen.SmartObject.UpdateOption.WithinModeling);
        //Point pt2 = workPart.Points.CreatePoint(point2, nullXform, NXOpen.SmartObject.UpdateOption.WithinModeling);
        abuilder.Point1 = point1;
        abuilder.Point2 = point2;
        shanker = abuilder.Commit();
        abuilder.Destroy();

        return shanker;


    }
    public double[] angle(DatumAxis axis)
    {
        double[] angle3d = { 0, 0, 0 };
        Part workPart = theSession.Parts.Work;
        NXObject nullNXObject = null;
        MeasureAngleBuilder bbuilder;
        bbuilder = workPart.MeasureManager.CreateMeasureAngleBuilder(nullNXObject);
        DatumAxis a = (DatumAxis)axis;
        bbuilder.Object1.Value = a;
        DatumAxis b = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) X axis");
        bbuilder.Object2.Value = b;
        //    NXObject f = bbuilder.Commit();
        Unit nullUnit = null;
        MeasureAngle measureAngle1;
        measureAngle1 = workPart.MeasureManager.NewAngle(nullUnit, a, NXOpen.MeasureManager.EndpointType.StartPoint, b, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg = measureAngle1.Value;
        DatumAxis b1 = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) Y axis");
        DatumAxis b2 = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) Z axis");
        bbuilder.Object2.Value = b1;
        Unit nullUnit1 = null;
        MeasureAngle measureAngle2;
        measureAngle2 = workPart.MeasureManager.NewAngle(nullUnit1, a, NXOpen.MeasureManager.EndpointType.StartPoint, b1, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg1 = measureAngle2.Value;
        bbuilder.Object2.Value = b2;
        Unit nullUnit11 = null;
        MeasureAngle measureAngle3;
        measureAngle3 = workPart.MeasureManager.NewAngle(nullUnit11, a, NXOpen.MeasureManager.EndpointType.StartPoint, b2, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg2 = measureAngle3.Value;
        angle3d[0] = deg;//deg 是相对与X轴的角度
        angle3d[1] = deg1;//相对于Y
        angle3d[2] = deg2;//相对于Z

        bbuilder.Destroy();
        return angle3d;//在一个方法中返回一个数组，直接写return +数组名就可以了
    }
    public void hideit(NXObject objtohide)//////这是一个隐藏NXObject的方法
    {
        DisplayableObject a = (DisplayableObject)objtohide;
        DisplayableObject[] objects1 = new DisplayableObject[1];
        objects1[0] = a;
        theSession.DisplayManager.BlankObjects(objects1);

    }
    public static bool isNum(char a)
    {
        string num = "0123456789.,-";
        string s = "" + a;
        return num.Contains(s);
    }
    public static string GetNumberFromString(string str)
    {
        string num = "";
        foreach (char a in str)
        {
            if (isNum(a))
            {
                if (a == ',')
                {
                    num += '.';
                }
                else
                {
                    num += a;
                }
            }
        }
        return num;

    }
    public static double GetDimensionValue(NXOpen.Annotations.Dimension dimension)
    {
        try
        {
            string[] mainTextLines;
            string[] dualTextLines;
            dimension.GetDimensionText(out mainTextLines, out dualTextLines);
            if (mainTextLines.Length > 0)
            {
                //这里可能包含特殊字符，从中得到连续数字
                string num = GetNumberFromString(mainTextLines[0]);
                return System.Convert.ToDouble(num);
            }
            else
            {
                return 0;
            }
        }
        catch/* (System.Exception ex)*/
        {
            throw new Exception("读取尺寸值失败，请手动指定尺寸值");
        }

    }
    public int FindTol()
    {
        TaggedObject[] obs = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
        if (obs.Length == 0)
        {
            return 0;
        }
        NXOpen.Annotations.Dimension d = (NXOpen.Annotations.Dimension)obs[0];
        double dim = GetDimensionValue(d);
        zdouble0.GetProperties().SetDouble("Value", dim);
        string type = zenum0.GetProperties().GetEnumAsString("Value");
        double upper, lower;
        if (!GetTolerance(dim, type, out upper, out lower, ApplicationPath + folderpath + hb))//undone
        {
            theUI.NXMessageBox.Show("提示", NXMessageBox.DialogType.Error, "没有查询到该尺寸的相关公差，请手动填写！");
        }
        zdoubleup.GetProperties().SetDouble("Value", upper);
        zdoubledown.GetProperties().SetDouble("Value", lower);
        return 1;
    }
    public static bool GetTolerance(double dim, string type, out double upper, out double lower, string xmlfile)
    {
        XmlDocument mydoc = new XmlDocument();
        mydoc.Load(xmlfile);
        XmlNodeList nodes = mydoc.SelectNodes("/Tolerance/Table/Tol");
        foreach (XmlElement xe in nodes)
        {
            if (xe.GetAttribute("type") == type)
            {
                string a = xe.GetAttribute("a");
                string b = xe.GetAttribute("b");
                char a_pre = a[0];
                char b_pre = b[0];
                double a_num = System.Convert.ToDouble(a.Substring(1));
                double b_num = System.Convert.ToDouble(b.Substring(1));
                if (dim > a_num && dim < b_num)
                {
                    upper = System.Convert.ToDouble(xe.GetAttribute("up"));
                    lower = System.Convert.ToDouble(xe.GetAttribute("low"));
                    return true;
                }
                else if (a_pre == 'E' && dim == a_num)
                {
                    upper = System.Convert.ToDouble(xe.GetAttribute("up"));
                    lower = System.Convert.ToDouble(xe.GetAttribute("low"));
                    return true;
                }
                else if (b_pre == 'E' && dim == b_num)
                {
                    upper = System.Convert.ToDouble(xe.GetAttribute("up"));
                    lower = System.Convert.ToDouble(xe.GetAttribute("low"));
                    return true;
                }
            }
        }
        upper = lower = 0;
        return false;

    }
  
    public static string TDPPMPath
    {
        get
        {
            string dll = ApplicationPath;
            return dll.Substring(0, dll.Length - 12) + "3DPPM\\";
        }
    }
    public int FindTol(double dim)
    {
        double0.GetProperties().SetDouble("Value", dim);
        string type = zenum0.GetProperties().GetEnumAsString("Value");
        double upper, lower;
        if (!GetTolerance(dim, type, out upper, out lower, ApplicationPath + folderpath + hb))//undone
        {
            theUI.NXMessageBox.Show("提示", NXMessageBox.DialogType.Error, "没有查询到该尺寸的相关公差，请手动填写！");
        }
        zdoubleup.GetProperties().SetDouble("Value", upper);
        zdoubledown.GetProperties().SetDouble("Value", lower);
        return 1;
    }
    public void refreshenum()
    {
        Part workPart = theSession.Parts.Work;
       ModelingViewCollection a = workPart.ModelingViews;

        aaa = a.ToArray();
        strvalue = new string[aaa.Length + 1];
      
        int i;
        for (i = 0; i < aaa.Length; i++)
        {
            //enum0.GetProperties().SetEnum("Value", i);
            strvalue[i] = aaa[i].Name;

        }
        strvalue[i] = "添加新视图";
        menum0.GetProperties().SetEnumMembers("Value", strvalue);

    }
    public NXOpen.Annotations.Annotation node2dim(Node node)
    { 
        NXOpen.Annotations.Annotation thedim = null;
        thedim = (NXOpen.Annotations.Annotation)node.GetNodeData().GetTaggedObject("Data");
        return thedim;
    
    
    }
    public static int[] BubbleSort(int[] Array)
        { 
         
        for (int i = 0; i < Array.Length; i++)
        {
            for (int j = i+1; j < Array.Length; j++)
            {
                if (Array[i] > Array[j])
                {
                    int temp=Array[i];
                    Array[i]=Array[j];
                    Array[j] = temp;
                }
            }
        }
        return Array;
    }
        
    
    public static NXOpen.Annotations.BalloonNote AddBalloonNote(NXOpen.Annotations.Annotation anno, string num,string label)
    {
        try
        {
            //计算宽高比
            double DimensionSize = ((NXOpen.Annotations.Annotation)(anno)).GetLetteringPreferences().GetDimensionText().Size;
            double AspectRatio = 1;
            switch (num.Length)
            {
                case 0:
                    AspectRatio = 1;
                    break;
                case 1:
                    AspectRatio = 0.7;
                    break;
                case 2:
                    AspectRatio = 0.6;
                    break;
                case 3:
                    AspectRatio = 0.4;
                    break;
                default:
                    AspectRatio = 1.2 / num.Length;
                    break;
            }
            Session theSession = Session.GetSession();
            Part workPart = theSession.Parts.Work;
            Part displayPart = theSession.Parts.Display;
            NXOpen.Annotations.BalloonNote nullAnnotations_BalloonNote = null;
            NXOpen.Annotations.BalloonNoteBuilder balloonNoteBuilder1;
            balloonNoteBuilder1 = workPart.PmiManager.PmiAttributes.CreateBalloonNoteBuilder(nullAnnotations_BalloonNote);
            balloonNoteBuilder1.Origin.SetInferRelativeToGeometry(true);
            balloonNoteBuilder1.Style.LetteringStyle.HorizontalTextJustification = NXOpen.Annotations.TextJustification.Right;
            balloonNoteBuilder1.Style.LetteringStyle.StackVerticalAlignment = NXOpen.Annotations.StackVerticalAlignment.Left;;
            balloonNoteBuilder1.Style.LetteringStyle.StackHorizontalAlignment = NXOpen.Annotations.StackHorizontalAlignment.Top;
            balloonNoteBuilder1.Origin.Anchor = NXOpen.Annotations.OriginBuilder.AlignmentPosition.TopRight;
            balloonNoteBuilder1.Title = "Balloon Note";
            balloonNoteBuilder1.Category = "User Defined";
            balloonNoteBuilder1.Identifier = "User Defined";
            balloonNoteBuilder1.Revision = "-";
            try
            {
                          NXOpen.Annotations.Fcf fcff =   (NXOpen.Annotations.Fcf)anno;
                          balloonNoteBuilder1.BalloonText = "J" + num;
            }
            catch
            {
                balloonNoteBuilder1.BalloonText = num;
            }
        
            balloonNoteBuilder1.Origin.Plane.PlaneMethod = NXOpen.Annotations.PlaneBuilder.PlaneMethodType.ModelView;
            balloonNoteBuilder1.Style.LetteringStyle.GeneralTextFont = workPart.Fonts.AddFont("cadds4");
            balloonNoteBuilder1.Style.LetteringStyle.GeneralTextAspectRatio = AspectRatio;
            balloonNoteBuilder1.Style.LetteringStyle.GeneralTextSize = DimensionSize;
            balloonNoteBuilder1.Scale = 0.6;
      
            NXObject nXObject1;
            nXObject1 = balloonNoteBuilder1.Commit();
            nXObject1.SetAttribute("GUID", label);
           ((NXOpen.Annotations.BalloonNote)nXObject1).InsertIntoStack(anno, NXOpen.Annotations.StackAlignmentPosition.Right);
            balloonNoteBuilder1.Destroy();
          
          
          
            return (NXOpen.Annotations.BalloonNote)nXObject1;
        }
        catch (System.Exception ex)
        {
            UI.GetUI().NXMessageBox.Show("Message", NXMessageBox.DialogType.Error, ex.Message);
            return null;
        }
    }

    public static int GetNumberInt(string str)
    {
        int result = 0;
        if (str != null && str != string.Empty)
        {
            // 正则表达式剔除非数字字符（不包含小数点.） 
            str = Regex.Replace(str, @"[^\d.\d]", "");
            // 如果是数字，则转换为decimal类型 
            if (Regex.IsMatch(str, @"^[+-]?\d*[.]?\d*$"))
            {
                result = int.Parse(str);
            }
        }
        return result;
    }
    public static bool isNX64//是不是64位的NX
    {
        get
        {
            if (System.IntPtr.Size == 8)
                return true;
            else
                return false;
        }
    }
    /// <summary>
    /// 利用的win32的动态调用dll功能，来调用NX的dll执行宏命令，
    /// </summary>
    /// <param name="path">宏文件的绝对路径,貌似不能含.marco奇怪了</param>
    public static void PlayMacro(string path)
    {
        try
        {
            DLD myfun = new DLD();
            //得到libugui.dll的路径
            string libugui = NXPath + "UGII\\libugui.dll";
            myfun.LoadDll(libugui);
            if (isNX64)//这里64位和32位的是不一样滴！
            {
                myfun.LoadFun("?MACRO_playback_from_usertool@@YAXPEBD@Z");
            }
            else
            {
                myfun.LoadFun("?MACRO_playback_from_usertool@@YAXPBD@Z");
            }
            object[] Parameters = new object[] { (string)path, (IntPtr)(IntPtr.Zero), (int)1 }; // 实参为 0
            Type[] ParameterTypes = new Type[] { typeof(string), typeof(IntPtr), typeof(int) }; // 实参类型为 int
            DLD.ModePass[] themode = new DLD.ModePass[] { DLD.ModePass.ByValue, DLD.ModePass.ByValue, DLD.ModePass.ByValue }; // 传送方式为值传
            Type Type_Return = typeof(int); // 返回类型为 int
            myfun.Invoke(Parameters, ParameterTypes, themode, Type_Return);
            myfun.UnLoadDll();
        }
        catch (System.Exception ex)
        {
            UI.GetUI().NXMessageBox.Show("Message", NXMessageBox.DialogType.Error, ex.Message);
        }
    }
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == zselection0)
            {
                Session theSession = Session.GetSession();
                Part workPart = theSession.Parts.Work;
                Part displayPart = theSession.Parts.Display;
                TaggedObject[] obs = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
              NXOpen.Annotations.Dimension dim = (NXOpen.Annotations.Dimension)obs[0];
              NXOpen.Builder tempbuilder = workPart.Annotations.CreateAssociateDimensionBuilder(dim);
           //   int m = dim.NumberOfAssociativities;

              
           // NXOpen.Annotations.Associativity asa = dim.GetAssociativity(1);
           // NXOpen.Annotations.Associativity asaa = dim.GetAssociativity(2);
           // NXObject aa = asa.FirstObject;
           //aa.f
           // aa = asaa.FirstObject;
              
            FindTol();
            //---------Enter your code here-----------
            }
           else if(block == china)
           {
             int m = china.GetProperties().GetInteger("Value");
             labelnode(dimnode);
           }
            else if (block == jiaoyanshitol)
            {
                if(jiaoyanshitol.GetProperties().GetLogical("Value"))
                {
                    jiaoyanshibut.GetProperties().SetLogical("Show",true);
                    jiaoyanshisel.GetProperties().SetLogical("Show", true);
                }
                else
                {
                    jiaoyanshibut.GetProperties().SetLogical("Show", false);
                    jiaoyanshisel.GetProperties().SetLogical("Show", false);
                
                }
            
            }
                else if(block == button0115fea)//调用录制的红文件
            {

                string fetstr = TDPPMPath + "Fet_control";
                PlayMacro(fetstr);
                //this.Show();

                }
            else if (block == button0115rou)//调用录制的红文件
            {
            
            }
            else
                if(block ==  jiaoyanshibut)
                {
                    TaggedObject[] tt = null;
                    tt = jiaoyanshisel.GetProperties().GetTaggedObjectVector("SelectedObjects");
                      if(tt.Length == 0 && jiaoyanshitol.GetProperties().GetLogical("Value"))
                {
                    theUI.NXMessageBox.Show("提示", NXMessageBox.DialogType.Warning, "请选择要删除的PMI");
                    return 1;

                }
                      for (int m = 0; m < tt.Length; m++ )
                      {
                          NXObject qq = (NXObject)tt[m];

                          if (FindballonByAttr("GUID", qq.GetStringAttribute("GUID")) == null)
                          {
                             
                             
                              DeleteObject(qq);
                          }
                          else if (FindballonByAttr("GUID", qq.GetStringAttribute("GUID")) != null)
                          {
                              DeleteObject(FindballonByAttr("GUID", qq.GetStringAttribute("GUID")));
                              DeleteObject(qq);
                          }


                      }





                
                }
            
            else if(block == japan)
            {
                int m = japan.GetProperties().GetInteger("Value");
                labelnode(fcfnode);
            }
                 
            else if(block == there )
            {
            if(there.GetProperties().GetLogical("Value"))
            {
            here.GetProperties().SetLogical("Enable",true);
            }
            else 
            {
                here.GetProperties().SetLogical("Enable", false);
            }
            obutton0.GetProperties().SetString("Label", "查询尺寸标注");
                if(dimnode != null)
                {
            if (dimnode.FirstChildNode != null)
              {
                 foreach(Node nd in getcdnd(dimnode))
                 {
                     tree_control0.DeleteNode(nd);//undone
                 
                 }
                 tree_control0.DeleteNode(dimnode);
                 dimnode = null;
              }
                }
                if(fcfnode != null)
                {
                if(fcfnode.FirstChildNode != null )
                {
                 foreach (Node nd in getcdnd(fcfnode))
                 {
                     tree_control0.DeleteNode(nd);

                 }
                 tree_control0.DeleteNode(fcfnode);
                 fcfnode = null;
                }
          
                }
                if (obutton0.GetProperties().GetString("Label") == "查询尺寸标注")
                {
                china.GetProperties().SetLogical("Enable", false);
                japan.GetProperties().SetLogical("Enable", false);
                }
            }
                 
            else if(block == ztoggle01)
            {
                if (ztoggle01.GetProperties().GetLogical("Value"))
                {
                    zpoint01.GetProperties().SetLogical("Show", true);
                    zpoint02.GetProperties().SetLogical("Show", true);
                   zbutton0.GetProperties().SetLogical("Show", true);

                }
                else if (!ztoggle01.GetProperties().GetLogical("Value"))
                {
                    zpoint01.GetProperties().SetLogical("Show", false);
                    zpoint02.GetProperties().SetLogical("Show", false);
                    zbutton0.GetProperties().SetLogical("Show", false);
                }
            //---------Enter your code here-----------
            }
            else if (block == zbutton1)
            {
                TaggedObject[] obs = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                if (obs.Length == 0)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择尺寸");
                    return 1;
                }
                double upper = zdoubleup.GetProperties().GetDouble("Value");
                double lower = zdoubledown.GetProperties().GetDouble("Value");
                NXOpen.Annotations.Dimension d = (NXOpen.Annotations.Dimension)obs[0];
                SetDimensionTolerance(d, upper, lower);
            //---------Enter your code here-----------
            }
                else if(block == enum1314)
                {
                        Part workPart = theSession.Parts.Work;

                    string option = enum1314.GetProperties().GetEnumAsString("Value");
                    if (option == "本模型内")
                    {
                        here.GetProperties().SetLogical("Show", false);
                        //here.GetProperties().SetLogical("Enable", true);

                    }
                    else if (option == "指定PMI")
                    {
                        here.GetProperties().SetLogical("Show", true);
                        here.GetProperties().SetLogical("Enable", true);
                    }
                    else if (option == "工作视图")
                    {
                        here.GetProperties().SetLogical("Show", false);
                    }
                }
                else if(block == toggle1314)
                {
                if(toggle1314.GetProperties().GetLogical("Value"))
                {

                    obutton0.GetProperties().SetString("Label", "查询尺寸标注");
                    if (dimnode != null)
                    {
                        if (dimnode.FirstChildNode != null)
                        {
                            foreach (Node nd in getcdnd(dimnode))
                            {
                                tree_control0.DeleteNode(nd);//undone

                            }
                            tree_control0.DeleteNode(dimnode);
                            dimnode = null;
                        }
                    }
                    if (fcfnode != null)
                    {
                        if (fcfnode.FirstChildNode != null)
                        {
                            foreach (Node nd in getcdnd(fcfnode))
                            {
                                tree_control0.DeleteNode(nd);

                            }
                            tree_control0.DeleteNode(fcfnode);
                            fcfnode = null;
                        }

                    }
                }
                enum1314.GetProperties().SetLogical("Enable", true);
                if (obutton0.GetProperties().GetString("Label") == "查询尺寸标注")
                {
                    china.GetProperties().SetLogical("Enable", false);
                    japan.GetProperties().SetLogical("Enable", false);
                }
                toggle1314.GetProperties().SetLogical("Show", false);
                }
                   
            else if (block == obutton0)//tag now
            {
                pubfun thepub = new pubfun();
                Part workPart = theSession.Parts.Work;


                NXOpen.Annotations.Dimension[] alldim = null;
                NXOpen.Annotations.Fcf[] allfcf = null;
                NXOpen.Annotations.Dimension[] alldimori = null;
                NXOpen.Annotations.Fcf[] allfcfori = null;
                ArrayList alldimary = new ArrayList();
                ArrayList allfcfary = new ArrayList();
                alldimary.Clear();
                allfcfary.Clear();
                if (obutton0.GetProperties().GetString("Label") == "查询尺寸标注")
                {
                    /////////////////////////////////////////////////////////////////////////
                   string option = enum1314.GetProperties().GetEnumAsString("Value");
                    if(option == "本模型内")
                    {
                        alldimori = workPart.Dimensions.ToArray();
                        allfcfori = workPart.Annotations.Fcfs.ToArray();
                        foreach (NXOpen.Annotations.Dimension dim in alldimori)
                        {
                            NXOpen.Annotations.PmiManager pm = Session.GetSession().Parts.Work.PmiManager;
                            if (!pm.IsInheritedPmi(dim))
                            {
                                alldimary.Add(dim);
                            }

                        }

                        foreach (NXOpen.Annotations.Fcf fcf in allfcfori)
                        {
                            NXOpen.Annotations.PmiManager pm = Session.GetSession().Parts.Work.PmiManager;
                            if (!pm.IsInheritedPmi(fcf))
                            {
                                allfcfary.Add(fcf);
                            }

                        }
                    
                    }
                    else if( option == "指定PMI")
                    {
                        TaggedObject[] obs = here.GetProperties().GetTaggedObjectVector("SelectedObjects");
                        if (obs.Length == 0)
                        {
                            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择需要打标号的尺寸或形位公差");
                            return 1;
                        }
                        else
                        {
                            foreach (TaggedObject ob in obs)
                            {
                                try
                                {
                                    alldimary.Add((NXOpen.Annotations.Dimension)ob);
                                }
                                catch
                                {
                                    allfcfary.Add((NXOpen.Annotations.Fcf)ob);
                                }

                            }
                        }
                    }
                    else if(option == "工作视图")
                    {
                        View workview = workPart.ModelingViews.WorkView;
                        alldimori = workPart.Dimensions.ToArray();
                        allfcfori = workPart.Annotations.Fcfs.ToArray();
                        View[] view1 = null;
                        View[] view2 = null;
                        foreach (NXOpen.Annotations.Dimension dim in alldimori)
                        {
                            NXOpen.Annotations.PmiManager pm = Session.GetSession().Parts.Work.PmiManager;
                            if (!pm.IsInheritedPmi(dim))
                            {
                                view1 = dim.GetViews();
                                foreach(View view in view1)
                                {
                                if(view == workview)
                                {
                                    alldimary.Add(dim);
                                
                                }
                                
                                }
                               
                            }

                        }

                        foreach (NXOpen.Annotations.Fcf fcf in allfcfori)
                        {
                            NXOpen.Annotations.PmiManager pm = Session.GetSession().Parts.Work.PmiManager;
                            if (!pm.IsInheritedPmi(fcf))
                            {

                                view2 = fcf.GetViews();
                                foreach (View view in view2)
                                {
                                    if (view == workview)
                                    {
                                        allfcfary.Add(fcf);

                                    }

                                }
                              
                            }

                        }
                    /////////////////////////////////////////////////////////////////////////





                   ///////////////////////////////////////////////////////////////////////
                    }






                    /////////////////////////////////////////////////////////////////////////////
                  
                    ///------这些是以前只有在模型内，和用选择器选择具体的尺寸的时候的代码
                    //if (here.GetProperties().GetLogical("Enable"))
                    //{
                        //TaggedObject[] obs = here.GetProperties().GetTaggedObjectVector("SelectedObjects");
                        //if (obs.Length == 0)
                        //{
                        //    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择需要打标号的尺寸或形位公差");
                        //    return 1;
                        //}
                        //else
                        //{
                        //    foreach (TaggedObject ob in obs)
                        //    {
                        //        try
                        //        {
                        //            alldimary.Add((NXOpen.Annotations.Dimension)ob);
                        //        }
                        //        catch
                        //        {
                        //            allfcfary.Add((NXOpen.Annotations.Fcf)ob);
                        //        }

                        //    }
                        //}
                    //}
                    //else
                    //{

                     
                    //    alldimori = workPart.Dimensions.ToArray();
                    //    allfcfori = workPart.Annotations.Fcfs.ToArray();
                    //    foreach (NXOpen.Annotations.Dimension dim in alldimori)
                    //    {
                    //        NXOpen.Annotations.PmiManager pm = Session.GetSession().Parts.Work.PmiManager;
                    //        if (!pm.IsInheritedPmi(dim))
                    //        {
                    //            alldimary.Add(dim);
                    //        }

                    //    }
                       
                    //    foreach (NXOpen.Annotations.Fcf fcf in allfcfori)
                    //    {
                    //        NXOpen.Annotations.PmiManager pm = Session.GetSession().Parts.Work.PmiManager;
                    //        if (!pm.IsInheritedPmi(fcf))
                    //        {
                    //            allfcfary.Add(fcf);
                    //        }

                    //    }
                     
                    //}
                    alldim = (NXOpen.Annotations.Dimension[])alldimary.ToArray(typeof(NXOpen.Annotations.Dimension));
                    allfcf = (NXOpen.Annotations.Fcf[])allfcfary.ToArray(typeof(NXOpen.Annotations.Fcf));
                    if (alldimary.Count == 0 && allfcfary.Count == 0)
                    {
                        theUI.NXMessageBox.Show("无PMI", NXMessageBox.DialogType.Warning, "未查询到PMI,无法打标号");
                        return 1;
                    }






                    if (alldimary.Count != 0)
                    {

                        ArrayList stateone = new ArrayList();
                        ArrayList unstateone = new ArrayList();
                        dimnode = tree_control0.CreateNode("尺寸公差");
                        tree_control0.InsertNode(dimnode, null, null, Tree.NodeInsertOption.AlwaysLast);
                        double[] final = { 0, 0, 0 };
                        for (int i = 0; i < alldim.Length; i++)
                        {

                            try 
                            {
                                 alldim[i].GetStringAttribute("GUID");
                                if (FindballonByAttr("GUID", alldim[i].GetStringAttribute("GUID")) != null)
                                {
                                    stateone.Add(alldim[i]);
                                }
                                else if (FindballonByAttr("GUID", alldim[i].GetStringAttribute("GUID")) == null)
                                {
                                    unstateone.Add(alldim[i]);
                                }

                            }
                            catch
                            {
                                dimguid = Guid.NewGuid().ToString();
                                unstateone.Add(alldim[i]);
                                alldim[i].SetAttribute("GUID", dimguid);
                            }
                         
                        }
                        if(stateone.Count != 0)
                        {
                            NXOpen.Annotations.BalloonNoteBuilder balloonNoteBuilder1;
                           
                            MultiMap<int, NXOpen.Annotations.BalloonNote> ballonmap = new MultiMap<int, NXOpen.Annotations.BalloonNote>();
                            ballonmap.Clear();
                            foreach (NXOpen.Annotations.Annotation b in stateone)
                            {
                                NXOpen.Annotations.BalloonNote bal = FindballonByAttr("GUID", b.GetStringAttribute("GUID"));
                                balloonNoteBuilder1 = workPart.PmiManager.PmiAttributes.CreateBalloonNoteBuilder(bal);
                              
                             
                                int a = Convert.ToInt16(balloonNoteBuilder1.BalloonText);
                                balloonNoteBuilder1.Commit();
                                balloonNoteBuilder1.Destroy();
                                ballonmap.Add(a, bal);

                            }
                            List<NXOpen.Annotations.BalloonNote> ballonlist = new List<NXOpen.Annotations.BalloonNote>();
                            List<NXOpen.Annotations.Annotation> anolist = new List<NXOpen.Annotations.Annotation>();

                            foreach (int k in ballonmap.Keys)
                            {
                                foreach (NXOpen.Annotations.BalloonNote bb in ballonmap[k])
                                {
                                    NXOpen.Annotations.Dimension aaaaa = (NXOpen.Annotations.Dimension)getanobybal(bb);
                                    ballonlist.Add(bb);
                                    anolist.Add(getanobybal(bb));
                                    balloonNoteBuilder1 = workPart.PmiManager.PmiAttributes.CreateBalloonNoteBuilder(bb);
                                    cddimnode = tree_control0.CreateNode(balloonNoteBuilder1.BalloonText);
                                    balloonNoteBuilder1.Commit();
                                    balloonNoteBuilder1.Destroy();

                                    DataContainer dimdata = cddimnode.GetNodeData();
                                    dimdata.AddTaggedObject("Data", getanobybal(bb));
                                    dimdata.Dispose();
                                    tree_control0.InsertNode(cddimnode, dimnode, null, Tree.NodeInsertOption.Last);
                                    try
                                    {
                                        final = thepub.getspec((NXOpen.Annotations.Dimension)getanobybal(bb));


                                    }
                                    catch
                                    {
                                        final[0] = 0;
                                        final[1] = 0;
                                        final[2] = 0;

                                    }
                                    //string pname = aaaaa.GetType().Name;
                                    cddimnode.SetColumnDisplayText(2, final[0].ToString());
                                    cddimnode.SetColumnDisplayText(3, final[1].ToString());
                                    cddimnode.SetColumnDisplayText(4, final[2].ToString());
                                    cddimnode.SetState(2);//set the checked one 
                                }

                            }

                            int m = Convert.ToInt16(cddimnode.GetColumnDisplayText(1));
                            foreach (NXOpen.Annotations.Dimension dim in unstateone)
                            {
                                m = m + 1;
                                cddimnode = tree_control0.CreateNode(m.ToString());

                                DataContainer dimdata = cddimnode.GetNodeData();
                                dimdata.AddTaggedObject("Data", dim);
                                dimdata.Dispose();
                                tree_control0.InsertNode(cddimnode, dimnode, null, Tree.NodeInsertOption.Last);
                                //string pname = dim.GetType().Name;
                                try
                                {
                                    final = thepub.getspec(dim);

                                }
                                catch
                                {

                                    final[0] = 0;
                                    final[1] = 0;
                                    final[2] = 0;

                                }
                                cddimnode.SetColumnDisplayText(2, final[0].ToString());
                                cddimnode.SetColumnDisplayText(3, final[1].ToString());
                                cddimnode.SetColumnDisplayText(4, final[2].ToString());
                                cddimnode.SetState(1);//set the checked one 

                            }
                        }
                        else if (stateone.Count == 0)
                        {
                            ArrayList nodes = new ArrayList();
                            Node nd = null;
                          NXOpen.Annotations.Dimension[]  left = (NXOpen.Annotations.Dimension[])unstateone.ToArray((typeof(NXOpen.Annotations.Dimension)));//把动态数组转化成数组
                          for (int i = 0; i < left.Length; i ++ )
                          {//tag-hereA4
                              
                              cddimnode = tree_control0.CreateNode((i+1).ToString());

                              DataContainer dimdata = cddimnode.GetNodeData();
                              dimdata.AddTaggedObject("Data", left[i]);
                              dimdata.Dispose();
                              tree_control0.InsertNode(cddimnode, dimnode, null, Tree.NodeInsertOption.Last);
                             try
                              {
                                  final = thepub.getspec(left[i]);
                              }
                             catch
                              {
                                  final[0] = 0;
                                  final[1] = 0;
                                  final[2] = 0;

                              }
                              //string pname = left[i].GetType().Name;
                             cddimnode.SetColumnDisplayText(2, final[0].ToString());
                              cddimnode.SetColumnDisplayText(3, final[1].ToString());
                              cddimnode.SetColumnDisplayText(4, final[2].ToString());
                              cddimnode.SetState(1);//set the checked one 
                              nodes.Add(cddimnode);
                              nd = cddimnode;
                          }
                        
                        }


                    }
                    if (allfcfary.Count != 0)
                    {
                        ArrayList fstateone = new ArrayList();
                        ArrayList funstateone = new ArrayList();
                        fcfnode = tree_control0.CreateNode("形位公差");
                        tree_control0.InsertNode(fcfnode, null, null, Tree.NodeInsertOption.AlwaysLast);
                        for (int m = 0; m < allfcf.Length; m++)
                        {
                            try
                            {
                               fcfguid = allfcf[m].GetStringAttribute("GUID");
                               if (FindballonByAttr("GUID",allfcf[m].GetStringAttribute("GUID")) != null)
                               {
                                   //stateone.Add(FindballonByAttr("GUID", alldim[i].GetStringAttribute("GUID")));
                                   fstateone.Add(allfcf[m]);
                               }
                               else if (FindballonByAttr("GUID", allfcf[m].GetStringAttribute("GUID")) == null )
                               {
                                   funstateone.Add(allfcf[m]);
                               }
                                  
                                
                            }
                            catch
                            {
                                fcfguid = Guid.NewGuid().ToString();
                                funstateone.Add(allfcf[m]);
                                allfcf[m].SetAttribute("GUID", fcfguid);
                            }
                        }
                            if (fstateone.Count != 0)
                            {
                                NXOpen.Annotations.BalloonNoteBuilder balloonNoteBuilder1;
                                MultiMap<int, NXOpen.Annotations.BalloonNote> fballonmap = new MultiMap<int, NXOpen.Annotations.BalloonNote>();
                                fballonmap.Clear();
                                foreach (NXOpen.Annotations.Annotation b in fstateone)
                                {
                                    NXOpen.Annotations.BalloonNote bal = FindballonByAttr("GUID", b.GetStringAttribute("GUID"));
                                    balloonNoteBuilder1 = workPart.PmiManager.PmiAttributes.CreateBalloonNoteBuilder(bal);
                                    //balloonNoteBuilder1.BalloonText//hereagain
                                   int a = GetNumberInt(balloonNoteBuilder1.BalloonText);
                                    //int a = Convert.ToInt16(balloonNoteBuilder1.BalloonText);
                                    balloonNoteBuilder1.Commit();
                                    balloonNoteBuilder1.Destroy();
                                    fballonmap.Add(a, bal);

                                }
                                List<NXOpen.Annotations.BalloonNote> fballonlist = new List<NXOpen.Annotations.BalloonNote>();
                                List<NXOpen.Annotations.Annotation> fanolist = new List<NXOpen.Annotations.Annotation>();

                                foreach (int k in fballonmap.Keys)
                                {
                                    foreach (NXOpen.Annotations.BalloonNote bb in fballonmap[k])
                                    {
                                        fballonlist.Add(bb);
                                        fanolist.Add(getanobybal(bb));
                                        balloonNoteBuilder1 = workPart.PmiManager.PmiAttributes.CreateBalloonNoteBuilder(bb);
                                       
                                        cdfcfnode = tree_control0.CreateNode(GetNumberInt(balloonNoteBuilder1.BalloonText).ToString());
                                        balloonNoteBuilder1.Commit();
                                        balloonNoteBuilder1.Destroy();
                                        
                                        DataContainer dimdata = cdfcfnode.GetNodeData();
                                        dimdata.AddTaggedObject("Data", getanobybal(bb));
                                        dimdata.Dispose();
                                        tree_control0.InsertNode(cdfcfnode, fcfnode, null, Tree.NodeInsertOption.Last);
                                        NXOpen.Annotations.PmiFeatureControlFrameBuilder pmiFeatureControlFrameBuilder1;
                                        pmiFeatureControlFrameBuilder1 = workPart.Annotations.CreatePmiFeatureControlFrameBuilder( (NXOpen.Annotations.Fcf)getanobybal(bb));
                                        TaggedObject taggedObject1;
                                        taggedObject1 = pmiFeatureControlFrameBuilder1.FeatureControlFrameDataList.FindItem(0);

                                        NXOpen.Annotations.FeatureControlFrameDataBuilder featureControlFrameDataBuilder1 = (NXOpen.Annotations.FeatureControlFrameDataBuilder)taggedObject1;
                                        string vl = featureControlFrameDataBuilder1.ToleranceValue;
                                        cdfcfnode.SetColumnDisplayText(2, vl);
                                        pmiFeatureControlFrameBuilder1.Commit();
                                        pmiFeatureControlFrameBuilder1.Destroy();
                                        cdfcfnode.SetState(2);//set the checked one 

                                    }

                                }
                                string qqq = cdfcfnode.GetColumnDisplayText(1);

                                int q = Convert.ToInt16(GetNumberInt(qqq).ToString());
                                foreach (NXOpen.Annotations.Fcf dim in funstateone)
                                {
                                    q = q + 1;
                                    cdfcfnode = tree_control0.CreateNode(q.ToString());

                                    DataContainer dimdata = cdfcfnode.GetNodeData();
                                    dimdata.AddTaggedObject("Data", dim);
                                    dimdata.Dispose();
                                    tree_control0.InsertNode(cdfcfnode, fcfnode, null, Tree.NodeInsertOption.Last);

                                    cdfcfnode.SetState(1);//set the checked one 

                                }
                            }
                            else if (fstateone.Count == 0)
                            {
                                NXOpen.Annotations.Fcf[] left = (NXOpen.Annotations.Fcf[])funstateone.ToArray((typeof(NXOpen.Annotations.Fcf)));//把动态数组转化成数组
                                for (int i = 0; i < left.Length; i++)
                                {

                                    cdfcfnode = tree_control0.CreateNode((i + 1).ToString());

                                    DataContainer dimdata = cdfcfnode.GetNodeData();
                                    dimdata.AddTaggedObject("Data", left[i]);
                                    dimdata.Dispose();
                                    tree_control0.InsertNode(cdfcfnode, fcfnode, null, Tree.NodeInsertOption.Last);
                                    NXOpen.Annotations.PmiFeatureControlFrameBuilder pmiFeatureControlFrameBuilder1;
                                    pmiFeatureControlFrameBuilder1 = workPart.Annotations.CreatePmiFeatureControlFrameBuilder((NXOpen.Annotations.Fcf)left[i]);
                                    TaggedObject taggedObject1;
                                    taggedObject1 = pmiFeatureControlFrameBuilder1.FeatureControlFrameDataList.FindItem(0);

                                    NXOpen.Annotations.FeatureControlFrameDataBuilder featureControlFrameDataBuilder1 = (NXOpen.Annotations.FeatureControlFrameDataBuilder)taggedObject1;
                                    string vl = featureControlFrameDataBuilder1.ToleranceValue;
                                    cdfcfnode.SetColumnDisplayText(2, vl);
                                    pmiFeatureControlFrameBuilder1.Commit();
                                    pmiFeatureControlFrameBuilder1.Destroy();
                                    cdfcfnode.SetState(1);//set the checked one 

                                }
                        
                            }
                            //cdfcfnode = tree_control0.CreateNode((m + 1).ToString());
                            //DataContainer fcfdata = cdfcfnode.GetNodeData();
                            //fcfdata.AddTaggedObject("Data", allfcf[m]);
                            //fcfdata.Dispose();
                            //tree_control0.InsertNode(cdfcfnode, fcfnode, null, Tree.NodeInsertOption.Last);
                            //cdfcfnode.SetState(2);
                        }

                    enum1314.GetProperties().SetLogical("Enable",false);
                    obutton0.GetProperties().SetString("Label", "打标号");
                    if (obutton0.GetProperties().GetString("Label") == "打标号")
                    {
                        china.GetProperties().SetLogical("Enable", true);
                        japan.GetProperties().SetLogical("Enable", true);
                    
                    }
                    toggle1314.GetProperties().SetLogical("Show",true);
                    toggle1314.GetProperties().SetLogical("Value", false);
                }

                else if (obutton0.GetProperties().GetString("Label") == "打标号")
                {
                    ArrayList dellist = new ArrayList();
                    
                    if (fcfnode != null)
                    {
                        if (fcfnode.FirstChildNode != null)
                        {
                            Node[] fcfnodeary = (Node[])ndwithstate(getcdnd(fcfnode)).ToArray(typeof(Node));
                            Node[] unfcfnodeary = (Node[])ndwithunstate(getcdnd(fcfnode)).ToArray(typeof(Node));
                            for (int q = 0; q < unfcfnodeary.Length; q++)
                            {
                                if (FindballonByAttr("GUID", node2dim(unfcfnodeary[q]).GetStringAttribute("GUID")) != null)
                                {
                                    //delnxobj(FindballonByAttr("GUID", node2dim(unfcfnodeary[q]).GetStringAttribute("GUID")));
                                    DeleteBalloonNoteByAttr("GUID", node2dim(unfcfnodeary[q]).GetStringAttribute("GUID"));
                                    dellist.Add(FindballonByAttr("GUID", node2dim(unfcfnodeary[q]).GetStringAttribute("GUID")));
                                   
                                }
                                //node2dim(unfcfnodeary[q]).DeleteAttributeByTypeAndTitle(NXObject.AttributeType.String, "GUID");
                            }
                            NXOpen.Annotations.BalloonNote thebal;
                            for (int m = 0; m < fcfnodeary.Length; m++)
                            {
                                if (FindballonByAttr("GUID", node2dim(fcfnodeary[m]).GetStringAttribute("GUID")) == null)
                                {

                                    thebal = AddBalloonNote(node2dim(fcfnodeary[m]), fcfnodeary[m].GetColumnDisplayText(1), node2dim(fcfnodeary[m]).GetStringAttribute("GUID"));
                                   thebal.SetViews(node2dim(fcfnodeary[m]).GetViews());
                                   NXOpen.View[] a = node2dim(fcfnodeary[m]).GetViews();
                                }

                                else
                                {
                                    EditBalloonNote(FindballonByAttr("GUID", node2dim(fcfnodeary[m]).GetStringAttribute("GUID")), node2dim(fcfnodeary[m]), fcfnodeary[m].GetColumnDisplayText(1));
                                    FindballonByAttr("GUID", node2dim(fcfnodeary[m]).GetStringAttribute("GUID")).SetViews(node2dim(fcfnodeary[m]).GetViews());
                                }
                            }
                        }
                    }
                    if (dimnode != null)
                    {
                        if (dimnode.FirstChildNode != null)
                        {
                            Node[] undimnodeary = (Node[])ndwithunstate(getcdnd(dimnode)).ToArray(typeof(Node));
                            for (int p = 0; p < undimnodeary.Length; p++)
                            {
                                NXOpen.Annotations.BalloonNote aaaa = FindballonByAttr("GUID", node2dim(undimnodeary[p]).GetStringAttribute("GUID"));
                                if (aaaa != null)
                                {
                                    DeleteBalloonNoteByAttr("GUID", node2dim(undimnodeary[p]).GetStringAttribute("GUID"));
                                    dellist.Add(aaaa);

                               
                                    //delnxobj(aaaa);
                                }
                                //node2dim(undimnodeary[p]).DeleteAttributeByTypeAndTitle(NXObject.AttributeType.String, "GUID");
                            }
                            Node[] dimnodeary = (Node[])ndwithstate(getcdnd(dimnode)).ToArray(typeof(Node));
                            NXOpen.Annotations.BalloonNote thebbal;
                            for (int i = 0; i < dimnodeary.Length; i++)
                            {
                                if (FindballonByAttr("GUID", node2dim(dimnodeary[i]).GetStringAttribute("GUID")) == null)
                                {
                                  thebbal =  AddBalloonNote(node2dim(dimnodeary[i]), dimnodeary[i].GetColumnDisplayText(1), node2dim(dimnodeary[i]).GetStringAttribute("GUID"));
                                  thebbal.SetViews(node2dim(dimnodeary[i]).GetViews());
                                  //NXOpen.View[] vw = node2dim(dimnodeary[i]).GetViews();
                                }
                                else
                                {
                                    //EditBalloonNote(FindballonByAttr("GUID", (node2dim(dimnodeary[i]).GetStringAttribute("GUID")),node2dim(dimnodeary[i],(i + 1).ToString())
                                    EditBalloonNote(FindballonByAttr("GUID", node2dim(dimnodeary[i]).GetStringAttribute("GUID")), node2dim(dimnodeary[i]), dimnodeary[i].GetColumnDisplayText(1));
                                    FindballonByAttr("GUID", node2dim(dimnodeary[i]).GetStringAttribute("GUID")).SetViews(node2dim(dimnodeary[i]).GetViews());

                                }
                            }
                        }
                    }
                    //NXObject[] obs2del = (NXObject[])dellist.ToArray(typeof(NXObject));
                    //foreach (NXOpen.Annotations.BalloonNote b in dellist)
                    //{

                    //    b.Highlight();
                    //    //DeleteObject(b);
                    //}
                    //DeleteObject(obs2del);
                }
            }
            else if (block == zbutton0)
            {
                firstpt = zpoint01.GetProperties().GetTaggedObjectVector("SelectedObjects");
                secpt = zpoint02.GetProperties().GetTaggedObjectVector("SelectedObjects");
                TaggedObject[] obs = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                if (obs.Length == 0)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择尺寸");
                    return 1;
                }
                if (firstpt.Length == 0)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择起始点");
                    return 1;
                }
                if (secpt.Length == 0)
                {

                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择终止点");
                    return 1;
                }
                Point a = Tag2NXObject<Point>(firstpt[0].Tag);
                Point b = Tag2NXObject<Point>(secpt[0].Tag);
                NXObject axisyo = shank(a, b);
                double[] real3d;
                NXOpen.Features.DatumAxisFeature axisreal = (NXOpen.Features.DatumAxisFeature)axisyo;
                DatumAxis axisreal1 = axisreal.DatumAxis;
                Point3d stpt;//轴的起点
                Point3d endpt;//轴的终点
                stpt = a.Coordinates;
                endpt = b.Coordinates;
                // axisreal1.GetEndPoints(out stpt, out endpt);
                //hideit(axisreal1);
                real3d = angle(axisreal1);
                thepmi = zselection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                if (thepmi.Length == 0)
                {
                    theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Warning, "请选择尺寸");
                    return 1;
                }
                NXObject last = Tag2NXObject<NXObject>(thepmi[0].Tag);
                NXOpen.Annotations.Dimension lastdimn = (NXOpen.Annotations.Dimension)last;
                double m = lastdimn.ComputedSize;
                double cosx = Math.Cos(ConvertDegreesToRadians(real3d[0]));
                double cosy = Math.Cos(ConvertDegreesToRadians(real3d[1]));
                double cosz = Math.Cos(ConvertDegreesToRadians(real3d[2]));
                double cosxx = cosx * m;
                double cosyy = cosy * m;
                double coszz = cosz * m;
                last.SetAttribute("X", cosxx);
                last.SetAttribute("Y", cosyy);
                last.SetAttribute("Z", coszz);
                last.SetAttribute("START-X", stpt.X);
                last.SetAttribute("START-Y", stpt.Y);
                last.SetAttribute("START-Z", stpt.Z);
                last.SetAttribute("END-X", endpt.X);
                last.SetAttribute("END-Y", endpt.Y);
                last.SetAttribute("END-Z", endpt.Z);
                //---------Enter your code here-----------
            }
            else if (block == zenum0)
            {
                FindTol();
                //---------Enter your code here-----------
            }
            else if (block == zdouble0)
            {
                double dim = zdouble0.GetProperties().GetDouble("Value");
                FindTol(dim);
                //---------Enter your code here-----------
            }
            else if (block == mstring0)
            {
                Part workPart = theSession.Parts.Work;
                viewname = mstring0.GetProperties().GetString("Value");
                workPart.Views.SaveAs(workPart.ModelingViews.WorkView, viewname, true, false);
                refreshenum();

                //---------Enter your code here-----------
            }
            else if (block == menum0)
            {
                Part workPart = theSession.Parts.Work;
                Layout layout1 = (Layout)workPart.Layouts.FindObject("L1");//此处写死了。。。。。TAG ERROR
                int sel = menum0.GetProperties().GetEnum("Value");
                string addnewstr = menum0.GetProperties().GetEnumAsString("Value");
                if (addnewstr != "添加新视图")
                {
                    layout1.ReplaceView(workPart.ModelingViews.WorkView, aaa[sel], true);
                  
                }
                else
                {
                    mstring0.GetProperties().SetLogical("Show", true);

                    //string newviewname = null;
                    ////add.Show_add();
                    //add theadd = new add();
                    //theadd.Show();
                    //newviewname = theaddnew.string0.GetProperties().GetString("Value");

                }
                //---------Enter your code here-----------
            }
            else if (block == jplcpt)
            {

                string roughness = null;
                string jmatoffstr = null;//材料移除
                roughness = rouname.GetProperties().GetString("Value");//粗糙度
                string jstandenum = jstand.GetProperties().GetEnumAsString("Value");
                object StandardType = null;
                //if (roughness == "")
                //{
                    //theUI.NXMessageBox.Show("请输入粗糙度", NXMessageBox.DialogType.Warning, "未输入粗糙度");
                    //return 1;
                //}
                string mgh = astring0.GetProperties().GetString("Value");
                //if (mgh == "")
                //{

                //    theUI.NXMessageBox.Show("请输入位置符号", NXMessageBox.DialogType.Warning, "未输入位置符号");
                //    return 1;

                //}
                switch (jstandenum)
                {
                    case "ANSI":
                        StandardType = NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Ansi;
                        break;
                    case "ISO 1992":
                        StandardType = NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Iso;
                        break;
                    case "JIS":
                        StandardType = NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Jis;
                        break;
                    case "DIN":
                        StandardType = NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Din;
                        break;
                    case "ISO 2002":
                        StandardType = NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Iso2002;
                        break;
                    case "DIN 2002":
                        StandardType = NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Din2002;
                        break;
                    case "GB":
                        StandardType = NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Gb;
                        break;
                    case "ESKD":
                        StandardType = NXOpen.Annotations.SurfaceFinishBuilder.StandardType.Eskd;
                        break;
                }
                string jmatoffenum = jmatoff.GetProperties().GetEnumAsString("Value");
                object FinishType = null;
                switch (jmatoffenum)
                {
                    case "打开":
                        FinishType = NXOpen.Annotations.SurfaceFinishBuilder.FinishType.Basic;
                        break;
                    case "打开，修饰符":
                        FinishType = NXOpen.Annotations.SurfaceFinishBuilder.FinishType.Modifier;
                        break;
                    case "需要移除材料":
                        FinishType = NXOpen.Annotations.SurfaceFinishBuilder.FinishType.MaterialRemovalRequired;
                        break;
                    case "修饰符，需要移除材料":
                        FinishType = NXOpen.Annotations.SurfaceFinishBuilder.FinishType.ModifierMaterialRemovalRequired;
                        break;
                    case "禁止移除材料":
                        FinishType = NXOpen.Annotations.SurfaceFinishBuilder.FinishType.MaterialRemovalProhibited;
                        break;
                    case "修饰符，禁止移除材料":
                        FinishType = NXOpen.Annotations.SurfaceFinishBuilder.FinishType.ModifierMaterialRemovalProhibited;
                        break;


                }
                TaggedObject[] fnfaceobj = g.GetProperties().GetTaggedObjectVector("SelectedObjects");//关联对象



                if (fnfaceobj.Length == 0)//tag undone
                {
                    theUI.NXMessageBox.Show("请选择关联对象", NXMessageBox.DialogType.Warning, "未选择关联对象");
                    return 1;
                }
                Face fnface = (Face)fnfaceobj[0];
                NXOpen.Point jcrosptobj = null;
                if (jtogglejy.GetProperties().GetLogical("Value"))
                {
                    TaggedObject[] jcrosptobjobj = null;
                    jcrosptobjobj = jcrospt.GetProperties().GetTaggedObjectVector("SelectedObjects");//折线位置
                    if (jcrosptobjobj.Length == 0)
                    {
                        theUI.NXMessageBox.Show("请选择折线位置", NXMessageBox.DialogType.Warning, "未选择折线位置");
                        return 1;
                    }
                    jcrosptobj = (Point)jcrosptobjobj[0];
                }

                // TaggedObject[] jintobjobj = jintobj.GetProperties().GetTaggedObjectVector("SelectedObjects");//关联对象
                //DisplayableObject obj=(DisplayableObject)jintobjobj[0];
                NXOpen.Point jplcptobj = (NXOpen.Point)jplcpt.GetProperties().GetTaggedObjectVector("SelectedObjects")[0];
                Point3d point = jplcptobj.Coordinates;

                thepubfunfcf.SurfaceFinishFunction(roughness, mgh, StandardType, FinishType, point, fnface, jcrosptobj,jplcptobj);


            }
            else if (block == jtogglejy)
            {
                if (jtogglejy.GetProperties().GetLogical("Value"))
                {
                    jcrospt.GetProperties().SetLogical("Enable", true);

                }
                else if (!jtogglejy.GetProperties().GetLogical("Value"))
                {

                    jcrospt.GetProperties().SetLogical("Enable", false);
                }
                //---------Enter your code here-----------
            }
            else if (block == zenum01)
            {
                string table = zenum01.GetProperties().GetEnumAsString("Value");
                if (table == "表1")
                {
                    zlabel0.GetProperties().SetLogical("Show", true);
                    zlabel01.GetProperties().SetLogical("Show", false);
                }
                else if (table == "表4")
                {
                    zlabel0.GetProperties().SetLogical("Show", false);
                    zlabel01.GetProperties().SetLogical("Show", true);
                }
                //---------Enter your code here-----------
            }
            else if (block == zlabel0)
            {
                //---------Enter your code here-----------
            }
            else if (block == zlabel01)
            {
                //---------Enter your code here-----------
            }
            else if (block == list_box0)
            {
                //---------Enter your code here-----------
            }
            else if (block == tolatt)
            {
                //---------Enter your code here-----------
            }
            else if (block == framstyle)
            {
                //---------Enter your code here-----------
            }
            else if (block == double0)
            {
                //---------Enter your code here-----------
            }
            else if (block == valuestyle)
            {
                //---------Enter your code here-----------
            }
            else if (block == matrstyle)
            {
                //---------Enter your code here-----------
            }
            else if (block == mainbase)
            {
                //---------Enter your code here-----------
            }
            else if (block == maiinbasemat)
            {
                //---------Enter your code here-----------
            }
            else if (block == separator0)
            {
                //---------Enter your code here-----------
            }
            else if (block == separator01)
            {
                //---------Enter your code here-----------
            }
            else if (block == ifotherbase)
            {
                int m = ifotherbase.GetProperties().GetEnum("Value");
                if (m == 0)
                {
                    firstrefbase.GetProperties().SetLogical("Enable", false);
                    firstrefbasemat.GetProperties().SetLogical("Enable", false);
                    secrefbase.GetProperties().SetLogical("Enable", false);
                    secrefbasemat.GetProperties().SetLogical("Enable", false);
                }
                else if (m == 1)
                {
                    firstrefbase.GetProperties().SetLogical("Enable", true);
                    firstrefbasemat.GetProperties().SetLogical("Enable", true);
                    secrefbase.GetProperties().SetLogical("Enable", false);
                    secrefbasemat.GetProperties().SetLogical("Enable", false);
                }
                else if (m == 2)
                {
                    firstrefbase.GetProperties().SetLogical("Enable", true);
                    firstrefbasemat.GetProperties().SetLogical("Enable", true);
                    secrefbase.GetProperties().SetLogical("Enable", true);
                    secrefbasemat.GetProperties().SetLogical("Enable", true);
                }
                //---------Enter your code here-----------
            }
            else if (block == separator02)
            {
                //---------Enter your code here-----------
            }
            else if (block == firstrefbase)
            {
                //---------Enter your code here-----------
            }
            else if (block == firstrefbasemat)
            {
                //---------Enter your code here-----------
            }
            else if (block == separator03)
            {
                //---------Enter your code here-----------
            }
            else if (block == secrefbase)
            {
                //---------Enter your code here-----------
            }
            else if (block == secrefbasemat)
            {
                //---------Enter your code here-----------
            }
            else if (block == double02)
            {
                //---------Enter your code here-----------
            }
            else if (block == double01)
            {
                //---------Enter your code here-----------
            }
            else if (block == toggle0)
            {
                if (toggle0.GetProperties().GetLogical("Value"))
                {
                    selection01.GetProperties().SetLogical("Enable", true);
                }
                else if (!toggle0.GetProperties().GetLogical("Value"))
                {
                    selection01.GetProperties().SetLogical("Enable", false);
                }
                //---------Enter your code here-----------
            }
            else if (block == selection01)
            {
                //---------Enter your code here-----------
            }
            else if (block == postion)
            {
                //---------Enter your code here-----------
            }
            else if (block == selection0)
            {
                //---------Enter your code here-----------
            }
            else if (block == point0)
            {//FIN-TYPE-10/19
                plcpoint = point0.GetProperties().GetTaggedObjectVector("SelectedObjects");

                theplcpoint = Tag2NXObject<Point>(plcpoint[0].Tag);
                Point3d pt3d = theplcpoint.Coordinates;//这个就是放置点
                string attvalue = tolatt.GetProperties().GetEnumAsString("Value");
                object attrtype = null;//这个是公差类型
                switch (attvalue)
                {
                    case "直线度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Straightness;
                        break;
                    case "平面度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Flatness;

                        break;
                    case "圆度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Circularity;
                        break;
                    case "圆柱度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Cylindricity;
                        break;
                    case "直线轮廓":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.ProfileOfALine;
                        break;
                    case "曲面轮廓":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.ProfileOfASurface;
                        break;
                    case "倾斜度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Angularity;
                        break;
                    case "垂直度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Perpendicularity;
                        break;
                    case "平行度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Parallelism;
                        break;
                    case "位置":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Position;
                        break;
                    case "对称度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Symmetry;
                        break;
                    case "同轴度":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.Concentricity;
                        break;
                    case "圆跳动":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.CircularRunout;
                        break;
                    case "全跳动":
                        attrtype = NXOpen.Annotations.FeatureControlFrameBuilder.FcfCharacteristic.TotalRunout;
                        break;

                }
                int i = valuestyle.GetProperties().GetEnum("Value");
                object zhileixing = null;//这个是公差的值类型，可以是fai,Sfai.
                if (i == 0)
                {
                    zhileixing = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceZoneShape.Diameter;
                }
                else if (i == 1)
                {
                    zhileixing = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceZoneShape.None;
                }
                else if (i == 2)
                {
                    zhileixing = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceZoneShape.SphericalDiameter;
                }
                object matcondition = null;//行为公差的材料状况
                //string matconditionatt =  .GetProperties().GetEnumAsString("Value");
                string matconditionatt = matrstyle.GetProperties().GetEnumAsString("Value");
                if (matconditionatt == "最好材料状况")
                {
                    matcondition = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceMaterialModifier.MaximumMaterialCondition;
                }
                else if (matconditionatt == "最差材料状况")
                {
                    matcondition = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceMaterialModifier.LeastMaterialCondition;
                }
                else if (matconditionatt == "不考虑特征大小")
                {
                    matcondition = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceMaterialModifier.RegardlessOfFeatureSize;
                }
                else if (matconditionatt == "无")
                {
                    
                    matcondition = NXOpen.Annotations.FeatureControlFrameDataBuilder.ToleranceMaterialModifier.None;
                }
                string baseattstr = mainbase.GetProperties().GetEnumAsString("Value");//基准类型A----H
                if (baseattstr == "无")
                {
                    baseattstr = null;
                }
                string mainbasematstr = maiinbasemat.GetProperties().GetEnumAsString("Value");
                object mainbasematobj = null;//这个是主基准材料状况
                if (mainbasematstr == "最好材料状况")
                {
                    mainbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.MaximumMaterialCondition;
                }
                else if (mainbasematstr == "最差材料状况")
                {
                    mainbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.LeastMaterialCondition;
                }
                else if (mainbasematstr == "不考虑特征大小")
                {
                    mainbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.RegardlessOfFeatureSize;
                }
                else if (mainbasematstr == "无")
                {
                    mainbasematobj = null;
                }
                string firstbasestr = firstrefbase.GetProperties().GetEnumAsString("Value");//第一参考基准，也就是平常说的第二参考基准
                if (firstbasestr == "无")
                {
                    firstbasestr = null;
                }
                string firstbasematstr = firstrefbasemat.GetProperties().GetEnumAsString("Value");
                object firstbasematobj = null;//这个是第一（第二）参考基准的材料特性
                if (firstbasematstr == "最好材料状况")
                {
                    firstbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.MaximumMaterialCondition;
                }
                else if (firstbasematstr == "最差材料状况")
                {
                    firstbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.LeastMaterialCondition;
                }
                else if (firstbasematstr == "不考虑特征大小")
                {
                    firstbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.RegardlessOfFeatureSize;
                }
                else if (firstbasematstr == "无")
                {

                    firstbasematobj = null;
                }
                string secbasestr = secrefbase.GetProperties().GetEnumAsString("Value");//第二参考基准（第三）
                if (secbasestr == "无")
                {
                    secbasestr = null;

                }
                string secbasematstr = secrefbasemat.GetProperties().GetEnumAsString("Value");

                object secbasematobj = null;//这个是第二（第三）参考基准的材料特性
                if (secbasematstr == "最好材料状况")
                {
                    secbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.MaximumMaterialCondition;
                }
                else if (secbasematstr == "最差材料状况")
                {
                    secbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.LeastMaterialCondition;
                }
                else if (secbasematstr == "不考虑特征大小")
                {
                    secbasematobj = NXOpen.Annotations.DatumReferenceBuilder.DatumReferenceMaterialCondition.RegardlessOfFeatureSize;
                }
                else if (secbasematstr == "无")
                {
                    secbasematobj = null;

                }
                double tolvalue = double0.GetProperties().GetDouble("Value");//这个是公差值
                double zoom = double01.GetProperties().GetDouble("Value");//这个是放大缩小的因子
                if (tolvalue == 0.0)
                {
                    theUI.NXMessageBox.Show("公差值为0", NXMessageBox.DialogType.Warning, "公差值不能为0");
                    return 1;
                }

                int pp = framstyle.GetProperties().GetEnum("Value");
                object kuang = null;//框样式
                if (pp == 0)//单框
                {
                    kuang = NXOpen.Annotations.FeatureControlFrameBuilder.FcfFrameStyle.SingleFrame;
                }
                else if (pp == 1)//多框
                {
                    kuang = NXOpen.Annotations.FeatureControlFrameBuilder.FcfFrameStyle.CompositeFrame;
                }
                //int qq = postion.GetProperties().GetEnum("Value");
                object LeaderType = null;
                // if (qq == 0)//折线形式是选择点
                // {
                LeaderType = NXOpen.Annotations.LeaderData.LeaderType.Plain;
                //    Selection.MaskTriple[] msktripe = null;
                //    msktripe[0].Type = NXOpen.UF.UFConstants.UF_point_type;
                //    selection0.GetProperties().SetSelectionFilter("SelectionFilter", Selection.SelectionAction.ClearAndEnableSpecific, msktripe);
                //    //NXOpen.TaggedObject tagobj = selection0.GetProperties().GetTaggedObject("SelectedObjects");
                //  }
                // else if (qq == 1)//折现形式是选择线
                //{
                //  LeaderType=NXOpen.Annotations.LeaderData.LeaderType.Flag;
                //    Selection.MaskTriple[] msktripe = null;
                //    msktripe[0].Type = NXOpen.UF.UFConstants.UF_solid_type;
                //    msktripe[0].Subtype = NXOpen.UF.UFConstants.UF_all_subtype;
                //    msktripe[0].SolidBodySubtype = NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE;


                //}
                DisplayableObject zhexiandian = null;
                NXOpen.TaggedObject[] tagobj00 = selection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
                if (tagobj00.Length == 0)
                {
                    theUI.NXMessageBox.Show("未选择折线角点", NXMessageBox.DialogType.Warning, "请先选择折线角点");
                    return 1;
                }
                zhexiandian = Tag2NXObject<DisplayableObject>(tagobj00[0].Tag);
                //Point3d realdian = zhexiandian.Coordinates;//这个是折线点
                DisplayableObject guanlian = null;//关联对象
                if (selection01.GetProperties().GetLogical("Enable"))
                {
                    NXOpen.TaggedObject[] tagobj1 = selection01.GetProperties().GetTaggedObjectVector("SelectedObjects");
                    if (tagobj1.Length == 0)
                    {
                        theUI.NXMessageBox.Show("未选择关联对象", NXMessageBox.DialogType.Warning, "请选择关联对象");
                        return 1;
                    }
                    guanlian = Tag2NXObject<DisplayableObject>(tagobj1[0].Tag);
                }

                int st = ifotherbase.GetProperties().GetEnum("Value");
                if (st == 0)
                {
                    firstbasematobj = null;
                    firstbasestr = null;
                    secbasestr = null;
                    secbasematobj = null;
                }
                else if (st == 1)
                {
                    secbasestr = null;
                    secbasematobj = null;
                }
                double conlength = double02.GetProperties().GetDouble("Value");//这是短线长度。
                //Selection.MaskTriple msktrp;
                //msktrp.Subtype = 
                //selection0.GetProperties().SetSelectionFilter("SelectionFilter",Selection.SelectionAction.ClearAndEnableSpecific,
                //thefun.function(tolvalue.ToString(), baseattstr, firstbasestr, secbasestr, zhileixing, matcondition, mainbasematobj, firstbasematobj, 

                thepubfunfcf.function(tolvalue.ToString(), baseattstr, firstbasestr, secbasestr, zhileixing, attrtype,matcondition, mainbasematobj, firstbasematobj, secbasematobj, kuang, zoom, conlength, pt3d, zhexiandian, guanlian, LeaderType);
            }
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    public static string GetStringAttr(NXObject obj, string title)
    {
        try
        {
            string attr = obj.GetStringAttribute(title);
            return attr;
        }
        catch/* (System.Exception ex)*/
        {
            return "";
        }
    }
    public static NXOpen.Annotations.BalloonNote FindballonByAttr(string attr_name, string attr_value)
    {

                Part a = theSession.Parts.Work;
                NXOpen.Annotations.PmiAttribute[] bns = Session.GetSession().Parts.Work.PmiManager.PmiAttributes.ToArray();
                foreach (NXOpen.Annotations.PmiAttribute bn in bns)
                {
                    string aa = GetStringAttr(bn, attr_name);
                    if (aa == attr_value)
                    {
                        return (NXOpen.Annotations.BalloonNote)bn;
                    }
                }

                return null;



    }
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            Part a = theSession.Parts.Work;
            a.Save(BasePart.SaveComponents.True, BasePart.CloseAfterSave.False);
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }


    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        if (block == zselection0)
        {
            try
            {
                NXOpen.Annotations.Dimension d = (NXOpen.Annotations.Dimension)selectedObject;
            }
            catch
            {
                return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
            }
        }
        else if (block == selection0)
        {
            try
            {
                Point d = (Point)selectedObject;
            }
            catch
            {
                return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
            }
        
        }
        else
             if (block == jiaoyanshisel)
             {
                 try
                 {
                  NXOpen.Annotations.Annotation an =   (NXOpen.Annotations.Annotation)selectedObject;
                        

                 }
                 catch
                 {
                     return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
                 
                 }
             
             }
                
        else if (block == here)
        {
            try
            {
                NXOpen.Annotations.Annotation dd = (NXOpen.Annotations.Annotation)selectedObject;
            }
            catch
            {
                return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
            }
        
        }

        return (NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }
    public static string NXPath
    {
        get
        {
            string ugraf = Process.GetCurrentProcess().MainModule.FileName;
            return ugraf.Substring(0, ugraf.Length - 14);
        }
    }
    public static string ApplicationPath
    {
        get
        {
            return System.AppDomain.CurrentDomain.BaseDirectory;
        }
    }
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    public string StateIconNameCallback(Tree tree, Node node, int state)
    {
         string stateIcon = "hole";
   try
   {
       if (state == 3)
       {
           stateIcon = "checked";
           theUI.NXMessageBox.Show("fuck", NXMessageBox.DialogType.Warning, "oh ,shit");
       }
       else if (state == 4)
           stateIcon = "boss";
       else if (state == 5)
           stateIcon = "revolve";
   }
   catch (Exception ex)
   {
      //---- Enter your exception handling code here -----
   }
   return stateIcon;

    }
    public Node.DropType IsDropAllowedCallback(Tree tree, Node node, int columnID, Node targetNode, int targetColumnID)
    {
    
        if((node.ParentNode == dimnode && node != dimnode) && (targetNode.ParentNode == dimnode && targetNode != dimnode))
        {
            if (node.GetState() ==  2 && targetNode.GetState() == 2)
            {

                return Node.DropType.After;
            }
        }
      else  if((node.ParentNode == fcfnode && node != fcfnode) && (targetNode.ParentNode == fcfnode && targetNode != fcfnode))
        {

            if (node.GetState() == 2 && targetNode.GetState() == 2)
            {

                return Node.DropType.After;
            }
        
        }
        else
        {
            return Node.DropType.None;

      }
        return Node.DropType.None;
        }


    public void nd2nd(Node odnd, Node newnd,Node topnode, int state)//将odnd放在newnd后面
    {
        Node tempnode = null;
        tempnode = tree_control0.CreateNode("node");
        tree_control0.InsertNode(tempnode, topnode, newnd, Tree.NodeInsertOption.Last);
        tempnode.SetState(state);
        tempnode.SetColumnDisplayText(1, odnd.GetColumnDisplayText(1));
        tempnode.SetColumnDisplayText(2, odnd.GetColumnDisplayText(2));
        tempnode.SetColumnDisplayText(3, odnd.GetColumnDisplayText(3));
        DataContainer tempcontainer = tempnode.GetNodeData();
        tempcontainer.AddTaggedObject("Data", odnd.GetNodeData().GetTaggedObject("Data"));
        tempcontainer.Dispose();
        tree_control0.DeleteNode(odnd);
    }
    public void labelnode(Node parent)
    {
    //ArrayList nodes = getcdnd(parent); 
          Node[] nodeary = (Node[])getcdnd(parent).ToArray(typeof(Node));
          int p = 1;
        if (parent == dimnode)
        {
        p =  china.GetProperties().GetInteger("Value");
        
        }
        else if(parent == fcfnode)
        {
            p = japan.GetProperties().GetInteger("Value");
        }
          for (int i = 0; i < nodeary.Length; i++)
          {
              nodeary[i].SetColumnDisplayText(1, (p + i ).ToString());
          
          
          }
    
    }
    public bool OnDropCallback(Tree tree, Node[] node, int columnID, Node targetNode, int targetColumnID, Node.DropType dropType, int dropMenuItemId)
    {
        if (node[0].ParentNode == dimnode)
        {
            nd2nd(node[0], targetNode, dimnode, 2);
            labelnode(dimnode);
            return true;
        }
        else if (node[0].ParentNode == fcfnode)
        {
            nd2nd(node[0], targetNode, fcfnode, 2);
            labelnode(fcfnode);
            return true;
        }
        return false;
        //Node tempnode = null;
        //tempnode = tree_control0.CreateNode("node");
        //tree_control0.InsertNode(tempnode, dimnode, targetNode, Tree.NodeInsertOption.Last);
        //tempnode.SetState(2);
        //tempnode.SetColumnDisplayText(1,node[0].GetColumnDisplayText(1));
        // tempnode.SetColumnDisplayText(2,node[0].GetColumnDisplayText(2));
        // tempnode.SetColumnDisplayText(3,node[0].GetColumnDisplayText(3));
        // DataContainer tempcontainer = tempnode.GetNodeData();
        //tempcontainer.AddTaggedObject("Data", (NXOpen.Annotations.Dimension)node[0].GetNodeData().GetTaggedObject("Data"));
        //tempcontainer.Dispose();
        //tree_control0.DeleteNode(node[0]);
        return true;

    }
    public void OnMenuCallback(Tree tree, Node node, int columnID)
    {
        
        try
        {
            TreeListMenu menu = tree.CreateMenu();
            if (node == dimnode && node != null)
            {
                menu.AddMenuItem(9, "全选");
            }
            else if (node == fcfnode && node != null)
            {
                    menu.AddMenuItem(10,"全选");
                }
            else if (node.ParentNode == dimnode && node != dimnode)
            {
                int state = node.GetState();
                if (state == 1)
                {
                    menu.AddMenuItem(2, "打标");
                }
                else if (state == 2)
                {
                    menu.AddMenuItem(1, "不打标");
                    menu.AddMenuItem(15, "更改方向");
                }
            }
            else if (node.ParentNode == fcfnode && node != fcfnode)
            {
                int state = node.GetState();
                if (state == 1)
                {
                    menu.AddMenuItem(3, "打标");
                }
                else if (state == 2)
                {
                    menu.AddMenuItem(4, "不打标");
                    menu.AddMenuItem(16, "更改方向");
                }
            
            }
            tree.SetMenu(menu);
            menu.Dispose();
        }
        catch (Exception ex)
        {
            //---- Enter the exception handling code here. -----
        }
    }
   
    public void OnMenuSelectionCallback(Tree tree, Node node, int menuItemID)
    {
        if (menuItemID == 1)
        {
            //Node tempnode = null;
            //tempnode = tree_control0.CreateNode("node");
            //tree_control0.InsertNode(tempnode, dimnode, null, Tree.NodeInsertOption.Last);
            //tempnode.SetState(1);
            //tempnode.SetColumnDisplayText(1, node.GetColumnDisplayText(1));
            //tempnode.SetColumnDisplayText(2, node.GetColumnDisplayText(2));
            //tempnode.SetColumnDisplayText(3, node.GetColumnDisplayText(3));
            //DataContainer tempcontainer = tempnode.GetNodeData();
            //tempcontainer.AddTaggedObject("Data", (NXOpen.Annotations.Dimension)node.GetNodeData().GetTaggedObject("Data"));
            //tempcontainer.Dispose();
            //tree_control0.DeleteNode(node);

          
            nd2nd(node,null,dimnode,1);
            labelnode(dimnode);
        }
        else if (menuItemID == 2)
        {

            Node tempnode = null;
            tempnode = tree_control0.CreateNode("node");
            tree_control0.InsertNode(tempnode, dimnode, null, Tree.NodeInsertOption.AlwaysFirst);
            tempnode.SetState(2);
            tempnode.SetColumnDisplayText(1, node.GetColumnDisplayText(1));
            tempnode.SetColumnDisplayText(2, node.GetColumnDisplayText(2));
            tempnode.SetColumnDisplayText(3, node.GetColumnDisplayText(3));
            DataContainer tempcontainer = tempnode.GetNodeData();
            tempcontainer.AddTaggedObject("Data", node.GetNodeData().GetTaggedObject("Data"));
            tempcontainer.Dispose();
            tree_control0.DeleteNode(node);

            //nd2nd(node, dimnode.FirstChildNode,dimnode,2);
            labelnode(dimnode);
        }
        else if(menuItemID == 3)
        {
            Node tempnode = null;
            tempnode = tree_control0.CreateNode("node");
            tree_control0.InsertNode(tempnode, fcfnode, null, Tree.NodeInsertOption.AlwaysFirst);
            tempnode.SetState(2);
            tempnode.SetColumnDisplayText(1, node.GetColumnDisplayText(1));
            tempnode.SetColumnDisplayText(2, node.GetColumnDisplayText(2));
            tempnode.SetColumnDisplayText(3, node.GetColumnDisplayText(3));
            DataContainer tempcontainer = tempnode.GetNodeData();
            tempcontainer.AddTaggedObject("Data", node.GetNodeData().GetTaggedObject("Data"));
            tempcontainer.Dispose();
            tree_control0.DeleteNode(node);
            //nd2nd(node, fcfnode.FirstChildNode, fcfnode, 2);
            labelnode(fcfnode);
        }
        else if(menuItemID ==4)
        {
          
            nd2nd(node, null, fcfnode, 1);
            labelnode(fcfnode);
        }
        else if (menuItemID == 9)//dim
        { ArrayList alldims = new ArrayList();
        alldims = getcdnd(dimnode);
            foreach(Node a in alldims)
            {
                a.SetState(2);
            }
        }

        else if (menuItemID == 10)//fcf
        {
            ArrayList allfcfs = new ArrayList();
            allfcfs = getcdnd(fcfnode);
            foreach (Node a in allfcfs)
            {
                a.SetState(2);
            }
        }
        else if (menuItemID == 15)
        {
            Part displayPart = theSession.Parts.Display;
            Part workPart = theSession.Parts.Work;
            string a = node2dim(node).GetStringAttribute("GUID");
            NXOpen.Annotations.BalloonNote b = FindballonByAttr("GUID", a);
            if (b != null)
            {
                NXOpen.Annotations.BalloonNoteBuilder balloonNoteBuilder1;
                balloonNoteBuilder1 = workPart.PmiManager.PmiAttributes.CreateBalloonNoteBuilder(b);
                double ang = balloonNoteBuilder1.Style.LetteringStyle.Angle;
                if (ang == 0)
                {
                    balloonNoteBuilder1.Style.LetteringStyle.Angle = 90;
                }
                else if (ang >= 45)
                {
                    balloonNoteBuilder1.Style.LetteringStyle.Angle = 0;
                }

                balloonNoteBuilder1.Commit();
                balloonNoteBuilder1.Destroy();
            }
        
        }
        else if(menuItemID == 16)
        {
            Part displayPart = theSession.Parts.Display;
            Part workPart = theSession.Parts.Work;
            string a = node2dim(node).GetStringAttribute("GUID");
            NXOpen.Annotations.BalloonNote b = FindballonByAttr("GUID", a);
            if (b != null)
            {
                NXOpen.Annotations.BalloonNoteBuilder balloonNoteBuilder1;
                balloonNoteBuilder1 = workPart.PmiManager.PmiAttributes.CreateBalloonNoteBuilder(b);
                double ang = balloonNoteBuilder1.Style.LetteringStyle.Angle;
                if(ang == 0)
                {
                    balloonNoteBuilder1.Style.LetteringStyle.Angle = 90;
                }
                else if (ang >= 45)
                {
                    balloonNoteBuilder1.Style.LetteringStyle.Angle = 0;
                }
               
                balloonNoteBuilder1.Commit();
                balloonNoteBuilder1.Destroy();
            }
        }
    }
    public ArrayList getcdnd(Node parentnode)//得到一个父节点下面所有的子节点
    {
        ArrayList allnodes = new ArrayList();
        Node nd = parentnode.FirstChildNode;
        if (nd == null)
        {
        return null;
        
        }
        allnodes.Add(nd);
        while (nd != null)
        {
            nd = nd.NextNode;
            if (nd == null || nd.ParentNode != parentnode)
            {
                return allnodes;
            }
            else
            {
                allnodes.Add(nd);
            }
        }

        return allnodes;
    
    }

    public ArrayList ndwithunstate(ArrayList nodes)//get nodes with state 2
    {
        ArrayList statednode = new ArrayList();
        ArrayList unstatenode = new ArrayList(); //node with unchecked symbol in the first col
        foreach (Node singlenode in nodes)
        {
            int state = singlenode.GetState();
            if (state == 1)
            {
                unstatenode.Add(singlenode);

            }
            else
            {

            }



        }

        return unstatenode;


    }

    public ArrayList ndwithstate(ArrayList nodes)//get nodes with state 2
    {
        ArrayList statednode = new ArrayList();
        ArrayList unstatenode = new ArrayList(); //node with unchecked symbol in the first col
    foreach(Node singlenode in nodes)
    {
        int state = singlenode.GetState();
        if (state == 2)
        {
            statednode.Add(singlenode);

        }
        else
        { 
        
        }

    
    
    }

    return statednode;
    
    
    }
    public void makeano(NXOpen.Annotations.Dimension dim ,string ano)
    {

        Part workPart = theSession.Parts.Work;
        NXOpen.Annotations.AppendedText appendedText1;
        appendedText1 = workPart.Annotations.NewAppendedText();
        string[] lines4 = new string[1];
        lines4[0] = ano;
        appendedText1.SetAfterText(lines4);
        dim.SetAppendedText(appendedText1);
        appendedText1.Dispose();
        dim.LeaderOrientation = NXOpen.Annotations.LeaderOrientation.FromLeft;
    }
    public static void EditBalloonNote(NXOpen.Annotations.BalloonNote balloonnote, NXOpen.Annotations.Annotation ano,string num)
    {
        //计算宽高比
        double DimensionSize = ano.GetLetteringPreferences().GetDimensionText().Size;
        double AspectRatio = 1;
        switch (num.Length)
        {
            case 0:
                AspectRatio = 1;
                break;
            case 1:
                AspectRatio = 0.7;
                break;
            case 2:
                AspectRatio = 0.6;
                break;
            case 3:
                AspectRatio = 0.4;
                break;
            default:
                AspectRatio = 1.2 / num.Length;
                break;
        }
        Session theSession = Session.GetSession();
        Part workPart = theSession.Parts.Work;
        Part displayPart = theSession.Parts.Display;
        NXOpen.Annotations.BalloonNoteBuilder balloonNoteBuilder1;
        balloonNoteBuilder1 = workPart.PmiManager.PmiAttributes.CreateBalloonNoteBuilder(balloonnote);
        balloonNoteBuilder1.Origin.Plane.PlaneMethod = NXOpen.Annotations.PlaneBuilder.PlaneMethodType.UserDefined;
        balloonNoteBuilder1.Origin.SetInferRelativeToGeometry(true);
        String[] text1 = new String[1];
        text1[0] = "";
        balloonNoteBuilder1.SetText(text1);
        balloonNoteBuilder1.Origin.Plane.PlaneMethod = NXOpen.Annotations.PlaneBuilder.PlaneMethodType.UserDefined;
        balloonNoteBuilder1.Origin.SetInferRelativeToGeometry(true);
        NXOpen.Annotations.LeaderData leaderData1;
        leaderData1 = workPart.Annotations.CreateLeaderData();
        leaderData1.Arrowhead = NXOpen.Annotations.LeaderData.ArrowheadType.FilledArrow;
        balloonNoteBuilder1.Leader.Leaders.Append(leaderData1);
        leaderData1.StubSide = NXOpen.Annotations.LeaderSide.Inferred;
        balloonNoteBuilder1.Origin.SetInferRelativeToGeometry(true);
        balloonNoteBuilder1.Origin.SetInferRelativeToGeometry(true);
        try
        {
            NXOpen.Annotations.Fcf fcff = (NXOpen.Annotations.Fcf)ano;
            balloonNoteBuilder1.BalloonText = "J" + num;

        }
        catch
        {
            balloonNoteBuilder1.BalloonText =  num;
        }
      
        balloonNoteBuilder1.Style.LetteringStyle.GeneralTextAspectRatio = AspectRatio;
        balloonNoteBuilder1.Style.LetteringStyle.GeneralTextSize = DimensionSize;
        NXObject nXObject1;
        nXObject1 = balloonNoteBuilder1.Commit();
        balloonNoteBuilder1.Destroy();
    }
    public static int DeleteObject(NXObject ob)
    {
        Session theSession = Session.GetSession();
        bool notifyOnDelete1;
        notifyOnDelete1 = theSession.Preferences.Modeling.NotifyOnDelete;
        theSession.UpdateManager.ClearErrorList();
        NXOpen.Session.UndoMarkId markId1;
        markId1 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Delete");
        NXObject[] objects1 = new NXObject[1];
        objects1[0] = ob;
        int nErrs1;
        nErrs1 = theSession.UpdateManager.AddToDeleteList(objects1);
        bool notifyOnDelete2;
        notifyOnDelete2 = theSession.Preferences.Modeling.NotifyOnDelete;
        int nErrs2;
        nErrs2 = theSession.UpdateManager.DoUpdate(markId1);
        theSession.DeleteUndoMark(markId1, "Delete");
        return 0;
    }

    public NXOpen.Annotations.Annotation getanobybal(NXOpen.Annotations.BalloonNote bal)
    {
        string a = bal.GetStringAttribute("GUID");
        ArrayList pool = new ArrayList();
        Part workPart = theSession.Parts.Work;
       
        try
        {
            NXOpen.Annotations.Fcf[] fcf = workPart.Annotations.Fcfs.ToArray();
            for (int i = 0; i < fcf.Length;i ++ )
            {
                pool.Add(fcf[i]);
            }
          NXOpen.Annotations.Dimension[] dims = workPart.Dimensions.ToArray();
          for (int p = 0; p < dims.Length; p ++ )
          {
              pool.Add(dims[p]);

          }
          foreach (NXOpen.Annotations.Annotation aa in pool)
          {
              try
              {
                  string m = aa.GetStringAttribute("guid");
                  if (a == m)
                  {
                      return aa;
                  }
              }
              catch
              {
              
              }
             
          }
       
                
        }
        catch
        {

        }


        return null;


    }
    public static void DeleteBalloonNoteByAttr(string attr_name, string attr_value)
    {
        try
        {
            NXOpen.Annotations.PmiAttribute[] pac = Session.GetSession().Parts.Work.PmiManager.PmiAttributes.ToArray();
            foreach (NXOpen.Annotations.PmiAttribute pa in pac)
            {
                if (GetStringAttr(pa, attr_name) == attr_value)
                {
                    DeleteObject(pa);
                }
            }
        }
        catch (System.Exception ex)
        {
            UI.GetUI().NXMessageBox.Show("Message", NXMessageBox.DialogType.Error, ex.Message);
        }
    }
    public static NXOpen.Annotations.Annotation GetInheritParent(NXOpen.Annotations.Annotation pmi)
    {
        NXOpen.Annotations.PmiManager pm = Session.GetSession().Parts.Work.PmiManager;
        if (pm.IsInheritedPmi(pmi))
        {
            return pm.GetInheritParent(pmi);
        }
        else
        {
            return pmi;
        }
    }
}
