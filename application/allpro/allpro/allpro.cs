//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\Jerry\Desktop\allpro.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: Jerry
//              Version: NX 7.5
//              Date: 08-23-2012  (Format: mm-dd-yyyy)
//              Time: 16:58 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using Microsoft.Office.Interop.Excel;
using System;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.UF;
using System.Reflection;
using System.Runtime.InteropServices;

using System.IO;
using System.Diagnostics;
using System.Collections;
using System.Collections.Generic;
using System.Text;
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class allpro
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    public static UFSession theuf = null;
    public static allpro theallpro;
    private string theDialogName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.UIBlock selection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock nativeFolderBrowser0;// Block type: NativeFolderBrowser
    private NXOpen.BlockStyler.UIBlock toggle0;// Block type: Toggle
    private NXOpen.BlockStyler.UIBlock selectPart0;// Block type: Select Part
    private NXOpen.BlockStyler.Tree tree_control0;// Block type: Tree Control
    private NXOpen.BlockStyler.UIBlock button0;// Block type: Button
    private NXOpen.BlockStyler.UIBlock toggle01;// Block type: Toggle
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    public ArrayList dimary = new ArrayList();//这个动态数组存放所有需要进行校核的尺寸(也包括封闭环尺寸)，很重要。
    public NXOpen.Annotations.Dimension[] dimarydim;//与dimary对应的数组
    public NXOpen.TaggedObject[] theoripmi;//要校核的PMI
    public ArrayList addcir = new ArrayList();//存储增环
    public ArrayList deccir = new ArrayList();//存储减环
    public ArrayList thedown = new ArrayList();//记录整个工序内除过要校核尺寸外的尺寸
    List<int[]> lst_Combination = new List<int[]>();//list用add方法时也要用new分配内存
    double finalx = 0;//对应一个尺寸属性列表中的x分值，下同。
    double finaly = 0;
    double finalz = 0;
    NXOpen.Annotations.Dimension[] thefinalori = null;//不预先设定校核范围时，最后存储尺寸的变量
    DatumAxis xformone = null;//要校核的尺寸生成的轴
    NXOpen.Annotations.Dimension[] left = null;//存放除过要校核的之外的所有尺寸
    public ArrayList theday = new ArrayList();//theday是一个里面存放排列组合后得到的尺寸的数组
    public Node trannode = null;//这个node用来在menu和combox这两个回调中转换，从而达到只有被menu调用的node才会被combox回调
    public List<NXOpen.Annotations.Dimension[]> finaloneinpro = new List<NXOpen.Annotations.Dimension[]>();//校核的时候存放和要校核的尺寸成环的其他所有尺寸的list
    public ArrayList partpool = new ArrayList();//存放除过workpart（或者displaypart）之外的所有要校核的part
    public ArrayList nodepool = new ArrayList();//存放和封闭环有关的所有的node包括封闭环自己的信息。
    public NXOpen.Annotations.Dimension[] zengshuzu = null;
    public NXOpen.Annotations.Dimension[] jianshuzu = null;
    public string folderpath = "3dppmplugin\\";
    public string pmicheckpath = "pmicheck.xml";
    public string pmixlspath = "pmi.xls";
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public allpro()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDialogName = "allpro.dlx";
            theDialog = theUI.CreateDialog(theDialogName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
        }
        catch
        {
            theUI.NXMessageBox.Show("提示", NXMessageBox.DialogType.Warning, "请先打开一个模型在使用本工具");
        }
    }
//#if USER_EXIT_OR_MENU
    public static void Main()
    {
        try
        {
            theallpro = new allpro();
            theallpro.Show();
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            theallpro.Dispose();
        }
    }
//#endif//USER_EXIT_OR_MENU
#if USER_EXIT
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    public static int UnloadLibrary(string arg)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
#endif//USER_EXIT
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch 
        {
          
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
#if CALLBACK
    //------------------------------------------------------------------------------
    //Method name: Show_allpro
    //------------------------------------------------------------------------------
    public static void Show_allpro()
    {
        try
        {
            theallpro = new allpro();
            theallpro.Show();
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            theallpro.Dispose();
        }
    }
#endif//CALLBACK
    
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            selection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection0");
            nativeFolderBrowser0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("nativeFolderBrowser0");
            toggle0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle0");
            selectPart0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selectPart0");
            tree_control0 = (NXOpen.BlockStyler.Tree)theDialog.TopBlock.FindBlock("tree_control0");
            button0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("button0");
            //tree_control0.SetToolTipTextHandler(new NXOpen.BlockStyler.Tree.ToolTipTextCallback(ToolTipTextcallback));
            tree_control0.SetOnMenuHandler(new NXOpen.BlockStyler.Tree.OnMenuCallback(OnMenuCallback)); ;
            tree_control0.SetOnMenuSelectionHandler(new NXOpen.BlockStyler.Tree.OnMenuSelectionCallback(OnMenuSelectionCallback)); ;
            tree_control0.SetOnEditOptionSelectedHandler(new NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback(OnEditOptionSelectedCallback));
            toggle01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("toggle01");
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
           
            selectPart0.GetProperties().SetLogical("Enable", false);
            tree_control0.InsertColumn(1, "尺寸链", 130);//一定有注意不同的回调函数的问题
            tree_control0.InsertColumn(2, "名义尺", 100);
            tree_control0.InsertColumn(3, "实际上公差/最大上公差", 200);
            tree_control0.InsertColumn(4, "实际下公差/最小下公差", 200);
            tree_control0.InsertColumn(5, "增/减环", 100);
            tree_control0.InsertColumn(6,"所在部件",100);
            toggle01.GetProperties().SetLogical("Value", false);
            toggle0.GetProperties().SetLogical("Enable",true);
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
             Part thework = theSession.Parts.Work;
            NXOpen.Annotations.Dimension theoridim = Tag2NXObject<NXOpen.Annotations.Dimension>(theoripmi[0].Tag);

            /////////
            if(tree_control0.NumberOfColumns == 7)
            {
            XmlDocument xd = new XmlDocument();
            string aa = theoridim.JournalIdentifier;
            string a = aa.Replace(" ", "");//这个replace函数的作用比较重要
            string path = "/root/pmi[" + "@name=" + "'" + a + "'" + "]";
            xd.Load(ApplicationPath + folderpath + pmicheckpath);//guts
            //xd.Load("E:\\gitest\\410proj\\prt\\pmicheck.xml");
            XmlNode dimnode = xd.SelectSingleNode(path);
            XmlNode root = xd.SelectSingleNode("/root");
            if (dimnode == null)
            {
                XmlElement pmi = xd.CreateElement("pmi");
                xd.CreateAttribute("name");
                pmi.SetAttribute("name", a);
                XmlElement jiaoherenyuan = xd.CreateElement("校核人员");
                xd.CreateAttribute("姓名");
                jiaoherenyuan.SetAttribute("姓名", trannode.ParentNode.GetColumnDisplayText(7));
                xd.CreateAttribute("修改后该PMI最大极限尺寸");
                jiaoherenyuan.SetAttribute("修改后该PMI最大极限尺寸", trannode.ParentNode.GetColumnDisplayText(3));
                xd.CreateAttribute("修改后该PMI最小极限尺寸");
                jiaoherenyuan.SetAttribute("修改后该PMI最小极限尺寸", trannode.ParentNode.GetColumnDisplayText(4));
                XmlElement buchanghuan = xd.CreateElement("补偿环信息");
                xd.CreateAttribute("名义值");
                buchanghuan.SetAttribute("名义值", trannode.GetColumnDisplayText(2));
                xd.CreateAttribute("上公差", trannode.GetColumnDisplayText(3));
                buchanghuan.SetAttribute("上公差", trannode.GetColumnDisplayText(3));
                xd.CreateAttribute("下公差");
                buchanghuan.SetAttribute("下公差", trannode.GetColumnDisplayText(4));
                xd.CreateAttribute("增减环");
                buchanghuan.SetAttribute("所属部件", trannode.GetColumnDisplayText(6));
                jiaoherenyuan.AppendChild(buchanghuan);

                Node[] nodeary = (Node[])getallnodes(trannode).ToArray(typeof(Node));//把动态数组转化成数组
                for (int i = 0; i < nodeary.Length; i++)
                {
                    XmlElement elsezucheng = xd.CreateElement("组成环" + (i + 1).ToString());
                    xd.CreateAttribute("名义值", nodeary[i].GetColumnDisplayText(2));
                    elsezucheng.SetAttribute("名义值", nodeary[i].GetColumnDisplayText(2));
                    xd.CreateAttribute("上公差", nodeary[i].GetColumnDisplayText(3));
                    elsezucheng.SetAttribute("上公差", nodeary[i].GetColumnDisplayText(3));
                    xd.CreateAttribute("下公差", nodeary[i].GetColumnDisplayText(4));
                    elsezucheng.SetAttribute("下公差", nodeary[i].GetColumnDisplayText(4));
                    xd.CreateAttribute("增减环", nodeary[i].GetColumnDisplayText(5));
                    elsezucheng.SetAttribute("增减环", nodeary[i].GetColumnDisplayText(5));
                    xd.CreateAttribute("所在部件", nodeary[i].GetColumnDisplayText(6));
                    elsezucheng.SetAttribute("所在部件", nodeary[i].GetColumnDisplayText(6));
                    jiaoherenyuan.AppendChild(elsezucheng);
                }
                pmi.AppendChild(jiaoherenyuan);
                root.AppendChild(pmi);
                xd.Save(ApplicationPath + folderpath + pmicheckpath);

            }
            else
            {
                //XmlElement pmi = xd.CreateElement("pmi");
                //xd.CreateAttribute("name");
                //pmi.SetAttribute("name", a);
                XmlElement jiaoherenyuan = xd.CreateElement("校核人员");
                xd.CreateAttribute("姓名");
                jiaoherenyuan.SetAttribute("姓名", trannode.ParentNode.GetColumnDisplayText(7));
                xd.CreateAttribute("修改后该PMI最大极限尺寸");
                jiaoherenyuan.SetAttribute("修改后该PMI最大极限尺寸", trannode.ParentNode.GetColumnDisplayText(3));
                xd.CreateAttribute("修改后该PMI最小极限尺寸");
                jiaoherenyuan.SetAttribute("修改后该PMI最小极限尺寸", trannode.ParentNode.GetColumnDisplayText(4));
                XmlElement buchanghuan = xd.CreateElement("补偿环信息");
                xd.CreateAttribute("名义值");
                buchanghuan.SetAttribute("名义值", trannode.GetColumnDisplayText(2));
                xd.CreateAttribute("上公差", trannode.GetColumnDisplayText(3));
                buchanghuan.SetAttribute("上公差", trannode.GetColumnDisplayText(3));
                xd.CreateAttribute("下公差");
                buchanghuan.SetAttribute("下公差", trannode.GetColumnDisplayText(4));
                xd.CreateAttribute("增减环");
                buchanghuan.SetAttribute("所属部件", trannode.GetColumnDisplayText(6));
                jiaoherenyuan.AppendChild(buchanghuan);
                Node[] nodeary = (Node[])getallnodes(trannode).ToArray(typeof(Node));//把动态数组转化成数组
                for (int i = 0; i < nodeary.Length; i++)
                {
                    XmlElement elsezucheng = xd.CreateElement("组成环" + (i + 1).ToString());
                    xd.CreateAttribute("名义值", nodeary[i].GetColumnDisplayText(2));
                    elsezucheng.SetAttribute("名义值", nodeary[i].GetColumnDisplayText(2));
                    xd.CreateAttribute("上公差", nodeary[i].GetColumnDisplayText(3));
                    elsezucheng.SetAttribute("上公差", nodeary[i].GetColumnDisplayText(3));
                    xd.CreateAttribute("下公差", nodeary[i].GetColumnDisplayText(4));
                    elsezucheng.SetAttribute("下公差", nodeary[i].GetColumnDisplayText(4));
                    xd.CreateAttribute("增减环", nodeary[i].GetColumnDisplayText(5));
                    elsezucheng.SetAttribute("增减环", nodeary[i].GetColumnDisplayText(5));
                    xd.CreateAttribute("所在部件", nodeary[i].GetColumnDisplayText(6));
                    elsezucheng.SetAttribute("所在部件", nodeary[i].GetColumnDisplayText(6));
                    jiaoherenyuan.AppendChild(elsezucheng);
                }
                //pmi.AppendChild(jiaoherenyuan);
                dimnode.AppendChild(jiaoherenyuan);
                //root.AppendChild(pmi);
                xd.Save(ApplicationPath + folderpath + pmicheckpath);
            
            }
            }
            form1 theform1 = new form1();
            theform1.Close();
            
            foreach (NXOpen.Part clsprt in partpool)
            {
                if(clsprt != thework )
                { 
                    clsprt.Save(BasePart.SaveComponents.True, BasePart.CloseAfterSave.True);
                }
               
            
            }
            //NXOpen.Part workpart = theSession.Parts.Work;
            //workpart.Save(BasePart.SaveComponents.True, BasePart.CloseAfterSave.True);
        }
        catch (Exception ex)
        {
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public ArrayList getpartlist(string path)////////得到一个文件夹里面所有prt的全路径
    {
        //string[] prtinfo = {"",""};//第一个
        ArrayList prtinfoary = new ArrayList();
        FileInfo[] prtfile;
        DirectoryInfo profolder = new DirectoryInfo(path);
        prtfile = profolder.GetFiles("*.prt");
        foreach (FileInfo eachprt in prtfile)
        {
            ////eachprt.FullName
            prtinfoary.Add(eachprt.FullName);
            //eachprt.Name
            //prtinfo[0] = eachprt.FullName;//第一个是全路径，第二个是文件名
            //prtinfo[1] = eachprt.Name;
            //prtinfoary.Add(prtinfo);
           //
        }
        return prtinfoary;
    }
    public static T Tag2NXObject<T>(Tag tag)
    {
        try
        {
            object to = NXOpen.Utilities.NXObjectManager.Get(tag);
            return (T)to;
        }
        catch (System.Exception ex)
        {
            UI.GetUI().NXMessageBox.Show("Message", NXMessageBox.DialogType.Error, ex.Message);
            return default(T);
        }
    }
    public int  update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == selection0)
            {
                theoripmi = selection0.GetProperties().GetTaggedObjectVector("SelectedObjects");  //需要校核的尺寸
                
                NXOpen.Annotations.Dimension theoridim = Tag2NXObject<NXOpen.Annotations.Dimension>(theoripmi[0].Tag);
                string finalstr = null;
                theoridim.SetAttribute("temp", "temp");
                NXObject.AttributeInformation[] attrinfo = null;
                int m;//用来记录对话框的状态，1的时候是确定。
                attrinfo = theoridim.GetAttributeTitlesByType(NXObject.AttributeType.Any);
                        bool reslt;
                        string mm = null;
                        foreach (NXObject.AttributeInformation inf in attrinfo)
                        {

                            mm = inf.Title;
                            finalstr = finalstr + mm.ToString();

                        }
                if(!finalstr.Contains("START"))
                {
                    theUI.NXMessageBox.Show("BlockStyler",NXOpen.NXMessageBox.DialogType.Warning,"该尺寸未赋矢量信息，无法进行尺寸链校核");
                    return 1;
                }
                else
                {
                        if (finalstr.Contains("校核记录"))
                        {
                           m = theUI.NXMessageBox.Show("已有校核记录", NXMessageBox.DialogType.Question, "该尺寸已经有校核记录是否查看？");
                           if (m == 1)
                           {
                               Exclefunction(ApplicationPath + folderpath + pmicheckpath);
                               //button0.GetProperties().SetLogical("Enable",false);
                               //foreach();
                               //要在这里插入保镖信息
                               //File.Open("E:\\pmi.xls");
                              // File.Open("E:\\pmi.xls", System.IO.FileMode.OpenOrCreate);
                               //StopProcess("Excel");
                               System.Diagnostics.Process.Start(ApplicationPath + folderpath + pmixlspath);//guts
                           }

                        }
                        

                        reslt = false;
                        theoridim.DeleteAttributeByTypeAndTitle(NXObject.AttributeType.Any, "temp");
                    }
                   
        }
            else if(block == nativeFolderBrowser0)
            {
            }
            else if(block == toggle0)
            {
                if (toggle0.GetProperties().GetLogical("Value"))
                {
                    selectPart0.GetProperties().SetLogical("Enable", true);
                    nativeFolderBrowser0.GetProperties().SetLogical("Enable", false);
                }
                else
                {
                    selectPart0.GetProperties().SetLogical("Enable", false);
                    nativeFolderBrowser0.GetProperties().SetLogical("Enable", true);
                }
            }
            else if(block == toggle01)
            {
                if (toggle01.GetProperties().GetLogical("Value"))
                {
                    toggle0.GetProperties().SetLogical("Enable", false);
                    selectPart0.GetProperties().SetLogical("Enable", false);
                    nativeFolderBrowser0.GetProperties().SetLogical("Enable", false);
                }
                else if (!toggle01.GetProperties().GetLogical("Value"))
                {
                    toggle0.GetProperties().SetLogical("Enable", true);
                    selectPart0.GetProperties().SetLogical("Enable", false);
                    nativeFolderBrowser0.GetProperties().SetLogical("Enable", true);
                }
            }
            else if(block == button0)
            {

              
                NXOpen.TaggedObject[] thept = selectPart0.GetProperties().GetTaggedObjectVector("SelectedObjects");//存放所有选择的部件
                theoripmi = selection0.GetProperties().GetTaggedObjectVector("SelectedObjects");  //需要校核的尺寸
                if (theoripmi.Length == 0)
                {
                    theUI.NXMessageBox.Show("未选择封闭环", NXMessageBox.DialogType.Error, "请先选择需要校核的尺寸");
                    return 1;
                }
                if(!toggle01.GetProperties().GetLogical("Value") )//undone

                {
                    string path = nativeFolderBrowser0.GetProperties().GetString("Path");
                    if ((path == "") && thept.Length == 0)
                    {
                        theUI.NXMessageBox.Show("未选择校核尺寸类型", NXMessageBox.DialogType.Error, "请点选“校核设计尺寸”，或进行工序间尺寸链校核");
                        return 1;
                    }
                }
                NXOpen.Annotations.Dimension theoridim = Tag2NXObject<NXOpen.Annotations.Dimension>(theoripmi[0].Tag);
               
                xformone = creataxis(theoridim);//需要校核的尺寸所生成的轴
                if(xformone == null)
                {

                    return 1;
                }
                hideit((NXObject)xformone);//隐藏需要校核的尺寸所生成的轴
                finalx = theoridim.GetRealAttribute("X");
                finaly = theoridim.GetRealAttribute("Y");
                finalz = theoridim.GetRealAttribute("Z");
                Part thework = theSession.Parts.Work;//当前工作部件的路径 
                if (!toggle01.GetProperties().GetLogical("Value"))
                {

                    if (!selectPart0.GetProperties().GetLogical("Enable"))
                    {
                        #region
                        ArrayList prtnameary = new ArrayList();//存放所有在工艺文件夹下的prt的全路径
                        string path = nativeFolderBrowser0.GetProperties().GetString("Path");

                        prtnameary = getpartlist(path);//得到所有在工艺文件夹下的prt的全路径

                        string workpath = thework.FullPath;

                        foreach (NXOpen.Annotations.Dimension workdim in thework.Dimensions)
                        {

                            dimary.Add(workdim);//如果以后出错，可能这里我把displaypart当成了workpart

                        }
                        theuf = UFSession.GetUFSession();
                        Part thetempart = null;//这个存放每个暂时打开的prt文件，然后收集其中的PMI尺寸
                        foreach (string loadpath in prtnameary)
                        {
                            if (loadpath != workpath)
                            {
                                if (theuf.Part.IsLoaded(loadpath) != 0)//0为未打开
                                {
                                    Tag tag = theuf.Part.AskPartTag(loadpath);
                                    if (tag == 0)
                                    {
                                        throw new Exception("无法载入" + loadpath);
                                        //return null;
                                    }
                                    else
                                    {
                                        thetempart = Tag2NXObject<NXOpen.Part>(tag);
                                        partpool.Add(thetempart);
                                        //partpool.Add(Tag2NXObject<NXOpen.Part>(tag));

                                    }
                                }
                                else
                                {
                                    PartLoadStatus loadcondition;
                                    //Part thetempart;//这个存放每个暂时打开的prt文件，然后收集其中的PMI尺寸

                                    thetempart = theSession.Parts.Open(loadpath, out loadcondition);
                                    //NXOpen.PartCollection.//一定要解决这个问题
                                    partpool.Add(thetempart);
                                }
                                if (thetempart.Dimensions.ToArray().Length != 0)
                                {
                                    foreach (NXOpen.Annotations.Dimension eachdim in thetempart.Dimensions.ToArray())
                                    {
                                        dimary.Add(eachdim);
                                        FileInfo prtname = new FileInfo(loadpath);
                                        string realprtname = prtname.Name;
                                        eachdim.SetAttribute("所属部件", realprtname);
                                    }
                                }
                            }
                        }
                        List<int[]> nene;
                        foreach (NXOpen.Annotations.Dimension a in dimary)
                        {
                            string finalstr = null;
                            a.SetAttribute("temp", "temp");
                            if (a != theoridim)//如果遍历的尺寸不等于需要校核的尺寸，则把他加入到thedown中，起名字太难了。
                            {
                                NXObject.AttributeInformation[] attrinfo = null;
                                attrinfo = a.GetAttributeTitlesByType(NXObject.AttributeType.Any);
                                bool reslt;
                                string mm = null;
                                foreach (NXObject.AttributeInformation inf in attrinfo)
                                {

                                    mm = inf.Title;
                                    finalstr = finalstr + mm.ToString();

                                }
                                if (finalstr.Contains("XYZ"))
                                {
                                    thedown.Add(a);
                                }

                                reslt = false;
                            }
                            a.DeleteAttributeByTypeAndTitle(NXObject.AttributeType.Any, "temp");
                        }
                        left = (NXOpen.Annotations.Dimension[])thedown.ToArray(typeof(NXOpen.Annotations.Dimension));//把动态数组转化成数组
                        int[] arr = new int[left.Length];//下面这个for循环定义了一个索引数组，里面存放的是left这个数组的索引。一一对应
                        for (int i = 0; i < arr.Length; i++)
                        {
                            arr[i] = i;
                        }
                        if (left.Length == 0 || left.Length == 1)
                        {
                            theUI.NXMessageBox.Show("该工序内尺寸太少", NXOpen.NXMessageBox.DialogType.Warning, "该工序内矢量尺寸数量小于2，无须进行尺寸链校核");
                            return 1;
                        }
                        for (int t = 2; t <= left.Length; t++)//该循环从2开始，因为一个尺寸连最起码有三个，它也有可能达到left数组的长度。
                        {

                            nene = Algorithms.PermutationAndCombination<int>.GetCombination(arr, t);//nene是每一次循环得到的结果，如果直接用nene参与下一步计算，以前的循环结果就作废了
                            foreach (int[] ne in nene)
                            {
                                lst_Combination.Add(ne);
                            }

                        }

                        foreach (int[] a in lst_Combination)//遍历list里面存的索引数组
                        {
                            theday.Clear();
                            for (int j = 0; j < a.Length; j++)//下面这个for循环从索引得到对应的dimension数组。
                            {

                                theday.Add(left[a[j]]);//这一步有问题。。。。。妈的。------这里一个小错误就让我调试了一早上
                                // thefinalori[j] = left[j];//得到索引所表示的数组

                            }
                            thefinalori = (NXOpen.Annotations.Dimension[])theday.ToArray(typeof(NXOpen.Annotations.Dimension));
                            if (checknow(thefinalori))//如果成环的话。。。。almost there
                            {
                                finaloneinpro.Add(thefinalori);//这个list存放的是所有和需校核尺寸成环的尺寸链，记住其里面的每个元素是一个尺寸数组

                            };

                        }
                        count ct = new count();
                        ArrayList zengzu = new ArrayList();
                        ArrayList jianzu = new ArrayList();
                        NXOpen.BlockStyler.Node finalnode = null;
                        #region
                        foreach (NXOpen.Annotations.Dimension[] ori in finaloneinpro)//这部分终于搞定了。哈哈，很高兴啊。
                        {
                            jianzu.Clear();
                            zengzu.Clear();
                            finalnode = tree_control0.CreateNode("成环尺寸链");
                            tree_control0.InsertNode(finalnode, null, null, Tree.NodeInsertOption.Last);
                            NXOpen.BlockStyler.Node finalchild = null;
                            double[] final = { 0, 0, 0 };
                            #region
                            foreach (NXOpen.Annotations.Dimension sda in ori)
                            {
                                finalchild = tree_control0.CreateNode("组成环");
                                DataContainer nodeData = finalchild.GetNodeData();
                                int p = 0;

                                nodeData.AddTaggedObject("Data", sda);
                                nodeData.Dispose();
                                tree_control0.InsertNode(finalchild, finalnode, null, Tree.NodeInsertOption.Last);
                                p = cirdect(sda);
                                if (p == -1)
                                {

                                    finalchild.SetColumnDisplayText(5, "增环");
                                    //jianzu.Add(sda);
                                    zengzu.Add(sda);
                                }
                                if (p == 1)
                                {
                                    finalchild.SetColumnDisplayText(5, "减环");
                                    //zengzu.Add(sda);
                                    jianzu.Add(sda);
                                }
                                if (p == 0)
                                {
                                    finalchild.SetColumnDisplayText(5, "对封闭环无贡献");
                                }
                                final = ct.getspec(sda);
                                finalchild.SetColumnDisplayText(2, final[0].ToString());
                                finalchild.SetColumnDisplayText(3, final[1].ToString());
                                finalchild.SetColumnDisplayText(4, final[2].ToString());
                                Part sdapart = (Part)sda.OwningPart;
                                FileInfo sdafile = new FileInfo(sdapart.FullPath);
                                string prtname = sdafile.Name;
                                finalchild.SetColumnDisplayText(6, prtname);
                            }
                            #endregion
                            zengshuzu = (NXOpen.Annotations.Dimension[])zengzu.ToArray(typeof(NXOpen.Annotations.Dimension));
                            jianshuzu = (NXOpen.Annotations.Dimension[])jianzu.ToArray(typeof(NXOpen.Annotations.Dimension));
                            double a = 0;
                            double b = 0;

                            if (ct.countcircle(zengshuzu, jianshuzu, out a, out b))
                            {
                                //tree_control0.InsertColumn(1, "尺寸链", 100);//一定有注意不同的回调函数的问题
                                //finalchild.SetColumnDisplayText(3, final[1].ToString() + "/" + a.ToString());
                                //finalchild.SetColumnDisplayText(4, final[2].ToString() + "/" + b.ToString());
                                finalnode.SetColumnDisplayText(1, "符合尺寸链规则");
                                finalnode.ForegroundColor = 60;//红色表示未通过尺寸链校核
                                finalnode.SetColumnDisplayText(3, a.ToString());
                                finalnode.SetColumnDisplayText(4, b.ToString());
                            }
                            else
                            {
                                finalnode.SetColumnDisplayText(1, "不符合尺寸链规则");
                                finalnode.ForegroundColor = 198;
                                //finalchild.SetColumnDisplayText(3, final[1].ToString() + "/" + a.ToString());
                                //finalchild.SetColumnDisplayText(4, final[2].ToString() + "/" + b.ToString());
                                finalnode.SetColumnDisplayText(3, a.ToString());
                                finalnode.SetColumnDisplayText(4, b.ToString());
                            }

                        }


                        count thect = new count();
                        double aa = 0;
                        double bb = 0;
                        //thect.countcircle(theoridim, zengshuzu, jianshuzu, out aa, out bb);
                        if (zengshuzu == null && jianshuzu == null)
                        {
                            theUI.NXMessageBox.Show("未找到结果", NXOpen.NXMessageBox.DialogType.Warning, "未查找到与此尺寸成环的尺寸");
                            return 1;
                        }
                        else
                        {
                            thect.countcircle(zengshuzu, jianshuzu, out aa, out bb);
                            form1 theform1 = new form1(zengshuzu, jianshuzu, theoridim, aa, bb);
                            //theform1.ShowDialog();
                            theform1.Show();
                        }
                        #endregion
                    }
                        #endregion
                    #region
                    else
                    {

                        NXOpen.TaggedObject[] partcol = selectPart0.GetProperties().GetTaggedObjectVector("SelectedObjects");//存放所有选择的部件
                        //NXOpen.Part[] realpart = null;
                        ArrayList realpart = new ArrayList();
                        //NXOpen.Annotations.Dimension theoridim = Tag2NXObject<NXOpen.Annotations.Dimension>(theoripmi[0].Tag);
                        for (int i = 0; i < partcol.Length; i++)
                        {
                            //realpart[i] = Tag2NXObject<NXOpen.Part>(partcol[i].Tag);//将他们转换成part数组
                            realpart.Add(Tag2NXObject<NXOpen.Part>(partcol[i].Tag));
                        }
                        foreach (NXOpen.Part eachpart in realpart)
                        {
                            foreach (NXOpen.Annotations.Dimension eachdim in eachpart.Dimensions.ToArray())
                            {

                                dimary.Add(eachdim);

                            }

                        }
                        foreach (NXOpen.Annotations.Dimension a in dimary)
                        {
                            string finalstr = null;
                            a.SetAttribute("temp", "temp");
                            if (a != theoridim)//如果遍历的尺寸不等于需要校核的尺寸，则把他加入到thedown中，起名字太难了。
                            {
                                NXObject.AttributeInformation[] attrinfo = null;
                                attrinfo = a.GetAttributeTitlesByType(NXObject.AttributeType.Any);
                                bool reslt;
                                string mm = null;
                                foreach (NXObject.AttributeInformation inf in attrinfo)
                                {

                                    mm = inf.Title;
                                    finalstr = finalstr + mm.ToString();

                                }
                                if (finalstr.Contains("XYZ"))
                                {
                                    thedown.Add(a);
                                }

                                reslt = false;
                            }
                            a.DeleteAttributeByTypeAndTitle(NXObject.AttributeType.Any, "temp");
                        }
                        List<int[]> nene;
                        left = (NXOpen.Annotations.Dimension[])thedown.ToArray(typeof(NXOpen.Annotations.Dimension));//把动态数组转化成数组
                        int[] arr = new int[left.Length];//下面这个for循环定义了一个索引数组，里面存放的是left这个数组的索引。一一对应
                        for (int i = 0; i < arr.Length; i++)
                        {
                            arr[i] = i;
                        }
                        if (left.Length == 0 || left.Length == 1)
                        {
                            theUI.NXMessageBox.Show("该工序内尺寸太少", NXOpen.NXMessageBox.DialogType.Warning, "该工序内尺寸小于2，无法进行尺寸链校核");
                            return 1;

                        }
                        for (int t = 2; t <= left.Length; t++)//该循环从2开始，因为一个尺寸连最起码有三个，它也有可能达到left数组的长度。
                        {

                            nene = Algorithms.PermutationAndCombination<int>.GetCombination(arr, t);//nene是每一次循环得到的结果，如果直接用nene参与下一步计算，以前的循环结果就作废了
                            foreach (int[] ne in nene)
                            {
                                lst_Combination.Add(ne);
                            }

                        }

                        foreach (int[] a in lst_Combination)//遍历list里面存的索引数组
                        {
                            theday.Clear();
                            for (int j = 0; j < a.Length; j++)//下面这个for循环从索引得到对应的dimension数组。
                            {

                                theday.Add(left[a[j]]);//这一步有问题。。。。。妈的。------这里一个小错误就让我调试了一早上
                                // thefinalori[j] = left[j];//得到索引所表示的数组

                            }
                            thefinalori = (NXOpen.Annotations.Dimension[])theday.ToArray(typeof(NXOpen.Annotations.Dimension));
                            if (checknow(thefinalori))//如果成环的话。。。。almost there
                            {
                                finaloneinpro.Add(thefinalori);//这个list存放的是所有和需校核尺寸成环的尺寸链，记住其里面的每个元素是一个尺寸数组

                            };

                        }
                        count ct = new count();
                        ArrayList zengzu = new ArrayList();
                        ArrayList jianzu = new ArrayList();
                        //NXOpen.Annotations.Dimension[] zengshuzu = null;
                        //NXOpen.Annotations.Dimension[] jianshuzu = null;
                        NXOpen.BlockStyler.Node finalnode = null;
                        foreach (NXOpen.Annotations.Dimension[] ori in finaloneinpro)//这部分终于搞定了。哈哈，很高兴啊。
                        {
                            jianzu.Clear();
                            zengzu.Clear();
                            finalnode = tree_control0.CreateNode("成环尺寸链");
                            tree_control0.InsertNode(finalnode, null, null, Tree.NodeInsertOption.Last);
                            NXOpen.BlockStyler.Node finalchild = null;
                            double[] final = { 0, 0, 0 };

                            foreach (NXOpen.Annotations.Dimension sda in ori)
                            {
                                finalchild = tree_control0.CreateNode("组成环");
                                DataContainer nodeData = finalchild.GetNodeData();
                                int p = 0;

                                nodeData.AddTaggedObject("Data", sda);
                                nodeData.Dispose();
                                tree_control0.InsertNode(finalchild, finalnode, null, Tree.NodeInsertOption.Last);
                                p = cirdect(sda);
                                if (p == -1)
                                {

                                    finalchild.SetColumnDisplayText(5, "增环");
                                    //jianzu.Add(sda);
                                    zengzu.Add(sda);
                                }
                                if (p == 1)
                                {
                                    finalchild.SetColumnDisplayText(5, "减环");
                                    //zengzu.Add(sda);
                                    jianzu.Add(sda);
                                }
                                if (p == 0)
                                {
                                    finalchild.SetColumnDisplayText(5, "对封闭环无贡献");
                                }
                                final = ct.getspec(sda);
                                finalchild.SetColumnDisplayText(2, final[0].ToString());
                                finalchild.SetColumnDisplayText(3, final[1].ToString());
                                finalchild.SetColumnDisplayText(4, final[2].ToString());
                                Part sdapart = (Part)sda.OwningPart;
                                FileInfo sdafile = new FileInfo(sdapart.FullPath);
                                string prtname = sdafile.Name;
                                finalchild.SetColumnDisplayText(6, prtname);
                            }
                            zengshuzu = (NXOpen.Annotations.Dimension[])zengzu.ToArray(typeof(NXOpen.Annotations.Dimension));
                            jianshuzu = (NXOpen.Annotations.Dimension[])jianzu.ToArray(typeof(NXOpen.Annotations.Dimension));
                            double a = 0;
                            double b = 0;
                            if (ct.countcircle(zengshuzu, jianshuzu, out a, out b))
                            {
                                finalnode.SetColumnDisplayText(1, "符合尺寸链规则");
                                finalnode.ForegroundColor = 60;//绿色部分表示符合尺寸链规则
                                //finalchild.SetColumnDisplayText(3, final[1].ToString() + "/" + a.ToString());
                                //finalchild.SetColumnDisplayText(4, final[2].ToString() + "/" + b.ToString());
                                finalnode.SetColumnDisplayText(3, a.ToString());
                                finalnode.SetColumnDisplayText(4, b.ToString());
                            }
                            else
                            {
                                finalnode.SetColumnDisplayText(1, "不符合尺寸链规则");
                                finalnode.ForegroundColor = 198;
                                //finalchild.SetColumnDisplayText(4, final[2].ToString() + "/" + b.ToString());
                                //finalchild.SetColumnDisplayText(3, final[1].ToString() + "/" + a.ToString());
                                finalnode.SetColumnDisplayText(3, a.ToString());
                                finalnode.SetColumnDisplayText(4, b.ToString());

                            }

                        }
                        count thect = new count();
                        double aa = 0;
                        double bb = 0;
                        //thect.countcircle(theoridim, zengshuzu, jianshuzu, out aa, out bb);
                        if (zengshuzu == null && jianshuzu == null)
                        {
                            theUI.NXMessageBox.Show("未找到结果", NXOpen.NXMessageBox.DialogType.Warning, "未查找到与此尺寸成环的尺寸");
                            return 1;
                        }
                        else
                        {
                            thect.countcircle(zengshuzu, jianshuzu, out aa, out bb);
                            form1 theform1 = new form1(zengshuzu, jianshuzu, theoridim, aa, bb);
                            //theform1.ShowDialog();
                            theform1.Show();
                        }

                    }
                }
                else if(toggle01.GetProperties().GetLogical("Value"))
                {
                    NXOpen.Annotations.Dimension[] dimary = null;
                    List<int[]> nene;
                    //下面这段得到一个数组，这个数组里面有除过要校核的尺寸之外所有的尺寸。-------下面这个是在整个工序内进行判断
                    dimary = theSession.Parts.Work.Dimensions.ToArray();

                    foreach (NXOpen.Annotations.Dimension a in dimary)
                    {
                        string finalstr = null;
                        a.SetAttribute("temp", "temp");
                        if (a != theoridim)//如果遍历的尺寸不等于需要校核的尺寸，则把他加入到thedown中，起名字太难了。
                        {
                            NXObject.AttributeInformation[] attrinfo = null;
                            attrinfo = a.GetAttributeTitlesByType(NXObject.AttributeType.Any);
                            bool reslt;
                            string mm = null;
                            foreach (NXObject.AttributeInformation inf in attrinfo)
                            {

                                mm = inf.Title;
                                finalstr = finalstr + mm.ToString();

                            }
                            if (finalstr.Contains("XYZ"))
                            {
                                thedown.Add(a);
                            }

                            reslt = false;
                        }
                        a.DeleteAttributeByTypeAndTitle(NXObject.AttributeType.Any, "temp");
                    }

                    left = (NXOpen.Annotations.Dimension[])thedown.ToArray(typeof(NXOpen.Annotations.Dimension));//把动态数组转化成数组
                    if (left.Length == 0 || left.Length == 1)
                    {
                        theUI.NXMessageBox.Show("该工序内尺寸太少", NXOpen.NXMessageBox.DialogType.Warning, "该工序内尺寸小于2，无法进行尺寸链校核");
                        return 1;
                    
                    }
                    int[] arr = new int[left.Length];//下面这个for循环定义了一个索引数组，里面存放的是left这个数组的索引。一一对应
                    for (int i = 0; i < arr.Length; i++)
                    {
                        arr[i] = i;
                    }
                    for (int t = 2; t <= left.Length; t++)//该循环从2开始，因为一个尺寸连最起码有三个，它也有可能达到left数组的长度。
                    {

                        nene = Algorithms.PermutationAndCombination<int>.GetCombination(arr, t);//nene是每一次循环得到的结果，如果直接用nene参与下一步计算，以前的循环结果就作废了
                        foreach (int[] ne in nene)
                        {
                            lst_Combination.Add(ne);
                        }

                    }

                    foreach (int[] a in lst_Combination)//遍历list里面存的索引数组
                    {
                        theday.Clear();
                        for (int j = 0; j < a.Length; j++)//下面这个for循环从索引得到对应的dimension数组。
                        {

                            theday.Add(left[a[j]]);//这一步有问题。。。。。妈的。------这里一个小错误就让我调试了一早上
                            // thefinalori[j] = left[j];//得到索引所表示的数组

                        }
                        thefinalori = (NXOpen.Annotations.Dimension[])theday.ToArray(typeof(NXOpen.Annotations.Dimension));
                        if (checknow(thefinalori))//如果成环的话。。。。almost there
                        {
                            finaloneinpro.Add(thefinalori);//这个list存放的是所有和需校核尺寸成环的尺寸链，记住其里面的每个元素是一个尺寸数组

                        };

                    }
                    count ct = new count();
                    ArrayList zengzu = new ArrayList();
                    ArrayList jianzu = new ArrayList();
                    NXOpen.Annotations.Dimension[] zengshuzu = null;
                    NXOpen.Annotations.Dimension[] jianshuzu = null;
                    NXOpen.BlockStyler.Node finalnode = null;
                    foreach (NXOpen.Annotations.Dimension[] ori in finaloneinpro)//这部分终于搞定了。哈哈，很高兴啊。
                    {
                        jianzu.Clear();
                        zengzu.Clear();
                        finalnode = tree_control0.CreateNode("成环尺寸链");
                        tree_control0.InsertNode(finalnode, null, null, Tree.NodeInsertOption.Last);
                        foreach (NXOpen.Annotations.Dimension sda in ori)
                        {
                            NXOpen.BlockStyler.Node finalchild = tree_control0.CreateNode("组成环");
                            DataContainer nodeData = finalchild.GetNodeData();
                            int p = 0;
                            double[] final = { 0, 0, 0 };
                            nodeData.AddTaggedObject("Data", sda);
                            nodeData.Dispose();
                            tree_control0.InsertNode(finalchild, finalnode, null, Tree.NodeInsertOption.Last);
                            p = cirdect(sda);
                            if (p == -1)
                            {

                                finalchild.SetColumnDisplayText(5, "增环");
                                //jianzu.Add(sda);
                                zengzu.Add(sda);
                            }
                            if (p == 1)
                            {
                                finalchild.SetColumnDisplayText(5, "减环");
                                //zengzu.Add(sda);
                                jianzu.Add(sda);
                            }
                            if (p == 0)
                            {
                                finalchild.SetColumnDisplayText(5, "对封闭环无贡献");
                            }
                            final = ct.getspec(sda);
                            finalchild.SetColumnDisplayText(2, final[0].ToString());
                            finalchild.SetColumnDisplayText(3, final[1].ToString());
                            finalchild.SetColumnDisplayText(4, final[2].ToString());
                        }
                        zengshuzu = (NXOpen.Annotations.Dimension[])zengzu.ToArray(typeof(NXOpen.Annotations.Dimension));
                        jianshuzu = (NXOpen.Annotations.Dimension[])jianzu.ToArray(typeof(NXOpen.Annotations.Dimension));
                        double a = 0;
                        double b = 0;
                        if (ct.countcircle(theoridim,zengshuzu, jianshuzu, out a, out b))
                        {
                            //tree_control0.InsertColumn(1, "尺寸链", 100);//一定有注意不同的回调函数的问题

                            finalnode.SetColumnDisplayText(1, "符合尺寸链规则");
                            finalnode.ForegroundColor = 60;//绿色部分表示符合尺寸链规则
                            //finalchild.SetColumnDisplayText(3, final[1].ToString() + "/" + a.ToString());
                            //finalchild.SetColumnDisplayText(4, final[2].ToString() + "/" + b.ToString());
                            finalnode.SetColumnDisplayText(3, a.ToString());
                            finalnode.SetColumnDisplayText(4, b.ToString());
                        }
                        else
                        {
                            finalnode.SetColumnDisplayText(1, "不符合尺寸链规则");
                            finalnode.ForegroundColor = 198;
                            //finalchild.SetColumnDisplayText(4, final[2].ToString() + "/" + b.ToString());
                            //finalchild.SetColumnDisplayText(3, final[1].ToString() + "/" + a.ToString());
                            finalnode.SetColumnDisplayText(3, a.ToString());
                            finalnode.SetColumnDisplayText(4, b.ToString());

                        }

                        
                    }
                    if (zengshuzu == null && jianshuzu == null)
                    {
                        theUI.NXMessageBox.Show("未找到结果", NXOpen.NXMessageBox.DialogType.Warning, "未查找到与此尺寸成环的尺寸");
                        return 1;
                    }
                }
              

                #endregion
            }
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    public void Exclefunction(string path)
    {
        try
        {
            StopProcess("Excel");
            //string excelOpenFileName = "E:\\gitest410proj\\prt\\pmi.xls";
            string excelOpenFileName = ApplicationPath + folderpath + pmixlspath;


            if (File.Exists(excelOpenFileName))
            {
                File.Delete(excelOpenFileName);

            }

            Microsoft.Office.Interop.Excel.Application excelApplication = new ApplicationClass();
            excelApplication.Application.Workbooks.Add(true);
            Microsoft.Office.Interop.Excel.Workbook excelWorkBook = (Microsoft.Office.Interop.Excel.Workbook)excelApplication.ActiveWorkbook;
            Microsoft.Office.Interop.Excel.Worksheet excelWorkSheet = (Microsoft.Office.Interop.Excel.Worksheet)excelWorkBook.ActiveSheet;

            excelWorkBook.SaveAs(excelOpenFileName, 56, Type.Missing, Type.Missing, Type.Missing, Type.Missing, XlSaveAsAccessMode.xlNoChange, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
            //56是属性值

            XmlDocument doc = new XmlDocument();
            doc.Load(path);
            XmlNode node = doc.SelectSingleNode("/root");

            int m = doc.SelectSingleNode("/root").ChildNodes.Count;
            string[] note = { "PMI 名称", "校核人员姓名", "修改后该PMI最大极限尺寸", "修改后该PMI最小极限尺寸", "补偿环信息名义值", "补偿环信息上公差", " 补偿环信息下公差", "补偿环信息所属部件", "组成环名义值", "组成环上公差", "组成环下公差", "增减环", "组成环所在部件" };
            List<string> kk = new List<string>();
            kk.AddRange(note);
            excelWorkSheet.Cells.ColumnWidth = 20;
            for (int ii = 1; ii < kk.Count + 1; ii++)
            {
                Microsoft.Office.Interop.Excel.Range excelRange0 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[1, ii];//cell的具体值
                excelRange0.Value2 = kk[ii - 1].ToString();

                excelRange0 = null;
            }
            int n = 0;
            int j = 2;
            int num = 1;
            for (int i = 1; i < m + 1; i++)
            {

                XmlNode nodepmi = doc.SelectSingleNode("/root/pmi[" + i + "]");
                j = j + n;
                n = doc.SelectSingleNode("/root/pmi[" + i + "]").ChildNodes.Count;
                Microsoft.Office.Interop.Excel.Range excelRange0 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[j, 1];//cell的具体值
                excelRange0.Value2 = nodepmi.Attributes["name"].Value.ToString();
                excelRange0 = null;
                for (int k = 1; k < n + 1; k++)
                {
                    num = num + 1;
                    XmlNode node2 = doc.SelectSingleNode("/root/pmi[" + i + "]/校核人员[" + k + "]");
                    XmlNode node3 = doc.SelectSingleNode("/root/pmi[" + i + "]/校核人员[" + k + "]/补偿环信息");
                    XmlNode node4 = doc.SelectSingleNode("/root/pmi[" + i + "]/校核人员[" + k + "]/组成环1");
                    Microsoft.Office.Interop.Excel.Range excelRange01 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 2];//cell的具体值
                    excelRange01.Value2 = node2.Attributes["姓名"].Value.ToString();
                    excelRange01 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange02 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 3];//cell的具体值
                    excelRange02.Value2 = node2.Attributes["修改后该PMI最大极限尺寸"].Value.ToString();
                    excelRange02 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange03 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 4];//cell的具体值
                    excelRange03.Value2 = node2.Attributes["修改后该PMI最小极限尺寸"].Value.ToString();
                    excelRange03 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange04 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 5];//cell的具体值
                    excelRange04.Value2 = node3.Attributes["名义值"].Value.ToString();
                    excelRange04 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange05 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 6];//cell的具体值
                    excelRange05.Value2 = node3.Attributes["上公差"].Value.ToString();
                    excelRange05 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange06 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 7];//cell的具体值
                    excelRange06.Value2 = node3.Attributes["下公差"].Value.ToString();
                    excelRange06 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange07 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 8];//cell的具体值
                    excelRange07.Value2 = node3.Attributes["所属部件"].Value.ToString();
                    excelRange07 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange08 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 9];//cell的具体值
                    excelRange08.Value2 = node4.Attributes["名义值"].Value.ToString();
                    excelRange08 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange09 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 10];//cell的具体值
                    excelRange09.Value2 = node4.Attributes["上公差"].Value.ToString();
                    excelRange09 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange10 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 11];//cell的具体值
                    excelRange10.Value2 = node4.Attributes["下公差"].Value.ToString();
                    excelRange10 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange11 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 12];//cell的具体值
                    excelRange11.Value2 = node4.Attributes["增减环"].Value.ToString();
                    excelRange11 = null;
                    Microsoft.Office.Interop.Excel.Range excelRange12 = (Microsoft.Office.Interop.Excel.Range)excelWorkSheet.Cells[num, 13];//cell的具体值
                    excelRange12.Value2 = node4.Attributes["所在部件"].Value.ToString();
                    excelRange12 = null;

                }


            }


            excelWorkSheet.Name = "报表";


            excelWorkBook.Save();
            excelWorkBook.Close();
            excelApplication.Quit();
            StopProcess("Excel");
        }
        catch (Exception ex)
        {
            NXOpen.UI.GetUI().NXMessageBox.Show("s", NXMessageBox.DialogType.Error, ex.ToString());
        }




    }
    public static void StopProcess(string processName)
    {
        try
        {
            Process[] ps = System.Diagnostics.Process.GetProcessesByName(processName);
            foreach (Process p in ps)
            {
                p.Kill();
            }

        }
        catch (Exception ex)
        {

            throw ex;
        }

    }
    //public static T Tag2NXObject<T>(Tag tag)
    //{
    //    try
    //    {
    //        object to = NXOpen.Utilities.NXObjectManager.Get(tag);
    //        return (T)to;
    //    }
    //    catch (System.Exception ex)
    //    {
    //        UI.GetUI().NXMessageBox.Show("Message", NXMessageBox.DialogType.Error, ex.Message);
    //        return default(T);
    //    }
    //}
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
        }
        catch (Exception ex)
        {
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    public NXObject shank(NXOpen.Point point1, NXOpen.Point point2)
    {
        Part workPart = theSession.Parts.Work;
        NXObject shanker;
        NXOpen.Features.Feature nullFeatures_Feature = null;
        NXOpen.Features.DatumAxisBuilder abuilder;
        abuilder = workPart.Features.CreateDatumAxisBuilder(nullFeatures_Feature);
        abuilder.ArcLength.Expression.RightHandSide = "0";
        abuilder.Type = NXOpen.Features.DatumAxisBuilder.Types.TwoPoints;
        abuilder.IsAssociative = true;
        Xform nullXform = null;
       //NXOpen.Point pt1 = workPart.Points.CreatePoint(point1, nullXform, NXOpen.SmartObject.UpdateOption.WithinModeling);
       //NXOpen.Point pt2 = workPart.Points.CreatePoint(point2, nullXform, NXOpen.SmartObject.UpdateOption.WithinModeling);
        abuilder.Point1 = point1;
        abuilder.Point2 = point2;
        shanker = abuilder.Commit();
        abuilder.Destroy();

        return shanker;

    }
    public DatumAxis creataxis(NXOpen.Annotations.Dimension dimen)//这个函数直接从一个dimension得到一个它的轴
    {
        Part workPart = theSession.Parts.Work;
        double startx = 0;
        double starty = 0;
        double startz = 0;
        double endx = 0;
        double endy = 0;
        double endz = 0;
        try
        {
            startx = dimen.GetRealAttribute("START-X");
            starty = dimen.GetRealAttribute("START-Y");
            startz = dimen.GetRealAttribute("START-Z");
            endx = dimen.GetRealAttribute("END-X");
            endy = dimen.GetRealAttribute("END-Y");
            endz = dimen.GetRealAttribute("END-Z");
        }
        catch
        {
            theUI.NXMessageBox.Show("提示", NXOpen.NXMessageBox.DialogType.Warning, "尺寸矢量信息丢失");

            return null;
        }
        Point3d stpt;
        stpt.X = startx;
        stpt.Y = starty;
        stpt.Z = startz;
        Point3d endpt;
        endpt.X = endx;
        endpt.Y = endy;
        endpt.Z = endz;
        NXOpen.Point realstart = workPart.Points.CreatePoint(stpt);//得到这个PMI矢量的起点
        NXOpen.Point realend = workPart.Points.CreatePoint(endpt);//得到这个PMI矢量的终点
        NXOpen.Features.DatumAxisFeature fiansis = (NXOpen.Features.DatumAxisFeature)shank(realstart, realend);
        // fiansis.DatumAxis;
        DatumAxis fian = fiansis.DatumAxis;
        return fian;
    }
    public double anglemethod(DatumAxis a, DatumAxis b)
    {

        Part workPart = theSession.Parts.Work;
        NXObject nullNXObject = null;
        MeasureAngleBuilder bbuilder;
        bbuilder = workPart.MeasureManager.CreateMeasureAngleBuilder(nullNXObject);
        bbuilder.Object1.Value = a;
        bbuilder.Object2.Value = b;
        Unit nullUnit = null;
        MeasureAngle measureAngle1;
        measureAngle1 = workPart.MeasureManager.NewAngle(nullUnit, a, NXOpen.MeasureManager.EndpointType.None, b, NXOpen.MeasureManager.EndpointType.None, true, false);
        double deg = measureAngle1.Value;
        return deg;
    }
    public static double ConvertDegreesToRadians(double degrees)//角度到弧度的转换方法
    {
        double radians = (Math.PI / 180) * degrees;
        // return (radians);
        return radians;//return 的这两种写法都是可以的
    }
    public void hideit(NXObject objtohide)//////这是一个隐藏NXObject的方法
    {
        DisplayableObject a = (DisplayableObject)objtohide;
        DisplayableObject[] objects1 = new DisplayableObject[1];
        objects1[0] = a;
        theSession.DisplayManager.BlankObjects(objects1);

    }
    static List<int[]> GetPermutation(int h, int t)
    {
        int[] result = new int[t];
        for (int i = 0; i < result.Length; i++)
        {
            result[i] = i;
        }
        List<int[]> resultlist = new List<int[]>();
        resultlist.Add(result);
        while (result != null)
        {
            result = GetNextResult(result, h);
            if (result != null)
            {
                resultlist.Add(result);
            }
        }
        return resultlist;
    }
    static int[] GetNextResult(int[] result, int h)
    {
        int[] nextresult = new int[result.Length];
        result.CopyTo(nextresult, 0);
        bool bAdd = true;
        for (int i = result.Length - 1; i >= 0; i--)
        {

            if (bAdd)
            {

                nextresult[i] = result[i] + 1;

                bAdd = false;
            }
            else
            {
                nextresult[i] = result[i];
            }


            List<int> checkrepeat = new List<int>(nextresult);
            checkrepeat.RemoveAt(i);
            while (checkrepeat.Contains(nextresult[i]))
            {
                nextresult[i]++;
            }

            if (nextresult[i] >= h)
            {
                if (i == 0) return null;
                bAdd = true;
                nextresult[i] = 0;
                checkrepeat.RemoveAt(i);
                while (checkrepeat.Contains(nextresult[i]))
                {
                    nextresult[i]++;
                }
            }
        }


        return nextresult;
    }
    public bool checknow(NXOpen.Annotations.Dimension[] finalallpmi)//这个函数判断这个dimension数组是否和要校核的尺寸成环
    {
        for (int i = 0; i < finalallpmi.Length; i++)
        {

            NXOpen.Annotations.Dimension ok = Tag2NXObject<NXOpen.Annotations.Dimension>(finalallpmi[i].Tag);
            finalx = finalx + ok.GetRealAttribute("X");
            finaly = finaly + ok.GetRealAttribute("Y");
            finalz = finalz + ok.GetRealAttribute("Z");
            // dimarylist.Add(ok);

        }
        bool wetx = (Math.Abs(finalx)) <= 0.000000000001;
        bool wety = (Math.Abs(finaly)) <= 0.000000000001;
        bool wetz = (Math.Abs(finalz)) <= 0.000000000001;
        bool puanduan = (wetx && wety && wetz);
        theoripmi = selection0.GetProperties().GetTaggedObjectVector("SelectedObjects");  //需要校核的尺寸
        NXOpen.Annotations.Dimension theoridim = Tag2NXObject<NXOpen.Annotations.Dimension>(theoripmi[0].Tag);
        finalx = theoridim.GetRealAttribute("X");
        finaly = theoridim.GetRealAttribute("Y");
        finalz = theoridim.GetRealAttribute("Z");
        return puanduan;
    }
    public void setappendzeng(NXOpen.Annotations.Dimension zengdim)//true为增环，false为减环,zengdim为要加文本的
    {

        Part workPart = theSession.Parts.Work;
        Part displayPart = theSession.Parts.Display;
        NXOpen.Annotations.DimensionPreferences dimensionPreferences1;
        dimensionPreferences1 = zengdim.GetDimensionPreferences();
        NXOpen.Annotations.AppendedText appendedText1;
        appendedText1 = workPart.Annotations.NewAppendedText();
        string[] lines4 = new string[1];

        lines4[0] = "增";
        appendedText1.SetAfterText(lines4);
        zengdim.SetAppendedText(appendedText1);
        appendedText1.Dispose();


    }
    public void setappendjian(NXOpen.Annotations.Dimension zengdim)//true为增环，false为减环,zengdim为要加文本的
    {

        Part workPart = theSession.Parts.Work;
        Part displayPart = theSession.Parts.Display;
        NXOpen.Annotations.DimensionPreferences dimensionPreferences1;
        dimensionPreferences1 = zengdim.GetDimensionPreferences();
        NXOpen.Annotations.AppendedText appendedText1;
        appendedText1 = workPart.Annotations.NewAppendedText();
        string[] lines4 = new string[1];

        lines4[0] = "减";
        appendedText1.SetAfterText(lines4);
        zengdim.SetAppendedText(appendedText1);

        appendedText1.Dispose();



    }
    public int cirdect(NXOpen.Annotations.Dimension cirdick)//这个方法判断一个尺寸对于要校核的是增环还是减环，或者垂直无贡献
    {
        // -1为减环，0为无贡献，1为增环
        int aa = 0;
        DatumAxis correct = creataxis(cirdick);
        double anglllll = anglemethod(correct, xformone);
        hideit((NXObject)correct);
        if (anglllll > 90)
        {

            aa = -1;
        }
        if (anglllll < 90)
        {

            aa = 1;

        }
        if (anglllll == 90)
        {

            aa = 0;
        }
        return aa;


    }
    public void afandfor(NXOpen.Annotations.Dimension[] a, out NXOpen.Annotations.Dimension[] b, out NXOpen.Annotations.Dimension[] c)//这个函数对一个数组中的增减环进行筛选，注意这个数组中的尺寸应该已经和需要校核的尺寸成环
    {
        ///////////////////其中a是输入进来的需要进行增减环赛选的尺寸数组，b是减环，c是增环
        ArrayList vv = new ArrayList();//存放减环
        ArrayList bb = new ArrayList();//存放增环
        int qq = 0;
        foreach (NXOpen.Annotations.Dimension f in a)
        {
            qq = cirdect(f);
            if (qq == -1)
            {
                vv.Add(f);//加入减环
            }
            if (qq == 1)
            {
                bb.Add(f);//加入增环
            }
            if (qq == 0)
            {


            }

        }
        b = (NXOpen.Annotations.Dimension[])vv.ToArray(typeof(NXOpen.Annotations.Dimension));
        c = (NXOpen.Annotations.Dimension[])bb.ToArray(typeof(NXOpen.Annotations.Dimension));

    }
    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
        }
        catch (Exception ex)
        {
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    public void OnMenuCallback(Tree tree, Node node, int columnID)
    {
        try
        {
            TreeListMenu menu = tree.CreateMenu();
            if (node.DisplayText.Contains("组成环"))
            {
                menu.AddMenuItem(1, "设为补偿环");
            }
            else if (node.DisplayText.Contains("成环尺寸链"))
            {
                menu.AddMenuItem(2, "不合理尺寸链");
            }
            tree.SetMenu(menu);
            menu.Dispose();
        }
        catch (Exception ex)
        {
            //---- Enter the exception handling code here. -----
        }

    }

    public void OnMenuSelectionCallback(Tree tree, Node node, int menuItemID)
    {
        try
        {
            if (menuItemID == 1)
            {
                trannode = node;
                tree_control0.SetAskEditControlHandler(new NXOpen.BlockStyler.Tree.AskEditControlCallback(AskEditControlCallback));
                //tree_control0.SetOnBeginLabelEditHandler(new NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback(OnBeginLabelEditCallback));

                //tree_control0.SetAskEditControlHandler(new NXOpen.BlockStyler.Tree.AskEditControlCallback(AskEditControlCallback));

                //tree_control0.SetOnEditOptionSelectedHandler(new NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback(OnEditOptionSelectedCallback));
            }

            else if (menuItemID == 2)
            {
                int m = theUI.NXMessageBox.Show("删除可疑尺寸链", NXMessageBox.DialogType.Question, "确定删除该可疑尺寸链以及其所有组成环？");
                if (m == 1)
                {
                    tree_control0.DeleteNode(node);
                }
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
        }

    }
    public ArrayList getallnodes(Node node)//这个方法得到除过补偿环外的所有组成环,这个写了10个for循环，如果node太多可能不行。
    {
        ArrayList allnodes = new ArrayList();
        Node prtnode = trannode.ParentNode;
        Node cdnode = prtnode.FirstChildNode;
        if (cdnode != node)
        {
            allnodes.Add(cdnode);
        }
        for (int i = 0; i < 10; i++)
        {
            if (cdnode != null)
            {

                cdnode = cdnode.NextSiblingNode;
                if (cdnode != node)
                {
                    allnodes.Add(cdnode);
                }
            }
            else if (cdnode == null)
                break;
        }
        Node[] nodeary = (Node[])allnodes.ToArray(typeof(Node));//把动态数组转化成数组
        for (int i = 0; i < nodeary.Length; i++)
        {
            if (nodeary[i] == null)
            {
                //nodeary[i].
                allnodes.Remove(nodeary[i]);
            }
        }
        return allnodes;
    }
    public void zengandjian(Node node,out NXOpen.Annotations.Dimension[] zeng,out NXOpen.Annotations.Dimension[] jian)
    {
        ArrayList allnodes = new ArrayList();
        ArrayList zengzu = new ArrayList();
        ArrayList jianzu = new ArrayList();
        zeng = null;
        jian = null;
       allnodes = getallnodes(node);
       allnodes.Add(node);
       foreach (Node a in allnodes)
       {
           if (a.GetColumnDisplayText(5).Contains("增环"))
           {
               DataContainer nodedim = a.GetNodeData();
               NXOpen.TaggedObject dimtag = nodedim.GetTaggedObject("Data");
               NXOpen.Annotations.Dimension editpmi = (NXOpen.Annotations.Dimension)dimtag;
               zengzu.Add(editpmi);
           }
           else if (a.GetColumnDisplayText(5).Contains("减环"))
           {
               DataContainer nodedim = a.GetNodeData();
               NXOpen.TaggedObject dimtag = nodedim.GetTaggedObject("Data");
               NXOpen.Annotations.Dimension editpmi = (NXOpen.Annotations.Dimension)dimtag;
               jianzu.Add(editpmi);
           
           }
    
       }
       zeng = (NXOpen.Annotations.Dimension[])zengzu.ToArray(typeof(NXOpen.Annotations.Dimension));
       jian = (NXOpen.Annotations.Dimension[])jianzu.ToArray(typeof(NXOpen.Annotations.Dimension));

    }
    public Tree.EditControlOption OnEditOptionSelectedCallback(Tree tree, Node node, int columnID, int selectedOptionID, string selectedOptionText, Tree.ControlType type)
    {
        Tree.EditControlOption OnEditOptionSelected = NXOpen.BlockStyler.Tree.EditControlOption.Reject;
        try
        {
            NXOpen.Annotations.Dimension[] zeng = null;
            NXOpen.Annotations.Dimension[] jian = null;
            NXOpen.Annotations.Dimension theoridim = Tag2NXObject<NXOpen.Annotations.Dimension>(theoripmi[0].Tag);
            zengandjian(node,out zeng,out jian);
            nodepool = getallnodes(node);
            if (node == trannode)
            {
                double p = 0;
                double q = 0;
                double editdouble = Double.Parse(selectedOptionText);
                DataContainer editcontainer = node.GetNodeData();
                NXOpen.TaggedObject edittag = editcontainer.GetTaggedObject("Data");
                NXOpen.Annotations.Dimension editpmi = (NXOpen.Annotations.Dimension)edittag;
                count ct = new count();

                if (columnID == 3)
                {
                    //ct.settolup(editpmi, editdouble);
                    double[] m = ct.getspec(editpmi);
                    ct.SetDimensionTolerance(editpmi, editdouble, m[2]);
                    if (toggle01.GetProperties().GetLogical("Value"))
                    {
                        if (ct.countcircle(theoridim, zeng, jian, out p, out q))
                        {
                            node.ParentNode.ForegroundColor = 60;
                            node.ParentNode.SetColumnDisplayText(1, "通过尺寸链校核");

                        }
                        else if (!ct.countcircle(theoridim, zeng, jian, out p, out q))
                        {
                            node.ParentNode.ForegroundColor = 198;
                            node.ParentNode.SetColumnDisplayText(1, "未通过尺寸链校核");
                        }

                        node.ParentNode.SetColumnDisplayText(3, p.ToString());
                        node.ParentNode.SetColumnDisplayText(4, q.ToString());
                    }
                    else if (!toggle01.GetProperties().GetLogical("Value"))
                    {
                        if (ct.countcircle(zeng, jian, out p, out q))
                        {
                            node.ParentNode.ForegroundColor = 60;
                            node.ParentNode.SetColumnDisplayText(1, "通过尺寸链校核");

                        }
                        else if (!ct.countcircle(zeng, jian, out p, out q))
                        {
                            node.ParentNode.ForegroundColor = 198;
                            node.ParentNode.SetColumnDisplayText(1, "未通过尺寸链校核");
                        }

                        node.ParentNode.SetColumnDisplayText(3, p.ToString());
                        node.ParentNode.SetColumnDisplayText(4, q.ToString());
                    }
                    OnEditOptionSelected = NXOpen.BlockStyler.Tree.EditControlOption.Accept;
                }
                else if (columnID == 4)
                {
                    //ct.settoldown(editpmi, editdouble);
                    double[] m = ct.getspec(editpmi);
                    ct.SetDimensionTolerance(editpmi, m[1], editdouble);
                    if (toggle01.GetProperties().GetLogical("Value"))
                    {
                        if (ct.countcircle(theoridim, zeng, jian, out p, out q))
                        {
                            node.ParentNode.ForegroundColor = 60;
                            node.ParentNode.SetColumnDisplayText(1, "通过尺寸链校核");

                        }
                        else if (!ct.countcircle(theoridim, zeng, jian, out p, out q))
                        {
                            node.ParentNode.ForegroundColor = 198;
                            node.ParentNode.SetColumnDisplayText(1, "未通过尺寸链校核");
                        }

                        node.ParentNode.SetColumnDisplayText(3, p.ToString());
                        node.ParentNode.SetColumnDisplayText(4, q.ToString());
                    }
                    else if (!toggle01.GetProperties().GetLogical("Value"))
                    {
                        if (ct.countcircle(zeng, jian, out p, out q))
                        {
                            node.ParentNode.ForegroundColor = 60;
                            node.ParentNode.SetColumnDisplayText(1, "通过尺寸链校核");

                        }
                        else if (!ct.countcircle(zeng, jian, out p, out q))
                        {
                            node.ParentNode.ForegroundColor = 198;
                            node.ParentNode.SetColumnDisplayText(1, "未通过尺寸链校核");
                        }

                        node.ParentNode.SetColumnDisplayText(3, p.ToString());
                        node.ParentNode.SetColumnDisplayText(4, q.ToString());
                    }
                    OnEditOptionSelected = NXOpen.BlockStyler.Tree.EditControlOption.Accept;
                }
                else
                {
                    OnEditOptionSelected = NXOpen.BlockStyler.Tree.EditControlOption.Reject;
                }

             
                //////可能要在这里加入一些代码
             
             
            }
            else if (node == trannode.ParentNode)
            {
                //string excelOpenFileName = ApplicationPath + folderpath + pmicheckpath;
                if (columnID == 7)
                {
                    theoridim.SetAttribute("校核记录", "已通过校核");//在这里插入校核人员名称
                    if (!File.Exists(ApplicationPath + folderpath + pmicheckpath))//pathproblem
                    {
                        creatxml();
                    }
                    OnEditOptionSelected = NXOpen.BlockStyler.Tree.EditControlOption.Accept;


                }

            }
            //count ct1 = new count();
            //double a = 0;
            //double b = 0;
            //ct1.countcircle(zengshuzu,jianshuzu, out a, out b);
            //trannode.ParentNode.SetColumnDisplayText(3, a.ToString());
            //trannode.ParentNode.SetColumnDisplayText(4, b.ToString());
            //foreach (Node realnode in nodepool)
            //theoridim.set
            //}
            //theoridim.SetAttribute("补偿环名义尺寸/上差/下差",trannode.GetColumnDisplayText(2)+"/"+trannode.GetColumnDisplayText(3)+"/"+trannode.GetColumnDisplayText(4) );
            //theoridim.SetAttribute("最大极限/最小极限", trannode.ParentNode.GetColumnDisplayText(3) + "/" + trannode.ParentNode.GetColumnDisplayText(4));
        }
        catch (Exception ex)
        {
            //---- Enter the exception handling code here. -----
        }
        return OnEditOptionSelected;

    }
    //public ArrayList getzengjianhuan(out NXOpen.Annotations.Dimension[] zenghuan, out NXOpen.Annotations.Dimension[] jianhuan)//这个方法得到除过补偿环外的所有组成环
    //{
    //    ArrayList allnodes = new ArrayList();
    //    ArrayList zengary = new ArrayList();
    //    ArrayList jianary = new ArrayList();
    //    Node prtnode = trannode.ParentNode;
    //    Node cdnode = prtnode.FirstChildNode;
    //    if (cdnode != node)
    //    {
    //        allnodes.Add(cdnode);
    //    }
    //    for (int i = 0; i < 10; i++)
    //    {
    //        if (cdnode != null)
    //        {

    //            cdnode = cdnode.NextSiblingNode;
    //            if (cdnode != node)
    //            {
    //                allnodes.Add(cdnode);
    //            }
    //        }
    //        else if (cdnode == null)
    //            break;
    //    }
    //    Node[] nodeary = (Node[])allnodes.ToArray(typeof(Node));//把动态数组转化成数组
    //    for (int i = 0; i < nodeary.Length; i++)
    //    {
    //        if (nodeary[i] == null)
    //        {
    //            //nodeary[i].
    //            allnodes.Remove(nodeary[i]);
    //        }
    //    }
    //    return allnodes;
    //}
    public void creatxml()
    {

        StreamWriter sw = new StreamWriter(ApplicationPath + folderpath + pmicheckpath, false);
      string a = "<?xml version=\"1.0\" encoding=\"utf-8\"?>"; //转义字符
      string b = "<root>";
            string c = "</root>";
            sw.WriteLine(a);
            sw.WriteLine(b);
            sw.WriteLine(c);
      sw.Close();
  
    }
    public static string NXPath
    {
        get
        {
            string ugraf = Process.GetCurrentProcess().MainModule.FileName;
            return ugraf.Substring(0, ugraf.Length - 14);
        }
    }
    public static string ApplicationPath
    {
        get
        {
            return System.AppDomain.CurrentDomain.BaseDirectory;
        }
    }
   
    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        if (block == selection0)
        {
            try
            {
                NXOpen.Annotations.Dimension d = (NXOpen.Annotations.Dimension)selectedObject;
            }
            catch
            {
                return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
            }
        }

        return (NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }
    public Tree.ControlType AskEditControlCallback(Tree tree, Node node, int columnID)
    {
        try
        {
            if (node == trannode)
            {
                tree_control0.SetAskEditControlHandler(new NXOpen.BlockStyler.Tree.AskEditControlCallback(AskEditControlCallback));
                if (columnID == 3)
                {
                    string[] opt = new string[] {null};
                    tree.SetEditOptions(opt, 0);
                }
                else if (columnID == 4)
                {
                    string[] opt = new string[] {null};
                    tree.SetEditOptions(opt, 0);
                }
                tree.InsertColumn(7,"校核人员",100);
            }

        }
        catch (Exception ex)
        {
            //---- Enter the exception handling code here. -----

        }
        //return tree.ControlType.ListBox; // Or tree.ControlType.ComboBox

        //return tree.ControlType.ListBox;
        return NXOpen.BlockStyler.Tree.ControlType.ComboBox;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
