//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\Jerry\Desktop\pmibiaozhu.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: Jerry
//              Version: NX 7.5
//              Date: 06-25-2012  (Format: mm-dd-yyyy)
//              Time: 21:18 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.UF;
using NXOpenUI;
using NXOpen.Utilities;


//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class pmibiaozhu
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    public static pmibiaozhu thepmibiaozhu;
    private string theDialogName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.UIBlock label0;// Block type: Label
    private NXOpen.BlockStyler.UIBlock point0;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock point01;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock selection0;// Block type: Selection
    public static NXOpen.TaggedObject[] firstpt;//第一个点
    public static NXOpen.TaggedObject[] secpt;//第2个点
    public static NXOpen.TaggedObject[] thepmi;
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesEnabled
    //------------------------------------------------------------------------------
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
  
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int          SnapPointTypesOnByDefault_UserDefined = (1 << 0);
    public static readonly int             SnapPointTypesOnByDefault_Inferred = (1 << 1);
    public static readonly int       SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 <<13);
    public static readonly int         SnapPointTypesOnByDefault_TangentPoint = (1 <<14);
    public static readonly int                SnapPointTypesOnByDefault_Poles = (1 <<15);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
  
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public pmibiaozhu()
    {
        try
        {
          
            theSession = Session.GetSession();
      
            theUI = UI.GetUI();
            theDialogName = "pmibiaozhu.dlx";
            theDialog = theUI.CreateDialog(theDialogName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        try
        {
            thepmibiaozhu = new pmibiaozhu();
            // The following method shows the dialog immediately
            thepmibiaozhu.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            thepmibiaozhu.Dispose();
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static int UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            label0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("label0");
            point0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("point0");
            point01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("point01");
            selection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection0");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
 

    public void dialogShown_cb()
    {
        try
        {
           // point0.GetProperties().SetBits("SnapPointTypesOnByDefault",5);
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    public static double ConvertDegreesToRadians(double degrees)//角度到弧度的转换方法
    {
        double radians = (Math.PI / 180) * degrees;
        // return (radians);
        return radians;//return 的这两种写法都是可以的
    } 
    public static T Tag2NXObject<T>(Tag tag)
    {
        try
        {
            object to = NXOpen.Utilities.NXObjectManager.Get(tag);
            return (T)to;
        }
        catch (System.Exception ex)
        {
            UI.GetUI().NXMessageBox.Show("Message", NXMessageBox.DialogType.Error, ex.Message);
            return default(T);
        }
    }
    public NXObject shank(Point point1,Point point2 )
    {
        Part workPart = theSession.Parts.Work;
        NXObject shanker;
        NXOpen.Features.Feature nullFeatures_Feature = null;
        NXOpen.Features.DatumAxisBuilder abuilder;
        abuilder = workPart.Features.CreateDatumAxisBuilder(nullFeatures_Feature);
        abuilder.ArcLength.Expression.RightHandSide = "0";
        abuilder.Type = NXOpen.Features.DatumAxisBuilder.Types.TwoPoints;
        abuilder.IsAssociative = true;
        Xform nullXform = null; 
         Point pt1 = workPart.Points.CreatePoint(point1, nullXform, NXOpen.SmartObject.UpdateOption.WithinModeling);
         Point pt2 = workPart.Points.CreatePoint(point2, nullXform, NXOpen.SmartObject.UpdateOption.WithinModeling);
        abuilder.Point1 = pt1;
        abuilder.Point2 = pt2;
        shanker = abuilder.Commit();
        abuilder.Destroy();
      
        return shanker ;
       
    
    }
    public double[] angle(DatumAxis axis)
    {
        double[] angle3d = {0,0,0};
        Part workPart = theSession.Parts.Work;
        NXObject nullNXObject = null;
        MeasureAngleBuilder bbuilder;
        bbuilder = workPart.MeasureManager.CreateMeasureAngleBuilder(nullNXObject);
        DatumAxis a = (DatumAxis)axis;
        bbuilder.Object1.Value = a;
        DatumAxis b = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) X axis");
        bbuilder.Object2.Value = b;
    //    NXObject f = bbuilder.Commit();
        Unit nullUnit = null;
        MeasureAngle measureAngle1;
        measureAngle1 = workPart.MeasureManager.NewAngle(nullUnit, a, NXOpen.MeasureManager.EndpointType.StartPoint, b, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg = measureAngle1.Value;
        DatumAxis b1 = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) Y axis");
        DatumAxis b2 = (DatumAxis)workPart.Datums.FindObject("DATUM_CSYS(0) Z axis");
        bbuilder.Object2.Value = b1;
        Unit nullUnit1 = null;
        MeasureAngle measureAngle2;
        measureAngle2 = workPart.MeasureManager.NewAngle(nullUnit1, a, NXOpen.MeasureManager.EndpointType.StartPoint, b1, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg1 = measureAngle2.Value;
        bbuilder.Object2.Value = b2;
        Unit nullUnit11 = null;
        MeasureAngle measureAngle3;
        measureAngle3 = workPart.MeasureManager.NewAngle(nullUnit11, a, NXOpen.MeasureManager.EndpointType.StartPoint, b2, NXOpen.MeasureManager.EndpointType.StartPoint, true, false);
        double deg2 = measureAngle3.Value;
        angle3d[0] = deg;//deg 是相对与X轴的角度
        angle3d[1] = deg1;//相对于Y
        angle3d[2] = deg2;//相对于Z
       
            bbuilder.Destroy();
            return angle3d;//在一个方法中返回一个数组，直接写return +数组名就可以了
    }
    public void hideit(NXObject objtohide)//////这是一个隐藏NXObject的方法
    {
        DisplayableObject a = (DisplayableObject)objtohide;
        DisplayableObject[] objects1 = new DisplayableObject[1];
        objects1[0] = a;
        theSession.DisplayManager.BlankObjects(objects1);

    }
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
         firstpt = point0.GetProperties().GetTaggedObjectVector("SelectedObjects");
         secpt = point01.GetProperties().GetTaggedObjectVector("SelectedObjects");
         Point a = Tag2NXObject<Point>(firstpt[0].Tag);
         Point b =Tag2NXObject<Point>(secpt[0].Tag);
         NXObject axisyo = shank(a, b);
         double[] real3d;
         NXOpen.Features.DatumAxisFeature axisreal = (NXOpen.Features.DatumAxisFeature)axisyo;
         DatumAxis axisreal1 = axisreal.DatumAxis;
         Point3d stpt;//轴的起点
         Point3d endpt;//轴的终点
         stpt = a.Coordinates;
         endpt = b.Coordinates;
        // axisreal1.GetEndPoints(out stpt, out endpt);
         hideit(axisreal1);
         real3d = angle(axisreal1);
         thepmi = selection0.GetProperties().GetTaggedObjectVector("SelectedObjects");
         NXObject last = Tag2NXObject<NXObject>(thepmi[0].Tag);
         NXOpen.Annotations.Dimension lastdimn = (NXOpen.Annotations.Dimension)last;
         double m = lastdimn.ComputedSize;
         double cosx = Math.Cos(ConvertDegreesToRadians(real3d[0]));
         double cosy = Math.Cos(ConvertDegreesToRadians(real3d[1]));
         double cosz = Math.Cos(ConvertDegreesToRadians(real3d[2]));
         double cosxx = cosx * m;
         double cosyy = cosy * m;
         double coszz = cosz * m;
         last.SetAttribute("X", cosxx);
         last.SetAttribute("Y", cosyy);
         last.SetAttribute("Z", coszz);
         last.SetAttribute("START-X",stpt.X);
         last.SetAttribute("START-Y",stpt.Y);
         last.SetAttribute("START-Z",stpt.Z);
         last.SetAttribute("END-X",endpt.X);
         last.SetAttribute("END-Y",endpt.Y);
         last.SetAttribute("END-Z",endpt.Z);

            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == label0)
            {
            //---------Enter your code here-----------
            }
            else if(block == point0)
            {
            //---------Enter your code here-----------
            }
            else if(block == point01)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection0)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
}
