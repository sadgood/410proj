<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NXOpenUI</name>
    </assembly>
    <members>
        <member name="T:NXOpen.BlockStyler.BlockDialog">
            <summary>  Represents a Dialog  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddUpdateHandler(NXOpen.BlockStyler.BlockDialog.Update)">
            <summary>  Adds Update callback handler to the dialog. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddFilterHandler(NXOpen.BlockStyler.BlockDialog.Filter)">
            <summary>  Adds Filter callback handler to the dialog. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddOkHandler(NXOpen.BlockStyler.BlockDialog.Ok)">
            <summary> Adds Ok callback handler to the dialog. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="okCb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddApplyHandler(NXOpen.BlockStyler.BlockDialog.Apply)">
            <summary> Adds Apply callback handler to the dialog. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="applyCb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddCancelHandler(NXOpen.BlockStyler.BlockDialog.Cancel)">
            <summary> Adds Cancel callback handler to the dialog. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cancelCb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddInitializeHandler(NXOpen.BlockStyler.BlockDialog.Initialize)">
            <summary>  Adds Initialize callback handler to the dialog. </summary>  
             <remarks>  The callback function is called while the dialog is being initialized.  The callback is called before applying any user inputs saved in dialog memory.<para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddDialogShownHandler(NXOpen.BlockStyler.BlockDialog.DialogShown)">
            <summary>  Adds Dialog Shown callback handler to the dialog. </summary>  
             <remarks>  The callback function is called before the dialog is shown.  The callback can be used to overwrite changes that are made during dialog initialization when user inputs saved in dialog memory are applied to the dialog.<para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.Show">
            <summary>  Shows the dialog   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.Show(NXOpen.BlockStyler.BlockDialog.DialogMode)">
            <summary>  Shows the dialog   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="dialogMode"> </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.PerformApply">
            <summary>  Performs an Apply and restarts the dialog. </summary>  
             <remarks>   Invokes the apply handler. 
                Equivalent to pressing the Apply button on a non-lightweight dialog. 
                In a lightweight dialog, PerformApply should be called after a selection is made  
                in a block that has the AutoCommit property set to true. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                    <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddFocusNotifyHandler(NXOpen.BlockStyler.BlockDialog.FocusNotify)">
            <summary>  Adds focus notify callback handler to the dialog. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddKeyboardFocusNotifyHandler(NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify)">
            <summary>  Adds keyboard focus notify callback handler to the dialog. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.BlockDialog.TopBlock">
            <summary>  Returns  a composite block that contains all the blocks in the dialog  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.DialogMode">
            <summary>  Datatype containing options for showing the dialog  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.BlockDialog.DialogMode.Create">
            <summary>  When the user presses Ok or Apply on the 
                        dialog, the user's inputs are saved in dialog memory and the next time that the dialog 
                        is shown in Create mode, the dialog is initialized using the user's previous 
                        inputs.   </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.BlockDialog.DialogMode.Edit">
            <summary>  The Apply button is not shown.   
                        The user's inputs are not saved in dialog memory and the dialog is not initialized  
                        with the user's previous inputs.  </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Update">
            <summary>  Update callback </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="stylerItem"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Filter">
            <summary> Filter callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="selectionBlock"> Selection Block</param>  
            <param name="selectedObject"> Tagged Objects</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Ok">
            <summary>  Ok callback </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Apply">
            <summary> Apply callback </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Cancel">
            <summary>  Cancel callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Initialize">
            <summary>  Initialize callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.DialogShown">
            <summary>  Dialog Shown callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.FocusNotify">
            <summary>Focus notify callback. This is invoked when any selection block on the dialog receives focus.</summary>   
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="focusBlock">Selection block receiving or going out of focus</param>  
            <param name="isFocus">Flag representing the focus state of the block. True means that block has recieved the focus, and False suggests that block is going out of focus.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify">
            <summary>Keyboard focus notify callback. This is invoked when any block having keyboard input such as Integer block receives focus.</summary>   
             <remarks>   
                  <para>License requirements: None.</para> </remarks>  
             <param name="block">Block which recieves focus</param>  
            <param name="isFocus"> Flag representing the focus state of the block. True means that block has recieved the focus, and False suggests that block is going out of focus.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.CompositeBlock">
            <summary>  A composite block is a block that contains other blocks  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.UIBlock">
            <summary>  Represents a UI Block </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.UIBlock.GetProperties">
            <summary>  Returns the properties of the block   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.UIBlock.Focus">
            <summary> Focuses on the block. </summary>  
             <remarks>  Use this method for both focus and keyboard focus.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Name">
            <summary>  Returns  the name of the block  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Type">
            <summary>  Returns  the type of block  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.CompositeBlock.FindBlock(System.String)">
            <summary>  Finds a block contained in the composite block. </summary>  
             <remarks>  Throws an exception if block not present <para>License requirements: None.</para> </remarks>  
             <param name="blockName"> Block name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CompositeBlock.GetBlocks">
            <summary>  Gets all the blocks available in the composite block   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.CompositeBlock.LastUpdated">
            <summary>  Returns  the block contained in the composite block that was last updated. </summary>  
             <remarks>  
                For example, if the CompositeBlock is an item contained in a SetList and 
                your update handler is notified that the CompositeBlock has been updated, 
                this method returns which block inside the CompositeBlock has been updated. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.ListBox">
            <summary>  Represents a ListBox block  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.SetAddHandler(NXOpen.BlockStyler.ListBox.AddCallback)">
            <summary>  Sets the Add handler. </summary>  
             <remarks>   This handler is called when the Add button is pressed. 
                The handler is responsible for adding an item to the list.  Nothing will be added to the list unless the handler 
                adds it. <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.SetDeleteHandler(NXOpen.BlockStyler.ListBox.DeleteCallback)">
            <summary>  Sets the Delete handler. </summary>  
             <remarks>   If you set this handler, the handler will be 
                called when the Delete button is pressed.  The handler does not need to implement code 
                to delete the item.  The list will delete the selected items if and only if the handler returns 0. <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.ListBox.AddCallback">
            <summary>  Add callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.ListBox.DeleteCallback">
            <summary>  Delete callback. </summary>  
             <remarks>   Return a non-zero value in order to veto the deletion. <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Node">
            <summary> Represents the node created and utilized by <see cref="T:NXOpen.BlockStyler.Tree"> BlockStyler.Tree </see>. </summary>  
             <remarks>  
                The node represents the single row of the tree. </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.Node.ScrollTo(System.Int32,NXOpen.BlockStyler.Node.Scroll)">
            <summary> Scrolls horizontally and vertically to make the specific column of  
                    node appear on the tree window. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">ColumnId of the column to which tree window scrolls horizontally.</param>  
            <param name="visibleOption">Option to scroll the tree window vertically.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.Expand(NXOpen.BlockStyler.Node.ExpandOption)">
            <summary> Expands/collapses the node </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="expandOption">Expand option</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.GetState">
            <summary> Gets the node state associated with node state icon. </summary>  
             <remarks>  Node state is an iconic  
                   representation, e.g., checked/unchecked icons for corresponding state. Node state  
                   value 1 and 2 represents the standard checked and unchecked state respectively. <para>License requirements: None.</para> </remarks>  
             <returns>Node state</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.SetState(System.Int32)">
            <summary> Sets the node state which is associated with node state icon. </summary>  
             <remarks>  Node state is an iconic  
                   representation, e.g., checked/unchecked state. Setting node state to value other  
                   than 1 and 2 calls BlockStyler.Tree.StateIconName callback to fetch 
                   the icon name.<para>License requirements: None.</para> </remarks>  
             <param name="state">Node state</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.GetColumnDisplayText(System.Int32)">
            <summary> Gets the column text for the given columnId. </summary>  
             <remarks>   
                   The text is interpreted as icon if the column display type is   
                   <see cref="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Icon"> BlockStyler.Tree.ColumnDisplay.Icon </see>. <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column id of the column.</param>  
            <returns>Text associated with column.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.SetColumnDisplayText(System.Int32,System.String)">
            <summary> Sets the text in the column which corresponds to given columnId. </summary>  
             <remarks>   
                   The text is interpreted as icon if the column display type is   
                   <see cref="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Icon"> BlockStyler.Tree.ColumnDisplay.Icon </see>.<para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique coulmn id of the column.</param>  
            <param name="columnDisplayText">Text associated with column</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.GetNodeData">
             <summary> Gets node data which contains the data in the form of unique name-value pairs.  
                    In this context unique name is termed as property name. There  
                    could me more than one such property name - value pair, but the property name of the primary data  
                    should be named "Data" (case-sensitive). For instance, if a <see cref="T:NXOpen.BlockStyler.Node"> BlockStyler.Node </see> represents a  
                    feature object then property name should be "Data" and the value should be feature object. The primary data is used by NX  
                    for some operations such cross selection.</summary>   
             <remarks>  
                    <para> 
                    Initialy the container\list is empty and it is expected that data  
                    would be added to it. Additional property name - value pair can be added to the container\list, but it should be made sure that 
                    there is no dublicate property name exists in the container\list. The additional data can be seen as  
                    book keeping information for node. At any point the node data can be fetched and value can be extracted 
                    using the corresponding property name. Refer to <see cref="T:NXOpen.DataContainer"> DataContainer </see> on how property name-value pair is added 
                    to the container\list. 
                    </para> 
                    <para>License requirements: None.</para> </remarks>  
             <returns>Node data which is list of property name - value pair. New property name - value pair can be added to it and existing value can be fetched using corresponding property name.</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.Node.CrossSelection">
            <summary>  Returns or sets the flag indicating whether cross section is allowed. </summary>  
             <remarks>   
                   It is useful when the node contains <see cref="T:NXOpen.DisplayableObject"> DisplayableObject </see> as  
                   data. If the flag is true then the <see cref="T:NXOpen.DisplayableObject"> DisplayableObject </see> is  
                   highlighted, else not. The default value is True<para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.DisplayIcon">
            <summary>  Returns or sets the display icon. </summary>  
             <remarks>  This is normal icon positioned before the node text and is  
                   displayed when the node is in unselected state.<para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.DisplayText">
            <summary>  Returns or sets  the display text of node. </summary>  
             <remarks>  This is same as 0th column text of this node.  
                   Use <see cref="M:NXOpen.BlockStyler.Node.SetColumnDisplayText(System.Int32,System.String)"> BlockStyler.Node.SetColumnDisplayText </see> to fetch the text of other column of the same node. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.FirstChildNode">
            <summary>  Returns the first child node. </summary>  
             <remarks>  Returns a null reference (Nothing in Visual Basic) if child node is not present.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.ForegroundColor">
            <summary>  Returns or sets the text color of the node. </summary>  
             <remarks>  The color is applicable for whole row.<para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.IsInserted">
            <summary>  Returns  the flag indicating whether the node is inserted in <see cref="T:NXOpen.BlockStyler.Tree"> BlockStyler.Tree </see> </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.NextNode">
            <summary>  Returns the next node which might not belong to the same hierarchy. </summary>  
             <remarks>   
                   The next node either is a sibling node or belongs to other root node.  
                   Returns a null reference (Nothing in Visual Basic) if next node is not present<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.NextSelectedNode">
            <summary>  Returns the next selected node in the whole tree hierarchy. </summary>  
             <remarks>  The node on which this method is called does not have to be selected. Returns a null reference (Nothing in Visual Basic) if none of the next nodes are selected.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.NextSiblingNode">
            <summary>  Returns  the next node which belongs to the same hierarchy. </summary>  
             <remarks>   
                   Returns a null reference (Nothing in Visual Basic) null if next sibling node is not present.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.ParentNode">
            <summary>  Returns the parent node. </summary>  
             <remarks>  Returns a null reference (Nothing in Visual Basic) if parent node is not present<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.PreviousNode">
            <summary>  Returns the previous node which might not belong to the same hierarchy. </summary>  
             <remarks>   
                   Returns a null reference (Nothing in Visual Basic) null if previous node is not present<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.PreviousSelectedNode">
            <summary>  Returns the previous selected node in the whole tree hierarchy. </summary>  
             <remarks>  The node on which this method is called does not have to be selected. 
                   Returns a null reference (Nothing in Visual Basic) if none of the previous nodes are selected.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.PreviousSiblingNode">
            <summary>  Returns the previous node which belongs to the same hierarchy. </summary>  
             <remarks>   
                   Returns a null reference (Nothing in Visual Basic) if previous sibling node is not present.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.SelectedIcon">
            <summary>  Returns or sets the selected icon. </summary>  
             <remarks>  This icon appears on node selection and is positioned before the node text 
                   replacing the <see cref="P:NXOpen.BlockStyler.Node.DisplayIcon"> BlockStyler.Node.DisplayIcon </see>.<para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node.ExpandOption">
            <summary> Represents the Expand/Collapse option </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.ExpandOption.Collapse">
            <summary> Use this option to collapse the node. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.ExpandOption.Expand">
            <summary> Use this option to expand the node. The child node state is unaltered. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.ExpandOption.Toggle">
            <summary> Use this option to collapse the expanded node or expand the collapsed node. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node.Scroll">
            <summary> Represents the scroll position to be applied on node. </summary>  
             <remarks>   
                    Use one of these options to make the node appear in tree window. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.Scroll.Center">
            <summary> Scrolls the tree to bring the node at the center of the tree window </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.Scroll.LeastScroll">
            <summary> Scrolls the tree to minimal to make the node appear in tree window </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.Scroll.MostScroll">
            <summary> Scrolls the tree to maximum to make the node appear in tree window </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node.DragType">
            <summary> Represents the drag type </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DragType.None">
            <summary> No drag </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DragType.All">
            <summary> Drag allowed to any level in the same tree </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node.DropType">
            <summary> Represents the drop type </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.None">
            <summary> Drop not permitted </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.On">
            <summary> Drop permitted on the target node </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.Before">
            <summary> Drop permitted before the target node </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.After">
            <summary> Drop permitted after the target node </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.BeforeAndAfter">
            <summary> Drop permitted before and after the target node </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.PropertyList">
            <summary>  Represents a list of properties  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                        it is illegal to use the object.  In .NET, this method is automatically 
                        called when the object is deleted by the garbage collector. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPropertyNames">
            <summary>  Returns a list of all the property names   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns>Property names </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPropertyType(System.String)">
            <summary>  Returns the property type for given property name   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Property type. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPropertyType(System.Int32)">
            <summary>  Returns the property type for the Indexed property list. </summary>  
             <remarks>  Don't use this method on Named property list  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index</param>  
            <returns>Property type. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetInteger(System.String,System.Int32)">
            <summary>  Sets the integer value for the given property name. </summary>  
             <remarks>   
                        Exception will be raised if invalid property name is used.<para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="value"> Value to set for given property name</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetInteger(System.String)">
            <summary>  Gets the integer value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetInteger(System.Int32)">
            <summary>  Gets the integer value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index</param>  
            <returns>Value to get for given index </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetLogical(System.String,System.Boolean)">
            <summary> Sets the logical value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.<para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetLogical(System.String)">
            <summary>  Gets the logical value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetLogical(System.Int32)">
            <summary>  Gets the logical value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetDouble(System.String,System.Double)">
            <summary> Sets the double value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="value">Value to set for given property name.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDouble(System.String)">
            <summary>  Gets the double value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDouble(System.Int32)">
            <summary>  Gets the double value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index</param>  
            <returns>Value to get for given index.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetString(System.String,System.String)">
            <summary> Sets the string value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetString(System.String)">
            <summary>  Gets the string value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetString(System.Int32)">
            <summary>  Gets the string value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index</param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetEnumAsString(System.String,System.String)">
            <summary>  Sets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnumAsString(System.String)">
            <summary> Gets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnumAsString(System.Int32)">
            <summary> Gets the value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetEnum(System.String,System.Int32)">
            <summary> Sets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnum(System.String)">
            <summary> Gets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnum(System.Int32)">
            <summary> Gets the value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetEnumMembers(System.String,System.String[])">
            <summary> Sets the enum members for the given property of type enum. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="stringArray">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnumMembers(System.String)">
            <summary> Gets the enum members for the given property of type enum. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnumMembers(System.Int32)">
            <summary> Gets the enum members for the given property index. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given property index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetStrings(System.String,System.String[])">
            <summary> Sets the strings value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="stringArray">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetStrings(System.String)">
            <summary> Gets the strings value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetStrings(System.Int32)">
            <summary> Gets the strings value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetUIBlock(System.String)">
            <summary> Gets the UI Block for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetUIBlock(System.Int32)">
            <summary> Gets the UI Block for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetPoint(System.String,NXOpen.Point3d)">
            <summary> Sets the point value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="pointSc">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPoint(System.String)">
            <summary> Gets the point value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPoint(System.Int32)">
            <summary> Gets the point value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetVector(System.String,NXOpen.Vector3d)">
            <summary> Sets the vector value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="vector">Value to set for given property name.  </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetVector(System.String)">
            <summary> Gets the vector value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetVector(System.Int32)">
            <summary> Gets the vector value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetBits(System.String,System.Int32)">
            <summary> Sets the bits value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="bitsSc">Value to set for given property name.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetBits(System.String)">
            <summary>  Gets the bits value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name.  </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetBits(System.Int32)">
            <summary>  Gets the bits value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">index </param>  
            <returns>Value to get for given index.  </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetTaggedObject(System.String,NXOpen.TaggedObject)">
            <summary> Sets the tagged object for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="taggedSc">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObject(System.String)">
            <summary> Gets the tagged object for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObject(System.Int32)">
            <summary> Gets the tagged object for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index</param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetIntegerVector(System.String)">
            <summary> Gets the integer vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetIntegerVector(System.String,System.Int32[])">
            <summary> Sets the integer vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="intVector">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetIntegerVector(System.Int32)">
            <summary> Gets the integer vector for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index</param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDoubleVector(System.String)">
            <summary> Gets the double vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetDoubleVector(System.String,System.Int32[])">
            <summary> Sets the double vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="doubleVector">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDoubleVector(System.Int32)">
            <summary> Gets the double vector for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index</param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObjectVector(System.String)">
            <summary> Gets the tagged object vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetTaggedObjectVector(System.String,NXOpen.TaggedObject[])">
            <summary> Sets the tagged object vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="tagVector">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObjectVector(System.Int32)">
            <summary> Gets the tagged object vector for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index</param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetIntegerMatrix(System.String,System.Int32@,System.Int32@)">
            <summary> Gets the integer matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                      This is a two dimensional array encoded into a single array.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetIntegerMatrix(System.String,System.Int32,System.Int32,System.Int32[])">
            <summary> Sets the integer matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                      This is a two dimensional array encoded into a single array. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetIntegerMatrix(System.Int32,System.Int32@,System.Int32@)">
            <summary> Gets the integer matrix for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used. 
                      This is a two dimensional array encoded into a single array.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDoubleMatrix(System.String,System.Int32@,System.Int32@)">
            <summary> Gets the double matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                        This is a two dimensional array encoded into a single array.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetDoubleMatrix(System.String,System.Int32,System.Int32,System.Double[])">
            <summary> Sets the double matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                      This is a two dimensional array encoded into a single array. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDoubleMatrix(System.Int32,System.Int32@,System.Int32@)">
            <summary> Gets the double matrix for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used. 
                        This is a two dimensional array encoded into a single array.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObjectMatrix(System.String,System.Int32@,System.Int32@)">
            <summary>  Gets the tagged object matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                        This is a two dimensional array encoded into a single array.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetTaggedObjectMatrix(System.String,System.Int32,System.Int32,NXOpen.TaggedObject[])">
            <summary> Sets the tagged object for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                      This is a two dimensional array encoded into a single array. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObjectMatrix(System.Int32,System.Int32@,System.Int32@)">
            <summary>  Gets the tagged object matrix for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used. 
                        This is a two dimensional array encoded into a single array.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetFile(System.String)">
            <summary> Gets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetFile(System.String,System.String)">
            <summary> Sets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. <para>License requirements: None.</para> </remarks>  
             <param name="propertyName"> Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="value">Value to set for given property name.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetFile(System.Int32)">
            <summary> Gets the value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetArray(System.String)">
            <summary> Gets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetArray(System.Int32)">
            <summary> Gets the value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.  <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetSelectionFilter(System.String,NXOpen.Selection.SelectionAction,NXOpen.Selection.MaskTriple[])">
            <summary> Sets the filter for the given property name. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="maskAction"> Mask action </param>  
            <param name="maskTriples"> Mask triples </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.PropertyList.Length">
            <summary>  Returns  the length of the list  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.PropertyList.Mode">
            <summary>  Returns  the mode of the list. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.PropertyList.PropertyType">
            <summary>  Represents the property types. </summary>  
             <remarks>  Instead use <see cref="T:NXOpen.PropertyContainer.PropertyType"> PropertyContainer.PropertyType </see>. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.String">
            <summary> String </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Double">
            <summary> Double </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Logical">
            <summary> Logical </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Integer">
            <summary> Integer </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Enum">
            <summary> Enum </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Strings">
            <summary> Strings </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.UIBlock">
            <summary> UIBlock </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Point">
            <summary> Point </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Vector">
            <summary> Vector </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Bits">
            <summary> Bits </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.TaggedObject">
            <summary> Tagged Object </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Array">
            <summary> Array </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.IntegerMatrix2d">
            <summary> Integer 2d-Matrix </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.DoubleMatrix2d">
            <summary> Double 2d-Matrix </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.TaggedObjectMatrix2d">
            <summary> Tagged Object 2d-Matrix </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.IntegerVector">
            <summary> Integer Vector </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.DoubleVector">
            <summary> Double Vector </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.TaggedObjectVector">
            <summary> Tagged Object Vector </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.File">
            <summary> File </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.SelectionFilter">
            <summary> Selection Filter </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Undefined">
            <summary> Undefined  </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.PropertyList.ListMode">
            <summary>  Indicates whether the properties in the list are named. </summary>  
             <remarks>  Use <see cref="T:NXOpen.PropertyContainer.ListMode"> PropertyContainer.ListMode </see> instead. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.ListMode.Indexed">
            <summary>  The properties are not named and 
                           must be indexed through an integer index  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.ListMode.Named">
            <summary>  The properties are named  </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SetList">
            <summary>  Represents a SetList block  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetSeed(System.String)">
            <summary>  Sets the seed using a dlx file. </summary>  
             <remarks>   The seed must be set during initialization. 
                Setting the seed will also reset any Add and Delete handlers that has been registered, 
                so SetSeed should be called prior to calling SetAddHandler or SetDeleteHandler. <para>License requirements: None.</para> </remarks>  
             <param name="dlxFile"> The dlx file used to create the seed  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetAddHandler(NXOpen.BlockStyler.SetList.AddCallback)">
            <summary>  Sets the AddNewSet handler. </summary>  
             <remarks>   If you set this handler, the handler will be 
                called when the Add New Set button is pressed, and the handler will be responsible 
                for adding an item to the list.  Nothing will be added to the list unless the handler 
                adds it. <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetDeleteHandler(NXOpen.BlockStyler.SetList.DeleteCallback)">
            <summary>  Sets the Delete handler. </summary>  
             <remarks>   If you set this handler, the handler will be 
                called when the Delete button is pressed.  The handler does not need to implement code 
                to delete the item.  The list will delete the item if and only if the handler returns 0. <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetReorderObserver(NXOpen.BlockStyler.SetList.ReorderCallback)">
            <summary>  Sets the Reorder observer. </summary>  
             <remarks>   If you set this observer, the observer will 
                be called after an item is moved by pressing the Move Up and Down buttons. 
                The observer does not need to implement the move up and down behavior and is called 
                after the item has already been moved. <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.AddNewSet(System.Boolean)">
            <summary>  Adds an item to the end of the list   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="copyPropertiesAndSelect"> Indicates whether to copy properties from the  
                            currently selected component and set focus to the new set </param>  
            <returns> The added item </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.Delete(NXOpen.BlockStyler.UIBlock)">
            <summary>  Deletes an item from the list  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="uicomp"> Item to delete </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.Swap(NXOpen.BlockStyler.UIBlock,NXOpen.BlockStyler.UIBlock)">
            <summary>  Swaps the location of two items  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="uicomp1"> Item to swap </param>  
            <param name="uicomp2"> Item to swap </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.InsertNewSet(NXOpen.BlockStyler.UIBlock,NXOpen.BlockStyler.SetList.InsertionLocation,System.Boolean)">
            <summary>  Inserts an item before or after a specified item   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="location"> Location to insert the new item </param>  
            <param name="insertBeforeOrAfter"> Indicates whether to insert the new item before or after the specified location </param>  
            <param name="copyPropertiesAndSelect"> Indicates whether to copy properties from the  
                            currently selected component and set focus to the new set </param>  
            <returns> The inserted item </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetItemText(NXOpen.BlockStyler.UIBlock,System.String[])">
            <summary>  Sets the text for the specified item. </summary>  
             <remarks>  
                    If the list has a title column, the title column is not included in the item text. <para>License requirements: None.</para> </remarks>  
             <param name="item"> </param>  
            <param name="strings"> The text.  The text may only contain characters in the locale character set </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetItemText(NXOpen.BlockStyler.UIBlock)">
            <summary>  Gets the text for the specified item. </summary>  
             <remarks>  
                    If the list has a title column, the title column is not included in the item text.  <para>License requirements: None.</para> </remarks>  
             <param name="item"> </param>  
            <returns> The text </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.FindUpdated">
            <summary>  When an update event occurs on the list, this method finds the 
                item in the list that was updated   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetSelected">
            <summary>  Gets the selected items   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetSelected(NXOpen.BlockStyler.UIBlock[])">
            <summary>  Sets the selected items. </summary>  
             <remarks>   If the "Multiple Edit" property is false, 
                no more than one item can be selected <para>License requirements: None.</para> </remarks>  
             <param name="items"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetItems">
            <summary>  Gets all the items in the list   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="T:NXOpen.BlockStyler.SetList.InsertionLocation">
            <summary>  During Insert, indicates whether component should be 
                inserted before or after the insertion location  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SetList.InsertionLocation.Before">
            <summary>   </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SetList.InsertionLocation.After">
            <summary>   </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SetList.AddCallback">
            <summary>  Add callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.SetList.DeleteCallback">
            <summary>  Delete callback. </summary>  
             <remarks>   Return a non-zero value in order to veto the deletion. <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param>  
            <param name="blockToDelete"> The block that is targeted for deletion </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.SetList.ReorderCallback">
            <summary>  Reorder callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param>  
            <param name="reorderedBlock"> The block that is moved </param>  
            <param name="oldPosition"> Old position in the list </param>  
            <param name="newPosition"> New position in the list </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree">
            <summary> Represents the Tree block in block styler automation. </summary>  
             <remarks>  To start utilizing the tree use 
               methods such as <see cref="M:NXOpen.BlockStyler.Tree.InsertColumn(System.Int32,System.String,System.Int32)"> BlockStyler.Tree.InsertColumn </see>, <see cref="M:NXOpen.BlockStyler.Tree.CreateNode(System.String)"> BlockStyler.Tree.CreateNode </see>, <see cref="M:NXOpen.BlockStyler.Tree.InsertNode(NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Tree.NodeInsertOption)"> BlockStyler.Tree.InsertNode </see> etc. 
               It is must to insert the column on the tree before inserting any node. Node can be created but cannot be inserted without the column available on the tree.  
               Note that some of the methods of this class such as <see cref="M:NXOpen.BlockStyler.Tree.InsertColumn(System.Int32,System.String,System.Int32)"> BlockStyler.Tree.InsertColumn </see> must be used in or after the BlockStyler.BlockDialog.DialogShown callback after  
               which tree is fully constructed and ready for use. </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.CreateNode(System.String)">
            <summary> Creates the node but does not insert it. </summary>  
             <remarks>  Use <see cref="M:NXOpen.BlockStyler.Tree.InsertNode(NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Tree.NodeInsertOption)"> BlockStyler.Tree.InsertNode </see> to insert  
                    the node. <para>License requirements: None.</para> </remarks>  
             <param name="displayText">Specifies the display text of the node.</param>  
            <returns>Node</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.InsertNode(NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Tree.NodeInsertOption)">
            <summary> Inserts the node. </summary>  
             <remarks>  Subsequently BlockStyler.Tree.OnInsertNodeCallback is called.  
                   Reinserting the node in same or different tree is not allowed.<para>License requirements: None.</para> </remarks>  
             <param name="newNode">New Node.</param>  
            <param name="parentNode">Parent node under which new node is supposed to be placed.</param>  
            <param name="afterNode">New node placed after this node. If there is mismatch between parent-node and after-node then former is honoured.</param>  
            <param name="nodeInsertOption">Node insert option. Provide the value if after node is a null reference (Nothing in Visual Basic).  
                                                                        This value is not considered if a valid after-node is supplied.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.DeleteNode(NXOpen.BlockStyler.Node)">
            <summary> Deletes the node from tree. </summary>  
             <remarks>  Further usage of deleted node is illegal. The last place where node can be used is in  
                  BlockStyler.Tree.OnDeleteNodeCallaback callback which gets called when node is deleted.<para>License requirements: None.</para> </remarks>  
             <param name="node">Node to delete</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SelectNode(NXOpen.BlockStyler.Node,System.Boolean,System.Boolean)">
            <summary> Selects the provided node. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="node">Node to be selected</param>  
            <param name="isSelect">Select/Deselect flag. If true, the provided node is selected, else deselected.</param>  
            <param name="isOtherNodeAffected">Flag indicating whether selection of other nodes is affected. If true,  
                                                          all the previous selected nodes are deselected, else unaffected.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SelectNodes(NXOpen.BlockStyler.Node[],System.Boolean,System.Boolean)">
            <summary> Selects the provided nodes. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="node">Nodes to be selected</param>  
            <param name="isSelect">Select/Deselect flag. If true, the provided nodes are selected, else deselected.</param>  
            <param name="isOtherNodeAffected">Flag indicating whether selection of other nodes is affected. If true,  
                                                          all the previous selected nodes are deselected, else remain so.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.InsertColumn(System.Int32,System.String,System.Int32)">
            <summary> Inserts column with following defaults: <br/>  
                   <list type="bullet">  
             
                   <item>  
             <description><see cref="T:NXOpen.BlockStyler.Tree.ColumnSortOption"> BlockStyler.Tree.ColumnSortOption </see> as <see cref="F:NXOpen.BlockStyler.Tree.ColumnSortOption.Ascending"> BlockStyler.Tree.ColumnSortOption.Ascending </see></description>  
             </item> 
                   <item>  
             <description>Column sortable as True</description>  
             </item> 
                   <item>  
             <description>Column visible as True</description>  
             </item> 
                   <item>  
             <description><see cref="T:NXOpen.BlockStyler.Tree.ColumnDisplay"> BlockStyler.Tree.ColumnDisplay </see> as <see cref="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Text"> BlockStyler.Tree.ColumnDisplay.Text </see></description>  
             </item> 
                   <item>  
             <description><see cref="T:NXOpen.BlockStyler.Tree.ColumnResizePolicy"> BlockStyler.Tree.ColumnResizePolicy </see> as <see cref="F:NXOpen.BlockStyler.Tree.ColumnResizePolicy.ConstantWidth"> BlockStyler.Tree.ColumnResizePolicy.ConstantWidth </see></description>  
             </item> 
                   </list> 
                   The new column is placed after the last available column. </summary>  
             <remarks>  If no column is available then the inserted one becomes the first column of the tree. 
                 <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column. Any further interaction with the column is done with this column Id.</param>  
            <param name="columnTitle">Column header title.</param>  
            <param name="columnWidth">Column width. Provide -1 for default width.</param>  
            <returns>Absolute column position.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnTitle(System.Int32)">
            <summary> Gets the column title. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Column header title.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnTitle(System.Int32,System.String)">
            <summary> Sets the column title. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="columnHeaderTitle">Column header title.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnId(System.Int32)">
            <summary> Gets the column Id for the provided column position. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="columnPosition">Column position.</param>  
            <returns>Unique column Id associated with the column.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnPosition(System.Int32)">
            <summary> Gets column position. </summary>  
             <remarks>  Returns -1 if no column is associated with the provided column Id. <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Column position.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnWidth(System.Int32)">
            <summary> Gets column width  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Column width.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnWidth(System.Int32,System.Int32)">
            <summary> Sets the column width </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="columnWidth">Column width.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnSortOption(System.Int32)">
            <summary> Gets the column sort option. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Column sort option.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnSortOption(System.Int32,NXOpen.BlockStyler.Tree.ColumnSortOption)">
            <summary> Sets the column sort option. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="sortOption">Column sort option.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnSortable(System.Int32)">
            <summary> Gets the flag indicating whether the column is sortable. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Flag indicating whether the column is sortable.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnSortable(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the column is sortable. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="isSortable">Flag indicating whether the column is sortable.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnVisible(System.Int32)">
            <summary> Gets the flag indicating whether the column is visible. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Flag indicating whether the column is visible.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnVisible(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the column is visible </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column</param>  
            <param name="isVisible">Flag indicating whether the column is visible</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnDisplayType(System.Int32)">
            <summary> Gets the display type of the column. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Display type.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnDisplayType(System.Int32,NXOpen.BlockStyler.Tree.ColumnDisplay)">
            <summary> Sets the display type of the column. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="displayType">Display type.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnResizePolicy(System.Int32)">
            <summary> Gets the column resize policy. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Resize policy.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnResizePolicy(System.Int32,NXOpen.BlockStyler.Tree.ColumnResizePolicy)">
            <summary> Sets the column resize policy. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column</param>  
            <param name="resizePolicy">Resize policy</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetPreSelectionTimeOut(System.Double)">
            <summary> Sets the pre selection time out. </summary>  
             <remarks>  BlockStyler.Tree.OnPreSelectCallback is called based on this value.<para>License requirements: None.</para> </remarks>  
             <param name="timeOut">Time in millisecond</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetSelectedNodes">
            <summary> Gets the selected nodes. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <returns>Selected nodes.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.Redraw(System.Boolean)">
            <summary> Freezes the tree if the value is set to False which implies that no changes would occur  
                   in the tree after this point. </summary>  
             <remarks>  The tree remains in that state until the value is set to True,  
                   after which the tree completely updates itself with the changes performed on it in between  
                   the two calls. Use this method to efficiently utilize the tree when it is subjected to enourmous changes.<para>License requirements: None.</para> </remarks>  
             <param name="redraw">Flag corresponds to freeze/unfreeze of tree changes.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnExpandHandler(NXOpen.BlockStyler.Tree.OnExpandCallback)">
            <summary> Sets the on expand callback to the tree. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnInsertColumnHandler(NXOpen.BlockStyler.Tree.OnInsertColumnCallback)">
            <summary> Sets the on insert column callback to the tree. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetStateIconNameHandler(NXOpen.BlockStyler.Tree.StateIconNameCallback)">
            <summary> Sets the state icon name callback. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnInsertNodeHandler(NXOpen.BlockStyler.Tree.OnInsertNodeCallback)">
            <summary>  Sets the on insert node callback. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnPreSelectHandler(NXOpen.BlockStyler.Tree.OnPreSelectCallback)">
            <summary>  Sets on pre select callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnDeleteNodeHandler(NXOpen.BlockStyler.Tree.OnDeleteNodeCallback)">
            <summary>  Sets on delete node callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnSelectHandler(NXOpen.BlockStyler.Tree.OnSelectCallback)">
            <summary>  Sets the on select node callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnStateChangeHandler(NXOpen.BlockStyler.Tree.OnStateChangeCallback)">
            <summary> Sets the on state change callback. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetToolTipTextHandler(NXOpen.BlockStyler.Tree.ToolTipTextCallback)">
            <summary> Sets the tool tip callback. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnSortHandler(NXOpen.BlockStyler.Tree.ColumnSortCallback)">
            <summary> Sets the column sort callback. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnBeginLabelEditHandler(NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback)">
            <summary> Sets the on-begin-label-edit callback </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnEndLabelEditHandler(NXOpen.BlockStyler.Tree.OnEndLabelEditCallback)">
            <summary> Sets the on-end-label-edit callback </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetAskEditControlHandler(NXOpen.BlockStyler.Tree.AskEditControlCallback)">
            <summary> Sets the node-edit-control callback </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetEditOptions(System.String[],System.Int32)">
            <summary>Sets the options in edit-control. This method must be used 
                   in BlockStyler.Tree.AskEditControlCallback to make available the options in edit-control. 
                   </summary>   
             <remarks>  
                  <para>License requirements: None.</para> </remarks>  
             <param name="stringArray">Options to be made availabe in edit-control</param>  
            <param name="defaultIndex"> Index for default selection. This is zero based, for instance if it is set to 1 then 2nd option is selected by default during edit operation.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnEditOptionSelectedHandler(NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback)">
            <summary> Sets the on-end-label-edit callback </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnMenuHandler(NXOpen.BlockStyler.Tree.OnMenuCallback)">
            <summary>  Sets the on menu callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnMenuSelectionHandler(NXOpen.BlockStyler.Tree.OnMenuSelectionCallback)">
            <summary>  Sets the on menu selection callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetIsDragAllowedHandler(NXOpen.BlockStyler.Tree.IsDragAllowedCallback)">
            <summary> Sets the callback handler for node drag </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetIsDropAllowedHandler(NXOpen.BlockStyler.Tree.IsDropAllowedCallback)">
            <summary> Sets the callback handler for node drop </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnDropHandler(NXOpen.BlockStyler.Tree.OnDropCallback)">
            <summary> Sets the callback handler for node drop </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnDropMenuHandler(NXOpen.BlockStyler.Tree.OnDropMenuCallback)">
            <summary> Sets the callback handler for on drop menu. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.CreateMenu">
            <summary>  Creates the menu. </summary>  
             <remarks>  Use <see cref="M:NXOpen.BlockStyler.Tree.SetMenu(NXOpen.BlockStyler.TreeListMenu)"> BlockStyler.Tree.SetMenu </see> to set the created menu. <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetMenu(NXOpen.BlockStyler.TreeListMenu)">
            <summary>  Sets the menu, resulting the menu to appear on the screen. </summary>  
             <remarks>  This method must be used in callback which is intended to create 
                    menu, such as BlockStyler.Tree.OnMenuCallback<para>License requirements: None.</para> </remarks>  
             <param name="menu">Menu.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.CopyNode(NXOpen.BlockStyler.Node)">
            <summary> Copies the existing <see cref="T:NXOpen.BlockStyler.Node"> BlockStyler.Node </see>. </summary>  
             <remarks>  The tree can copy either its own node or the node of another tree.  
                   The copied node can only be inserted into the tree which has copied that node. The column texts are not passed to the copied node.  
                 <para>License requirements: None.</para> </remarks>  
             <param name="sourceNode">Source node. Can be node of other tree.</param>  
            <returns>Copied node.</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.FirstSelectedNode">
            <summary>  Returns  the first selected node among the available selected nodes. </summary>  
             <remarks>   
                   Returns a null reference (Nothing in Visual Basic) if no node is selected.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.NumberOfColumns">
            <summary>  Returns  the number of column inserted in the tree. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.RootNode">
            <summary>  Returns  the root node. </summary>  
             <remarks>  If more than one root node is available in top hierarchy  
                  then the first root node is returned.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.NodeInsertOption">
            <summary> Represents the node insert option which is used while inserting the node in tree. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.First">
            <summary> Node is placed first in the hierarchy in which it is inserted. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.Last">
            <summary> Node is placed last in the hierarchy in which it is inserted. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.Sort">
            <summary> Node is sorted according to display text and placed accordingly in the hierarchy in which it is inserted </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.AlwaysFirst">
            <summary> Node is placed first in the hierarchy in which it is inserted. This is same as  
                                                            <see cref="F:NXOpen.BlockStyler.Tree.NodeInsertOption.First"> BlockStyler.Tree.NodeInsertOption.First </see>, except that it  
                                                            remains first after a column sort. If there is more than one node beneath a single parent  
                                                            with this option then they remain in the order they are put in the tree. 
                                                             </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.AlwaysLast">
            <summary> Node is placed last in the hierarchy in which it is inserted. This is same as  
                                                            <see cref="F:NXOpen.BlockStyler.Tree.NodeInsertOption.Last"> BlockStyler.Tree.NodeInsertOption.Last </see>, except that it  
                                                            remains last after a column sort. If there is more than one node beneath a single parent  
                                                            with this option then they remain in the order they are put in the tree </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ColumnSortOption">
            <summary> Represents the column sort option. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnSortOption.Unsorted">
            <summary> Unsorted </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnSortOption.Ascending">
            <summary> Ascending </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnSortOption.Descending">
            <summary> Descending </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ColumnResizePolicy">
            <summary> Represents column resize policy. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnResizePolicy.ConstantWidth">
            <summary>  Constant width </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnResizePolicy.ResizeWithContents">
            <summary> Width resized with contents. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnResizePolicy.ResizeWithTree">
            <summary> Width resize with tree window resize. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ColumnDisplay">
            <summary> Represents the column display type. </summary>  
             <remarks>  If the type is <see cref="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Icon"> BlockStyler.Tree.ColumnDisplay.Icon  </see> 
                  then the provided text is interpreted as icon. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Text">
            <summary> Text </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Icon">
            <summary> Icon </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.BeginLabelEditState">
            <summary> Represents the state to allow/disallow the node label edit. </summary>  
             <remarks>  Use these options in callback BlockStyler.Tree.OnBeginLabelEditCallback. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.BeginLabelEditState.Allow">
            <summary> Use this option to allow label edit. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.BeginLabelEditState.Disallow">
            <summary> Use this option to disallow label edit. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.EndLabelEditState">
            <summary> Represents the state to accept/reject the edited label of node. </summary>  
             <remarks>  Use these options in callback BlockStyler.Tree.OnEndLabelEditCallback. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.EndLabelEditState.AcceptText">
            <summary> Use this option to accept the edited text. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.EndLabelEditState.RejectText">
            <summary> Use this option to reject the edited text and retain the previous one. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.EditControlOption">
            <summary> Represents the options to accept or reject the changed value. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.EditControlOption.Accept">
            <summary> Use this option to allow edit. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.EditControlOption.Reject">
            <summary> Use this option to disallow edit. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ControlType">
            <summary> Represents the type of edit options. </summary>  
             <remarks>  Use these options in edit control callback </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ControlType.None">
            <summary> None </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ControlType.ComboBox">
            <summary> Combo box. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ControlType.ListBox">
            <summary> List box. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnExpandCallback">
            <summary> Represents the callback which gets called when the node is expanded. </summary>  
             <remarks>  This is called only once.<para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnInsertColumnCallback">
            <summary> 
                    Represents the callback which gets called for each node when the column is inserted using  
                    <see cref="M:NXOpen.BlockStyler.Tree.InsertColumn(System.Int32,System.String,System.Int32)"> BlockStyler.Tree.InsertColumn </see>. This callback in not invoked if no node is  
                    available on the tree.  
                   </summary>   
             <remarks>  
                   In this callback it is expected to provide column text for individual node.<para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="columnID">Column id of the newly inserted column.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.StateIconNameCallback">
            <summary> Represents the callback which gets called when the node state is set  
                   by <see cref="M:NXOpen.BlockStyler.Node.SetState(System.Int32)"> BlockStyler.Node.SetState </see> and the corresponding  
                   state icon of node state is not known. </summary>  
             <remarks>  This callback is expected to provide  
                   the icon name for the node state used in the application. This callback is  
                   called only once for any given node state.<para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="state">Node state for which callback is expected to return state icon name.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnInsertNodeCallback">
            <summary> Represents the callback which gets called when the node is inserted. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Newly inserted node</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnPreSelectCallback">
            <summary> Represents the callback which gets called when pre selection is attempted on node. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="columnID">Column id of the column on which pre-selection is attempted.</param>  
            <param name="selected">Select/Deselect flag.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnDeleteNodeCallback">
            <summary>Represents the callback which gets called when the node is deleted from tree. 
                  It is expected to perform only clean-up operation related to the deleted node such as clean-up of Node Data. 
                  </summary>   
             <remarks>  
                  Avoid operations such as node insert, node delete etc, and avoid calling any methods of tree. This is  
                  particularly severe when dialog is closed (through Ok, dialog-reset etc) because by then tree is unavailable and any usage of tree 
                  method would raise exception. As the callback is called for each node, the exception would be raised number of times equaling number of nodes available on tree. 
                  <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree</param>  
            <param name="node">Deleted node.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnSelectCallback">
            <summary> Represents the callback which gets called when the node is selected. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="columnID">Column Id of the column on which selection is made.</param>  
            <param name="selected">Select/Deselect flag.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnStateChangeCallback">
            <summary> Represents the callback which gets called when the state icon is clicked. </summary>  
             <remarks>   
                   This callback does not get called when state is changed using the method  
                   <see cref="M:NXOpen.BlockStyler.Node.SetState(System.Int32)"> BlockStyler.Node.SetState </see>. The node state can be  
                   changed in this callback using <see cref="M:NXOpen.BlockStyler.Node.SetState(System.Int32)"> BlockStyler.Node.SetState </see>,  
                   e.g., node can be changed from checked state to unchecked state and vice-versa.<para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="state">Current node state.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ToolTipTextCallback">
            <summary> Represents the callback which gets called when tree seeks the tooltip. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node for which tooltip is sought.</param>  
            <param name="columnID">Column Id of the column for which tooltip is sought.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ColumnSortCallback">
            <summary>Represents the callback which gets called when column sort is attempted. The possible return values are 0, positive and 
                    negative value, suggesting respectively that both nodes are same, first node greater than second, and first node smaller than second. 
                   </summary>   
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="columnID">Column Id of the column on which sort is attempted.</param>  
            <param name="node1">First Node for comparision.</param>  
            <param name="node2">Second Node for comparision.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback">
            <summary> Represents the callback which gets called when label edit is attempted on any column. </summary>  
             <remarks>  The label edit is allowed/disallowed  
                   based on return value of this callback.<para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being edited.</param>  
            <param name="columnID">Column Id of the column on which label edit is performed.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnEndLabelEditCallback">
            <summary> Represents the callback which gets called when label edit is completed on any column. </summary>  
             <remarks>   
                   The edited label is accepted/rejected based on return value of this callback.<para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being edited.</param>  
            <param name="columnID">Column Id of the column on which label edit is performed.</param>  
            <param name="editedText">Text after edit. <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.AskEditControlCallback">
            <summary>Represents the callback which gets called when edit is attempted on any cell. Edit-control is  
                   made available on the cell based on control type returned by this callback. 
                   </summary>   
             <remarks>  
                   Use <see cref="M:NXOpen.BlockStyler.Tree.SetEditOptions(System.String[],System.Int32)"> BlockStyler.Tree.SetEditOptions </see> in this callback to show the options in the  
                   edit-control. Further BlockStyler.Tree.OnEditOptionSelectedCallback is called when option is selected. 
                  <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being edited.</param>  
            <param name="columnID">Column Id of the column on which edit is performed.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback">
            <summary> Represents the callback which gets called when user selects an option in edit-control set by  
                   BlockStyler. </summary>  
             <remarks> Tree.AskEditControlCallback. If returned <see cref="F:NXOpen.BlockStyler.Tree.EditControlOption.Accept"> BlockStyler.Tree.EditControlOption.Accept </see>  
                   then the edited option/text is accepted else it is rejected and old option/text remains.     
                  <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being edited.</param>  
            <param name="columnID">Column Id of the column on which edit is performed.</param>  
            <param name="selectedOptionID">Index of the selected option. -1 value suggests that edited text is not among the available options in edit-control; particularly useful when edit-control type is <see cref="F:NXOpen.BlockStyler.Tree.ControlType.ListBox"> BlockStyler.Tree.ControlType.ListBox </see>.</param>  
            <param name="selectedOptionText">The text being edited. <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="type">Edit-control type </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnMenuCallback">
            <summary> Represents the callback which gets called when MB3 or right click is attempted on node or tree. </summary>  
             <remarks>  Value of Node parameter is a null reference (Nothing in Visual Basic) if  
                   MB3 is attempted on area other than node. This distinction allows to have separate menu for node and tree. 
                   <para> 
                   The menu can be made available using two methods <see cref="M:NXOpen.BlockStyler.Tree.CreateMenu"> BlockStyler.Tree.CreateMenu </see> and  
                   <see cref="M:NXOpen.BlockStyler.Tree.SetMenu(NXOpen.BlockStyler.TreeListMenu)"> BlockStyler.Tree.SetMenu </see>. Subsequently BlockStyler.Tree.OnMenuSelectionCallback 
                   is invoked after the menu item is selected.      
                   </para> 
                  <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node on which MB3 is attempted or menu is invoked. a null reference (Nothing in Visual Basic) if MB3 is attempted on area other than node.</param>  
            <param name="columnID">Column Id of the column on which MB3 is attempted</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnMenuSelectionCallback">
            <summary> Represents the callback which gets called when one of the menu option is selected. </summary>  
             <remarks>   
                   Refer to callback BlockStyler.Tree.OnMenuCallback to make available the menu. 
                   <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node on which MB3 is attempted or menu is invoked. a null reference (Nothing in Visual Basic) if MB3 is attempted on area other than node.</param>  
            <param name="menuItemID">Menu item Id representing the selected menu item. This menu Id corresponds to the menu item added to the <see cref="T:NXOpen.BlockStyler.TreeListMenu"> BlockStyler.TreeListMenu </see> using <see cref="M:NXOpen.BlockStyler.TreeListMenu.AddMenuItem(System.Int32,System.String)"> BlockStyler.TreeListMenu.AddMenuItem </see>.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.IsDragAllowedCallback">
            <summary> Represents the callback which gets called when node is dragged. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being dragged.</param>  
            <param name="columnID">Column Id of the column where drag is attempted.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.IsDropAllowedCallback">
            <summary> 
                   Represents the callback which gets called when an attempt is made to drop the node on any target node. If multiple nodes  
                   are selected and dragged then this callback is invoked for each of the selected nodes.  
                   </summary>   
             <remarks>  
                   If node is dragged using MB3 then the callback BlockStyler.Tree.OnDropMenuCallback  
                   is invoked which is expected to provide and show the menu. Subsequently, BlockStyler.Tree.OnDropCallback 
                   might get invoked. 
                  <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being dragged and dropped on target node.</param>  
            <param name="columnID">Column Id of the column from where node is dragged.</param>  
            <param name="targetNode">Target node on which node is dropped.</param>  
            <param name="targetColumnID">Column Id of the column where node is dropped.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnDropCallback">
            <summary> Represents the callback which gets called when nodes are dropped on any target node. </summary>  
             <remarks>  This callback is invoked irrespective of case  
                   whether nodes are dragged using MB1 or MB3. If nodes are dragged using MB3 then BlockStyler.Tree.OnDropMenuCallback is called 
                   prior to the invocation of this callback.<para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Nodes dropped on any target node. The number of nodes might not be same as number of selected nodes as some of the selected node might disallow to drop itself on target node.</param>  
            <param name="columnID">Column Id of the column from where nodes are dragged.</param>  
            <param name="targetNode">Target node on which dragged nodes are dropped.</param>  
            <param name="targetColumnID">Column Id of the column where nodes are dropped.</param>  
            <param name="dropType">Drop type</param>  
            <param name="dropMenuItemId">Menu item Id representing the selected menu item. This menu Id corresponds to the menu item added to the <see cref="T:NXOpen.BlockStyler.TreeListMenu"> BlockStyler.TreeListMenu </see> using <see cref="M:NXOpen.BlockStyler.TreeListMenu.AddMenuItem(System.Int32,System.String)"> BlockStyler.TreeListMenu.AddMenuItem </see>. Refer to callback BlockStyler.Tree.OnDropMenuCallback to make available the menu while node drop.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnDropMenuCallback">
            <summary> Represents the callback to show the menu when nodes are dragged using MB3 or right mouse click, and dropped on any target node. </summary>  
             <remarks>   
                   
                  <para> 
                   The menu can be made available using two methods <see cref="M:NXOpen.BlockStyler.Tree.CreateMenu"> BlockStyler.Tree.CreateMenu </see> and  
                   <see cref="M:NXOpen.BlockStyler.Tree.SetMenu(NXOpen.BlockStyler.TreeListMenu)"> BlockStyler.Tree.SetMenu </see>. Subsequently, menu is shown and selected menu option is passed as paremeter in  
                   the callback BlockStyler.Tree.OnDropCallback        
                  </para>        
                   <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node on which drag initiated.</param>  
            <param name="columnID">Column Id of the column from where drag initiated</param>  
            <param name="targetNode">Target node on which dragged node is dropped.</param>  
            <param name="targetColumnID">Column Id of the column where nodes are dropped.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.TreeListMenu">
            <summary>  Represents a menu class utilized by <see cref="T:NXOpen.BlockStyler.Tree"> BlockStyler.Tree </see>. </summary>  
             <remarks>  
            Refer to <see cref="M:NXOpen.BlockStyler.Tree.CreateMenu"> BlockStyler.Tree.CreateMenu </see> to create the menu. 
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.AddMenuItem(System.Int32,System.String)">
            <summary>  Adds single menu item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Unique identifier for the menu item being added </param>  
            <param name="menuItemText"> Display text for menu item being added</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.AddMenuItem(System.Int32,System.String,System.String)">
            <summary>  Adds single menu item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Unique identifier for the menu item being added </param>  
            <param name="menuItemText"> Display text for menu item being added</param>  
            <param name="icon"> Icon for menu item being added</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.AddSeperator">
            <summary>  Adds a seperator  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetSubMenu(System.Int32,NXOpen.BlockStyler.TreeListMenu)">
            <summary>  Sets a submenu. </summary>  
             <remarks>   
                    Submenu can be created using <see cref="M:NXOpen.BlockStyler.Tree.CreateMenu"> BlockStyler.Tree.CreateMenu </see> method<para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu Item ID of menu item on which submenu is supposed to be set.</param>  
            <param name="subMenu"> Menu to be added as submenu </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                    it is illegal to use the object.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemChecked(System.Int32)">
            <summary> Gets the checked status for given menu item   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemChecked(System.Int32,System.Boolean)">
            <summary> Sets the checked status for given menu item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="checkedStatusStatus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemDisable(System.Int32)">
            <summary> Gets the flag indicating whether the given menu item is disabled   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemDisable(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the given menu item is disabled  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="disableStatus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemDefault(System.Int32)">
            <summary> Gets the flag indicating whether the given menu item is default   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemDefault(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the given menu item is default  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="defaultStatus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemHidden(System.Int32)">
            <summary> Gets the flag indicating whether the given menu item is hidden   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemHidden(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the given menu item is hidden  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="hiddenStatus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemDialogLaunching(System.Int32)">
            <summary> Gets the flag indicating whether the given menu item is dialog lanching   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemDialogLaunching(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the given menu item is dialog lanching  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="dialogLaunchingStaus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemIcon(System.Int32)">
            <summary>  Gets the icon for given menu item   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID </param>  
            <returns> Display text </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemIcon(System.Int32,System.String)">
            <summary>  Sets the icon for given menu item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID </param>  
            <param name="icon"> Display text </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemText(System.Int32)">
            <summary>  Gets the display text for given menu item   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID </param>  
            <returns> Display text </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemText(System.Int32,System.String)">
            <summary>  Sets the display text for given menu item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID </param>  
            <param name="text"> Display text </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard">
            <summary>  Represents a Wizard block  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.CreateStepSubNode(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>  Create a sub-node for a step in the Task Navigator. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="step"> The step to add a sub-node. </param>  
            <param name="text"> Text for the sub-node. </param>  
            <param name="bitmap"> Optional bitmap for the sub-node.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="showCheckBox"> Associate an optional check box with the sub-node </param>  
            <param name="checkBoxChecked"> The initial state of the check box. </param>  
            <returns> Unique id for the sub-node. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.RemoveStepSubNode(System.Int32)">
            <summary>  Remove a sub-node in the Task Navigator. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="subNodeId"> The sub-node id. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.CreateMenu">
            <summary>  Creates a popup menu. </summary>  
             <remarks>  Use <see cref="M:NXOpen.BlockStyler.Wizard.SetMenu(NXOpen.BlockStyler.TreeListMenu)"> BlockStyler.Wizard.SetMenu </see> to set 
                     the created menu.  See the <see cref="T:NXOpen.BlockStyler.TreeListMenu"> BlockStyler.TreeListMenu </see> for 
                     information on creating a menu.   <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetMenu(NXOpen.BlockStyler.TreeListMenu)">
            <summary>  Set the menu items for the popup menu for a step, sub-node or the background 
                    in the Task Navigator. </summary>  
             <remarks>   See the <see cref="T:NXOpen.BlockStyler.TreeListMenu"> BlockStyler.TreeListMenu </see> for 
                    information on creating a menu.<para>License requirements: None.</para> </remarks>  
             <param name="menu"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetStepNotifyPreHandler(NXOpen.BlockStyler.Wizard.StepNotifyPreCallback)">
            <summary>  Sets the StepNotifyPre handler. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetStepNotifyPostHandler(NXOpen.BlockStyler.Wizard.StepNotifyPostCallback)">
            <summary>  Sets the StepNotifyPost handler. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetIsStepOkayHandler(NXOpen.BlockStyler.Wizard.IsStepOkayCallback)">
            <summary>  Sets the IsStepOkay handler. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetOnSubNodeHandler(NXOpen.BlockStyler.Wizard.OnSubNodeCallback)">
            <summary>  Sets the OnSubNode handler. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetOnMenuHandler(NXOpen.BlockStyler.Wizard.OnMenuCallback)">
            <summary>  Sets the OnMenu handler. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetOnMenuSelectionHandler(NXOpen.BlockStyler.Wizard.OnMenuSelectionCallback)">
            <summary>  Sets the OnMenuSelection handler. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.TaskNavigatorItem">
            <summary>  Specifies an item in the Task Navigator. </summary>  
             <remarks>    </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.TaskNavigatorItem.Step">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.TaskNavigatorItem.SubNode">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.TaskNavigatorItem.Background">
            <summary>    </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.SubNodeAction">
            <summary>  Specifies the type of action performed on a sub-node in the Wizard Task Navigator. </summary>  
             <remarks>  
                    The action is passed into the callback BlockStyler.Wizard.OnSubNodeCallback.  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.SubNodeAction.Select">
            <summary>  Sub-node has been selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.SubNodeAction.Deselect">
            <summary>  Sub-node has been deselected.  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.SubNodeAction.Check">
            <summary>  Sub-node has been checked if a checkbox was specified.  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.SubNodeAction.Uncheck">
            <summary>  Sub-node has been unchecked if a checkbox was specified.  </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.StepNotifyPreCallback">
            <summary>  The StepNotifyPre callback notifies a client before navigating to the next step  
                    in the Wizard. </summary>  
             <remarks>   The nextStep parameter for the callback is zero based and represents 
                    the steps in the Wizard. <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="nextStep"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.StepNotifyPostCallback">
            <summary>  The StepNotifyPost callback notifies a client after navigating to the next step  
                    in the Wizard. </summary>  
             <remarks>   The nextStep parameter for the callback is zero based and represents 
                    the steps in the Wizard. <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="nextStep">  </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.IsStepOkayCallback">
            <summary>  The IsStepOkay callback allows the client to notify the Wizard that the step is okay 
                    or not. </summary>  
             <remarks>   Returns true if the step is okay and false otherwise. The step parameter for the 
                    callback is zero based and represents the steps in the Wizard.<para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="step"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.OnSubNodeCallback">
            <summary>  The OnSubNode callback notifies a client of an action performed 
                    on a sub-node in the Wizard Task Navigator. </summary>  
             <remarks>   The step 
                    parameter for the callback is zero based and represents the steps in the Wizard. 
                    The subNodeId parameter is the unique id returned by <see cref="M:NXOpen.BlockStyler.Wizard.CreateStepSubNode(System.Int32,System.String,System.String,System.Boolean,System.Boolean)"> BlockStyler.Wizard.CreateStepSubNode </see>.  <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="step"> </param>  
            <param name="subNodeId"> Unique id for the sub-node. </param>  
            <param name="action"> Action being performed on the sub-node. </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.OnMenuCallback">
            <summary>  The OnMenu callback notifies a client prior to creating the popup menu in the Task 
                    Navigator. </summary>  
             <remarks>   The item parameter specifies the popup menu was activated on a step, 
                    sub-node or the background. The step parameter for the callback is zero based and 
                    represents the steps in the Wizard.  The subNodeId parameter is the unique id returned 
                    by <see cref="M:NXOpen.BlockStyler.Wizard.CreateStepSubNode(System.Int32,System.String,System.String,System.Boolean,System.Boolean)"> BlockStyler.Wizard.CreateStepSubNode </see>. 
                    If the popup menu is invoked on the background of the Task Navigator the step and 
                    subNodeId parameters will be -1.  <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="item"> </param>  
            <param name="step"> </param>  
            <param name="subNodeId"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.OnMenuSelectionCallback">
            <summary>  The OnMenuSelection callback notifies a client of the menu item selection on the popup menu 
                    in the Task Navigator. </summary>  
             <remarks>   The item parameter specifies the popup menu was activated on a step, 
                    sub-node or the background. The step parameter for the callback is zero based and 
                    represents the steps in the Wizard.  The subNodeId parameter is the unique id returned 
                    by <see cref="M:NXOpen.BlockStyler.Wizard.CreateStepSubNode(System.Int32,System.String,System.String,System.Boolean,System.Boolean)"> BlockStyler.Wizard.CreateStepSubNode </see>.  The menuItemIndex parameter will 
                    be the unique id specified when creating menu items for the BlockStyler.TreeListMenu. 
                    If the popup menu is invoked on the background of the Task Navigator the step and 
                    subNodeId parameters will be -1.  <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="item"> </param>  
            <param name="step"> </param>  
            <param name="subNodeId"> </param>  
            <param name="menuItemIndex">  </param> 
        </member>
        <member name="T:NXOpen.CustomPopupMenu">
            <summary>  Represents Custom Popup Menu Item class  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenuItem">
            <summary>  Represents Custom Popup Menu Item class  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenuItem.GetId">
            <summary>  Returns Id of the menu item. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <returns> Id of the menu</returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuItem.GetName">
            <summary>  Returns name of the menu item. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <returns> Name of the menu item </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuItem.SetDisabled">
            <summary>  Sets the menu disabled  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenuItem.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                 <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenu.AddMenuItem(System.Int32,System.String)">
            <summary>  Adds and returns a menu item to this menu   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemId"> Id of the menu item </param>  
            <param name="menuItemName"> name of the menu item  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> menu item </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenu.AddMenu(System.Int32,System.String)">
            <summary>  Adds and returns a menu to this menu   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuId"> Id of the menu </param>  
            <param name="menuName"> name of the menu  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> menu </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenu.AddMenuSeparator">
            <summary>  Adds a separator in the submenu  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenu.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                 <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenuHandler">
            <summary>  Represents Custom Popup Menu Handler class  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.RegisterAddCustomPopupMenuCallback(NXOpen.CustomPopupMenuHandler.AddCustomPopupMenuCallback)">
            <summary> Registers the add_custom_popup_menu_callback callback method with the popup menu 
                   handler object. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="popupCb"> </param> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.RegisterCustomPopupMenuInvokedCallback(NXOpen.CustomPopupMenuHandler.CustomPopupMenuInvokedCallback)">
            <summary> Registers the add_custom_popup_menu_callback callback method with the popup menu 
                   handler object. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="popupCb"> </param> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.GetSelectedNodes(NXOpen.TreeListNode[]@)">
            <summary>  Returns a list of node(s) selected during a RMB click. </summary>  
             <remarks>  Customer can call this query API 
                     inside the implementation of <see cref="T:NXOpen.CustomPopupMenuHandler.AddCustomPopupMenuCallback"> AddCustomPopupMenuCallback </see> or  
                     <see cref="T:NXOpen.CustomPopupMenuHandler.CustomPopupMenuInvokedCallback"> CustomPopupMenuInvokedCallback </see> to obtain additional information <para>License requirements: None.</para> </remarks>  
             <param name="selectedNodes"> Selected Nodes </param> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.GetInvokedCommand">
            <summary> Returns the menu item for the command invoked   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> menu item </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                 <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.AddMenu(System.Int32,System.String)">
            <summary>  Adds and returns a menu to the COTS (Commercial, off-the-shelf) RMB menu  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuId"> Id of the menu </param>  
            <param name="menuName"> name of the menu  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> menu </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.AddMenuItem(System.Int32,System.String)">
            <summary>  Adds and returns a menu item to the COTS (Commercial, off-the-shelf) RMB menu  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="menuItemId"> Id of the menu item </param>  
            <param name="menuItemName"> name of the menu item  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> menu item </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.AddMenuSeparator">
            <summary>  Adds a separator to the COTS (Commercial, off-the-shelf) RMB menu </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenuHandler.AddCustomPopupMenuCallback">
            <summary> This callback will be invoked by NX application when a RMB click is performed on  
                   NX Tc Navigator application. </summary>  
             <remarks>  Customer can query the selected object(s) and set  
                   the cascading custom popup menu to be appended to the existing COTS (Commercial, off-the-shelf) 
                   RMB popup menu.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenuHandler.CustomPopupMenuInvokedCallback">
            <summary> This callback will be invoked by NX when user clicks on a custom menu item. </summary>  
             <remarks>  The picked menu 
                   and object(s) selected can be queried from within this callback.The custom implementation can  
                   perform appropriate action associated with this menu pick. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager">
            <summary>  Interface for the MenuBarManager object  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.AddMenuAction(System.String,NXOpen.MenuBar.MenuBarManager.ActionCallback)">
            <summary>   
                      Adds the action callback. </summary>  
             <remarks>  
                     <para>License requirements: None.</para> </remarks>  
             <param name="name"> The name of the action.  This name must match the string used in the .men file.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="actionCallback"> The method to execute for this action </param> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.GetButtonFromName(System.String)">
            <summary>  Finds the MenuButton associated with the given name   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="name"> The name of the button.  This name must match the button name used in the .men file.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> The button associated with the given name </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.RegisterApplication(System.String,NXOpen.MenuBar.MenuBarManager.InitializeMenuApplication,NXOpen.MenuBar.MenuBarManager.EnterMenuApplication,NXOpen.MenuBar.MenuBarManager.ExitMenuApplication,System.Boolean,System.Boolean,System.Boolean)">
            <summary>   
                      Registers the application 
                       </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="name"> The name of the application.  This name must match the string used in the .men file.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="initializeCallback"> The method used to initialize the application </param>  
            <param name="enterCallback"> The method called when entering the application </param>  
            <param name="exitCallback"> The method called when exiting the application </param>  
            <param name="supportsDrawings"> Does this application support drawings? </param>  
            <param name="supportsDesignInContext"> Does this application support design in context? </param>  
            <param name="supportsUndo"> Does this application support undo? </param>  
            <returns> Unique identifier for the registered application </returns> 
        </member>
        <member name="P:NXOpen.MenuBar.MenuBarManager.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.CallbackStatus">
            <summary>  Return values for action callbacks  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.Continue">
            <summary>  Continue performing the menu item's actions.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.Cancel">
            <summary>  User interaction requested inhibiting the  
                                                                           menu item's actions.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.OverrideStandard">
            <summary>  Inhibit further actions because a pre  
                                                                                      action took the place of the standard  
                                                                                      action for a standard NX menu item.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.Warning">
            <summary>  Inhibit further actions because a  
                                                                            warning condition was raised.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.Error">
            <summary>  Inhibit further actions because a  
                                                                          error condition was raised.  </summary>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.ActionCallback">
            <summary>  Prototype for the action callbacks  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="buttonEvent"> The reason for executing the callback </param> 
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.InitializeMenuApplication">
            <summary>  Prototype for application initialization callback  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.EnterMenuApplication">
            <summary>  Prototype for callback called whenever the application is entered  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.ExitMenuApplication">
            <summary>  Prototype for callback called whenever the application is exited  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButton">
            <summary>  Implements the Object for Menu Buttons  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.MenuButton.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is 
                        called, it is illegal to use the object.  In .NET and Java, 
                        his method is automatically called when the object is 
                        deleted by the garbage collector.  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonId">
            <summary>  Returns  the identifier of the button. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonName">
            <summary>  Returns  the name of the button. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonSensitivity">
            <summary>  Returns or sets  the sensitivity of the button. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonType">
            <summary>  Returns  the type of the button. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonTypeName">
            <summary>  Returns  the type name of the button. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ToggleStatus">
            <summary>  Returns or sets  the toggle status of the button. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButton.Type">
            <summary>  Available button types  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.CascadeButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.PushButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.ToggleButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.Separator">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.ApplicationButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.NullButton">
            <summary>    </summary>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButton.SensitivityStatus">
            <summary>  Sensitivity Status  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.SensitivityStatus.Sensitive">
            <summary>  The button is sensitive.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.SensitivityStatus.Insensitive">
            <summary>  The button is insensitive.  </summary>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButton.Toggle">
            <summary>  Toggle Status  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Toggle.On">
            <summary>  The toggle is on.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Toggle.Off">
            <summary>  The toggle is off.  </summary>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButtonEvent">
            <summary>  Implements the Event Object for Menu Buttons  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.MenuButtonEvent.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is 
                        called, it is illegal to use the object.  In .NET and Java, 
                        his method is automatically called when the object is 
                        deleted by the garbage collector.  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.MenuButtonEvent.GetMenuAncestors">
            <summary>  Get the ancestors of the active button. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <returns> The ancestors that caused the event to fire </returns> 
        </member>
        <member name="P:NXOpen.MenuBar.MenuButtonEvent.ActiveButton">
            <summary>  Returns  the activated MenuButton. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButtonEvent.ApplicationId">
            <summary>  Returns  the activated MenuButton's owning application identifier. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButtonEvent.MenuBarName">
            <summary>  Returns  the name of the menu bar. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MovieManager">
            <summary>  Represents a <see cref="T:NXOpen.MovieManager"> MovieManager </see> class. This class is used  
                for recording movies. 
             </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MovieManager.CreateMovieSettingsBuilder">
            <summary>  Creates a <see cref="T:NXOpen.MovieSettingsBuilder"> MovieSettingsBuilder </see>   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.MovieManager.Start(System.String,System.Boolean)">
            <summary>  Starts movie recording  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="filename"> Filename of the movie to be createed  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="userFrames"> If true, user will provide frames through <see cref="M:NXOpen.MovieManager.CaptureFrame"> MovieManager.CaptureFrame </see>. If false, system generates frames </param> 
        </member>
        <member name="M:NXOpen.MovieManager.Pause">
            <summary>  Pauses movie recording  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MovieManager.Resume">
            <summary>  Resumes movie recording  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MovieManager.End">
            <summary>  Stops movie recording  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MovieManager.CaptureFrame">
            <summary>  Use this method to capture a frame at a specified point. </summary>  
             <remarks>  This is used when the 
                    movie recording was started with true as the second parameter of <see cref="M:NXOpen.MovieManager.Start(System.String,System.Boolean)"> MovieManager.Start </see> 
                <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieManager.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="T:NXOpen.MovieSettingsBuilder">
            <summary>  This class is the builder for the Movie Settings. </summary>  
             <remarks>  <para>To create a new instance of this class, use <see cref="M:NXOpen.MovieManager.CreateMovieSettingsBuilder"> MovieManager.CreateMovieSettingsBuilder </see></para> 
            Default values. 
            <list type="table">  
              
            <listheader><term>  
            Property</term>  <description>  
            Value</description> </listheader> 
            <item><term>  
              
            CaptureArea </term> <description>  
              
            Graphics </description> </item>  
             
            <item><term>  
              
            FramesPerSecond </term> <description>  
              
            10 </description> </item>  
             
            <item><term>  
              
            PlaybackSpeed </term> <description>  
              
            AsRecorded </description> </item>  
             
            </list>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieSettingsBuilder.CaptureArea">
            <summary>  Returns or sets  the area captured for movie creation. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieSettingsBuilder.CodecFourcc">
            <summary>  Returns or sets  the Codec that is used to create the movie. </summary>  
             <remarks>   
                <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieSettingsBuilder.FramesPerSecond">
            <summary>  Returns or sets  the frames per second for the movie. </summary>  
             <remarks>  This setting dictates the quality of the movie that is created. 
                    A smaller value would create a coarse movie with small file size, whereas, a bigger  
                    value would create a smooth movie with a big file size 
                    <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieSettingsBuilder.PlaybackSpeed">
            <summary>  Returns or sets  the speed at which the recorded movie is played back. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MovieSettingsBuilder.CaptureAreaChoices">
            <summary>  Indicates the are being recorded in the movie. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.CaptureAreaChoices.Graphics">
            <summary>  Specifies that the NX graphics contents are to be recorded  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.CaptureAreaChoices.NxWindow">
            <summary>  Specifies that the NX window contents are to be recorded  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.CaptureAreaChoices.Desktop">
            <summary>  Specifies that the Desktop contents are to be recorded  </summary>  
              
        </member>
        <member name="T:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices">
            <summary>  Indicates the playback speed of the movie. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.VerySlow">
            <summary>  Specifies very slow playback speed (quarter of record speed)  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.Slow">
            <summary>  Specifies slow playback speed (half of record speed)  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.AsRecorded">
            <summary>  Specifies playback speed same as record speed  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.Fast">
            <summary>  Specifies fast playback speed (twice record speed)  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.VeryFast">
            <summary>  Specifies very fast playback speed (four times record speed)  </summary>  
              
        </member>
        <member name="T:NXOpen.NXMessageBox">
            <summary>  Displays message box  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.NXMessageBox.Show(System.String,NXOpen.NXMessageBox.DialogType,System.String)">
            <summary>  Show message box. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="title"> Title  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="msgboxType"> Message box type </param>  
            <param name="message"> Message  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> Return value from Message Box </returns> 
        </member>
        <member name="M:NXOpen.NXMessageBox.Show(System.String,NXOpen.NXMessageBox.DialogType,System.String[])">
            <summary>  Show message box. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="title"> Title  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="msgboxType"> Message box type </param>  
            <param name="messages"> Multi-line message  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> Return value from Message Box </returns> 
        </member>
        <member name="P:NXOpen.NXMessageBox.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="T:NXOpen.NXMessageBox.DialogType">
            <summary>  Describes type of message box. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.NXMessageBox.DialogType.Error">
            <summary>  Error  </summary>  
              
        </member>
        <member name="F:NXOpen.NXMessageBox.DialogType.Warning">
            <summary>  Warning  </summary>  
              
        </member>
        <member name="F:NXOpen.NXMessageBox.DialogType.Information">
            <summary>  Informattion  </summary>  
              
        </member>
        <member name="F:NXOpen.NXMessageBox.DialogType.Question">
            <summary>  Question  </summary>  
              
        </member>
        <member name="T:NXOpen.PDM.PdmNavigatorNode">
            <summary>  Represents a PdmNavigatorNode  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="T:NXOpen.TreeListNode">
            <summary>  Represents a TreeList Node Object  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.PDM.PdmNavigatorNode.GetUid">
            <summary>  Returns the unique identifier of the PdmNavigatorNode in PDM   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.PDM.PdmNavigatorNode.GetNodeType">
            <summary>  Returns the type of the PdmNavigatorNode in PDM   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="T:NXOpen.Preferences.ObjectPreferences">
            <summary>  Captures the UI based calls required for Object Preferences  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.Preferences.ObjectPreferences.ResetSessionTranslucency(System.Boolean,NXOpen.Preferences.ObjectPreferences.Translucency@)">
            <summary>  Resets the session translucency  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="option"> User can set TRUE or FALSE </param>  
            <param name="sessionTranslucency"> Return Value </param> 
        </member>
        <member name="M:NXOpen.Preferences.ObjectPreferences.SetSessionTranslucency(NXOpen.Preferences.ObjectPreferences.Translucency,NXOpen.Preferences.ObjectPreferences.Translucency@)">
            <summary>  Sets the session translucency  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="option">  </param>  
            <param name="sessionTranslucency"> Return Value </param> 
        </member>
        <member name="P:NXOpen.Preferences.ObjectPreferences.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="T:NXOpen.Preferences.ObjectPreferences.Translucency">
            <summary>  Describes whether the translucency is enabled or disabled  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.ObjectPreferences.Translucency.Disabled">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.ObjectPreferences.Translucency.Enabled">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.ObjectPreferences.Translucency.TemporarilyEnabled">
            <summary>    </summary>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionUserInterfaceUI">
            <summary>  Represents all UI based session user interface preferneces. </summary>  
             <remarks>  Other User Interface settings are  
            available with <see cref="T:NXOpen.Preferences.SessionUserInterface"> SessionUserInterface </see> for settings applicable to session and  
            with <see cref="T:NXOpen.Preferences.PartUserInterface"> PartUserInterface </see> for User Interface Preferences applicable 
            to part <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.Preferences.SessionUserInterfaceUI.ResetDialogBoxSettings">
            <summary>  Resets all dialog box settings  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.ConfirmUndo">
            <summary>  Returns or sets  the confirm undo flag  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DialogBarDecimalPlaces">
            <summary>  Returns or sets  the dialog box decimal places  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DialogBarTracking">
            <summary>  Returns or sets  the dialog bar tracking flag  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayAlertsOnInformation">
            <summary>  Returns or sets  the option "Display Alerts on Information" gives choice, whether the 
                 user wants the Diagnostic alerts appear when  
                 features contain information messages during feature  
                 creation, edit, and update. </summary>  
             <remarks>  
                 if the option is true then the diagnostic alerts will appear. 
                 if the option is false then diagnostic alerts will not appear. 
                 Use <see cref="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayAlertsOnWarnings"> DisplayAlertsOnWarnings </see> for display of 
                 alerts on warnings. Alerts are 
                 always displayed for errors and display of alerts on errors can not be 
                 changed. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayAlertsOnWarnings">
            <summary>  Returns or sets  the option "Display Alerts on Warnings" gives choice, whether the 
                 user wants the Diagnostic alerts appear when  
                 features contain warnings during feature  
                 creation, edit, and update. </summary>  
             <remarks>  
                 if the option is true then the diagnostic alerts will appear. 
                 if the option is false then diagnostic alerts will not appear. 
                 Use <see cref="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayAlertsOnInformation"> DisplayAlertsOnInformation </see> for display of 
                 alerts on information messages. Alerts are 
                 always displayed for errors and display of alerts on errors can not be 
                 changed. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayDialogsInPlayback">
            <summary>  Returns or sets  the display dialogs in playback flag  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayResourceBarOption">
            <summary>  Returns or sets  the display resource bar option  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.HomePageURL">
            <summary>  Returns or sets  the home page URL  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.InitialDialogDisplay">
            <summary>  Returns or sets  the initial dialog display flag  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.ListingDecimalPlaces">
            <summary>  Returns or sets  the listing decimal places </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.PagesAutomaticallyFlyOut">
            <summary>  Returns or sets  the pages automatically fly outflag  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.PauseDuration">
            <summary>  Returns or sets  the pause duration  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.RecordAllTransform">
            <summary>  Returns or sets  the record all transform flag  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.SaveLayoutAtExit">
            <summary>  Returns or sets  the save layout at exit flag. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.UseSystemPrecision">
            <summary>  Returns or sets  the use system precision flag. </summary>  
             <remarks>  True uses the system precision <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionUserInterfaceUI.DisplayResourceBar">
            <summary>  Describes whether the resource bar is displayed on left or right of window  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionUserInterfaceUI.DisplayResourceBar.Left">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionUserInterfaceUI.DisplayResourceBar.Right">
            <summary>    </summary>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionVisualizationShade">
            <summary>  Represents the UI related Visualization Shade preferences. </summary>  
             <remarks>  These preferences are maintained at 
            UI level and applicable to entire session <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.Preferences.SessionVisualizationShade.RegenerateStudioAnalysisViewsFromTolChange(System.Boolean)">
            <summary>  Regenerates Studio Analysis Views. </summary>  
             <remarks>  Updates all objects based on their surfacing tolerance. <para>License requirements: None.</para> </remarks>  
             <param name="updateEnvOption"> Send TRUE if env cube updation is required. Else send FALSE </param> 
        </member>
        <member name="M:NXOpen.Preferences.SessionVisualizationShade.RegenerateShadedViewsFromToleranceChange">
            <summary>  Regenerates Shaded Views. </summary>  
             <remarks>  Updates all objects based on their surfacing tolerance. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.EdgesEmphasis">
            <summary>  Returns or sets  the edge emphasis flag. </summary>  
             <remarks> Alters how edges are displayed when Shaded Face Edges is flag is true. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.LwrtStudioDisplay">
            <summary>  Returns or sets  the lwrt studio display flag. </summary>  
             <remarks> Alters how studio are displayed. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.SeeThru">
            <summary>  Returns or sets  the see-thru setting that determines whether translucency is applied to less important shaded geometry. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.SeeThruStyle">
            <summary>  Returns or sets  the see-thru style that determines how translucency is applied to less important shaded geometry. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.SeeThruStyleOptions">
            <summary>  Returns or sets  the See-Thru color, edge, and translucency options used for the  
                    various See-Thru Styles. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.ShowFacetEdges">
            <summary>  Returns or sets  the show facet edge flag. </summary>  
             <remarks>  Toggles the display of facet edges. If this flag is true it can help  
                when trying to evaluate or interpret faceted edges. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionVisualizationShade.SeeThruStyleType">
            <summary>  Determines how translucency is applied to less important shaded  
                    geometry when See-Thru is enabled. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruStyleType.Shell">
            <summary>   
                        Displays less important shaded geometry as a translucent shell  
                        with a specified color.  </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruStyleType.OriginalColorShell">
            <summary>   
                        Displays less important shaded geometry as a translucent shell,  
                        preserving original shaded geometry colors.  </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruStyleType.Layers">
            <summary>   
                        Displays less important shaded geometry as translucent layers  
                        with a specified color.  </summary>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionVisualizationShade.SeeThruEdgesType">
            <summary>  Determines whether edges are displayed for less important shaded  
                    geometry when See-Thru is enabled. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruEdgesType.Off">
            <summary>   
                        Displays no edges for less important shaded geometry.  </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruEdgesType.Normal">
            <summary>   
                        Displays edges for less important shaded geometry if edges  
                        are normally displayed for shaded geometry.  </summary>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionVisualizationShade.Rgb">
            <summary>  Specifies a color by its red, green, and blue values, where each  
                    value is between 0 and 1. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.Rgb.Red">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.Rgb.Green">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.Rgb.Blue">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.Preferences.SessionVisualizationShade.Rgb.#ctor(System.Double,System.Double,System.Double)">
            <summary>  Constructor for the Rgb struct. </summary>  
             <remarks>   </remarks>  
              
            <param name="Red"> </param>  
            <param name="Green"> </param>  
            <param name="Blue"> </param>  
        </member>
        <member name="T:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions">
            <summary>  Specifies the See-Thru color, edge, and translucency options used  
                    for the various See-Thru Styles. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.ShellRgb">
            <summary>   
                        Specifies the color of less important shaded geometry when  
                        See-Thru Style is set to Shell. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.ShellEdges">
            <summary>   
                        Determines whether edges are displayed for less important  
                        shaded geometry when See-Thru Style is set to Shell. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.ShellEdgesRgb">
            <summary>   
                        Specifies the color of edges displayed for less important  
                        shaded geometry when See-Thru Style is set to Shell. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.ShellTranslucency">
            <summary>   
                        Translucency percentage applied to less important shaded  
                        geometry when See-Thru Style is set to Shell. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.OriginalColorShellEdges">
            <summary>   
                        Determines whether edges are displayed for less important  
                        shaded geometry when See-Thru Style is set to Original  
                        Color Shell. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.OriginalColorShellEdgesRgb">
            <summary>   
                        Specifies the color of edges displayed for less important  
                        shaded geometry when See-Thru Style is set to Original  
                        Color Shell. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.OriginalColorShellTranslucency">
            <summary>   
                        Translucency percentage applied to less important shaded  
                        geometry when See-Thru Style is set to Original Color Shell. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.LayersRgb">
            <summary>   
                        Specifies the color of less important shaded geometry when  
                        See-Thru Style is set to Layers. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.LayersEdges">
            <summary>   
                        Determines whether edges are displayed for less important  
                        shaded geometry when See-Thru Style is set to Layers. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.LayersEdgesRgb">
            <summary>   
                        Specifies the color of edges displayed for less important  
                        shaded geometry when See-Thru Style is set to Layers. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionVisualizationShade.SeeThruOptions.LayersTranslucency">
            <summary>   
                        Translucency percentage applied to less important shaded  
                        geometry when See-Thru Style is set to Layers. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionVisualizationVisual">
            <summary>  Represents all UI based session Visualization visual preferences  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.FullSceneAntialiasing">
            <summary>  Returns or sets  the scene antialiasing flag. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.LineAntialiasing">
            <summary>  Returns or sets  the line antialiasing flag. </summary>  
             <remarks>  True value specifies that lines, curves, and edges are drawn more smoothly <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.Translucency">
            <summary>  Returns or sets  the translucency flag. </summary>  
             <remarks>  True value specifies that each shaded object is drawn with the translucency setting  
                specified with Edit-&gt;Object Display. False value specify that all objects in Fully Shaded or Partially Shaded  
                views appear opaque, regardless of their individual translucency settings.  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.VisualizationLine">
            <summary>  This class is for UI related preferences changes  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.Preferences.VisualizationLine.RegenerateFromToleranceChange(System.Boolean,System.Boolean)">
            <summary>  Regenerates after changing tolerance  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="updateModeChange"> whether update_mode has changed </param>  
            <param name="studio"> studio or non studio </param> 
        </member>
        <member name="M:NXOpen.Preferences.VisualizationLine.UpdateLineFontObjects(System.Boolean)">
            <summary>  Updates the UI after line font is changed  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="doSoftwareUpdate"> The do_software_update flag should be set to TRUE when changing 
                                                                from software fonts to hardware fonts or when changing dash </param> 
        </member>
        <member name="P:NXOpen.Preferences.VisualizationLine.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="P:NXOpen.Preferences.VisualizationLine.DepthSortedWireframe">
            <summary>  Returns or sets  the depth sorted wireframe. </summary>  
             <remarks>  Specifies whether the graphics driver should sort objects by depth in wireframe views. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.VisualizationLine.WireframeContrast">
            <summary>  Returns or sets  whether colors applied to wireframe geometry are automatically adjusted as necessary to produce a minimum contrast relative to the view background. </summary>  
             <remarks>  The option affects onscreen displays only, so it affects interactive displays and raster images captured from interactive displays. It does not affect vector output produced by Plot, Print, CGM Export and similar functions. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Selection">
            <summary>  Defines an interface object for executing selection operations  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">
            <summary>  Select objects   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="title"> Dialog title  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="scope"> Selection scope </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,NXOpen.Selection.SelectionAction,System.Boolean,System.Boolean,NXOpen.Selection.MaskTriple[],NXOpen.NXObject[]@)">
            <summary>  Select objects using filter defined by mask triples   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="title"> Dialog title  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="scope"> Selection scope </param>  
            <param name="action"> Indicates how the mask array will modify the selection filter </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="maskArray"> Modifies the list of object types that can be selected. 
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,NXOpen.Selection.SelectionType[],NXOpen.NXObject[]@)">
            <summary>  Select objects using filter defined by selection type   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="title"> Dialog title  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="scope"> Selection scope </param>  
            <param name="keepHighlighted"> Whether to allow the selection of features </param>  
            <param name="typeArray"> The types that can be selected </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject@,NXOpen.Point3d@)">
            <summary>  Select object   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="title"> Dialog title  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="scope"> Selection scope </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObject(System.String,System.String,NXOpen.Selection.SelectionScope,NXOpen.Selection.SelectionAction,System.Boolean,System.Boolean,NXOpen.Selection.MaskTriple[],NXOpen.NXObject@,NXOpen.Point3d@)">
            <summary>  Select object using filter defined by mask triples   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="title"> Dialog title  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="scope"> Selection scope </param>  
            <param name="action"> Indicates how the mask array will modify the selection filter </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="maskArray"> Modifies the list of object types that can be selected. 
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,NXOpen.Selection.SelectionType[],NXOpen.NXObject@,NXOpen.Point3d@)">
            <summary>  Select object using filter defined by selection type   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="title"> Dialog title  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="scope"> Selection scope </param>  
            <param name="keepHighlighted"> Whether to allow the selection of features </param>  
            <param name="typeArray"> The types of objects that can be selected </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectFeatures(System.String,NXOpen.Selection.SelectionFeatureType,NXOpen.Features.Feature[]@)">
            <summary>  Select features   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="featType"> The types of features that are selectable </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="featureArray"> The selected features </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectScreenPosition(System.String,NXOpen.View@,NXOpen.Point3d@)">
            <summary>  Select screen position on graphics display   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> Pick, Back, or Cancel </returns>  
            <param name="object"> View of selected screen location </param>  
            <param name="screenPosition"> Selected screen position </param> 
        </member>
        <member name="M:NXOpen.Selection.GetNumSelectedObjects">
            <summary>  Returns the number of objects currently selected   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> The number of objects currently selected </returns> 
        </member>
        <member name="M:NXOpen.Selection.GetSelectedObject(System.Int32)">
            <summary>  Returns the n'th object on the selection list      </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="index"> The index. Should be between 0 and <see cref="M:NXOpen.Selection.GetNumSelectedObjects"> GetNumSelectedObjects </see> </param>  
            <returns> The object at the given position on the selection list. Returns a null reference (Nothing in Visual Basic) if the index parameter 
                                                    is greater than the length of the list </returns> 
        </member>
        <member name="M:NXOpen.Selection.SetSelectionMask(NXOpen.SelectionHandle,NXOpen.Selection.SelectionAction,NXOpen.Selection.MaskTriple[])">
            <summary>  Sets the types of objects that are selectable. </summary>  
             <remarks>  If this function is not 
                    called to set the mask, then the default mask is all standard types. 
                <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="action"> Mask action </param>  
            <param name="maskArray"> Mask triples </param> 
        </member>
        <member name="M:NXOpen.Selection.SetSelectType(NXOpen.SelectionHandle,NXOpen.Selection.UistylerSelectionType)">
            <summary>  Sets the selection type. </summary>  
             <remarks>  It can be called from a callback to change  
                the type of selection associated with the dialog. <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="type"> Selection type </param> 
        </member>
        <member name="M:NXOpen.Selection.SetSelectionCallbacks(NXOpen.SelectionHandle,NXOpen.Selection.FilterCallback,NXOpen.Selection.SelectionCallback)">
            <summary>  Specify selection filter callback for additional filtering based on 
                    application specific criteria, and/or selection callback to perform 
                    application specific processing for each selection gesture processed. </summary>  
             <remarks>   
                    Both the filter callback and the selection callback are passed object  
                    to <see cref="T:NXOpen.SelectionHandle">  SelectionHandle  </see> which can be used to inquire  
                    other selection data or modify selection. This selection handle object  
                    is no longer valid after the filter callback or selection callback is exited. 
                <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="filterproc"> Filter callback for additional user specific 
            filtering. </param>  
            <param name="selcb"> Selection callback for application specific 
            processing. </param> 
        </member>
        <member name="M:NXOpen.Selection.GetSelectionStatusOfUserDefinedClass(NXOpen.UserDefinedObjects.UserDefinedClass)">
            <summary>  Gets whether or not the user defined class is available for selection. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="udoClass"> The UserDefinedClass in question </param>  
            <returns> Allow the selection of this UserDefinedClass </returns> 
        </member>
        <member name="M:NXOpen.Selection.SetSelectionStatusOfUserDefinedClass(NXOpen.UserDefinedObjects.UserDefinedClass,System.Boolean)">
            <summary>  Sets whether or not the user defined class is available for selection. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="udoClass"> The UserDefinedClass in question </param>  
            <param name="selectionStatus"> Allow the selection of this UserDefinedClass </param> 
        </member>
        <member name="M:NXOpen.Selection.RemoveFromSelectionList(NXOpen.SelectionHandle,NXOpen.NXObject[],System.Boolean)">
            <summary>  Removes objects from the selection list. </summary>  
             <remarks>  
                This function is to be used with dialogs created with the UIStyler and 
                with the <see cref="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">  SelectObjects  </see> function. It can be called 
                from the selection callback. It cannot be called from the selection filter procedure. 
                 
                If any of the objects are not in the list, an error is returned and NO 
                objects are removed from the list. 
                 
                It could be called by the selection callback to remove 
                objects from the selection list. For example, based on objects just 
                deselected, the application may need to remove other associated 
                objects from the selection list. 
                <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objs"> Array of object </param>  
            <param name="unhighlight"> If true, unhighlight objects </param> 
        </member>
        <member name="M:NXOpen.Selection.RemoveAllFromSelectionList(NXOpen.SelectionHandle,System.Boolean)">
            <summary>  Removes all the objects from the selection list and optionally unhighlights them. </summary>  
             <remarks>  
                You use this function with dialogs created with the UIStyler and with the  
                <see cref="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">  SelectObjects  </see> function. 
                <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="unhighlight"> If true, unhighlight objects </param> 
        </member>
        <member name="M:NXOpen.Selection.IsObjectInSelectionList(NXOpen.SelectionHandle,NXOpen.NXObject)">
            <summary>  Inquires if object is selected. </summary>  
             <remarks>  
                You use this function with dialogs created with the UIStyler and with 
                the <see cref="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">  SelectObjects  </see> function. 
                 <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="object"> Object </param>  
            <returns> If true, object is in the selection list, else false. </returns> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionListCount(NXOpen.SelectionHandle)">
            <summary>  Returns the number of objects currently selected. </summary>  
             <remarks>  
                You can use this function with UIStyler dialogs and with 
                <see cref="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">  SelectObjects  </see>. 
                 <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <returns> Count of objects selected </returns> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionObjectList(NXOpen.SelectionHandle,NXOpen.NXObject[]@)">
            <summary>  Returns the number of objects selected and a pointer to an array of 
                tags of the objects selected. </summary>  
             <remarks>  You can use this function with the UIStyler dialogs and with 
                <see cref="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">  SelectObjects  </see>. <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objects"> Selected objects. </param> 
        </member>
        <member name="M:NXOpen.Selection.AddToSelectionList(NXOpen.SelectionHandle,NXOpen.NXObject[],System.Boolean)">
            <summary>  Add objects to the selection list. </summary>  
             <remarks>  
                Any objects already in the selection list are ignored. You can use this function  
                with UIStyler dialogs and with the <see cref="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">  SelectObjects  
                 </see> function. You can call this from the constructor callback/selection 
                 initialization procedure to begin the dialog with objects already selected.  
                 The user can then review these objects, and if desired, deselect them. 
                 
                The application selection callback can also call this function to add other objects  
                to the selection list based on the objects(s) just selected. The selection filter  
                procedure cannot call this function. You cannot use this function with  
                <see cref="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">  SelectObjects  </see>. Based on the object(s) just selected, other  
                objects may need to be selected. For example, all edges of the selected face  
                or all faces tangent to the selected face. 
                <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objs"> Objects to be added in the selection list </param>  
            <param name="highlightFlag"> If true, highlight objects </param> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionDescriptor(NXOpen.SelectionHandle)">
            <summary>  Returns the information in <see cref="T:NXOpen.Selection.SelectionDescriptor">  Selection.SelectionDescriptor  </see>  
                describing the selection that was just performed. </summary>  
             <remarks>  
                 <para>License requirements: None.</para> </remarks>  
             <param name="select"> </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionCursorPosition(NXOpen.SelectionHandle,NXOpen.View@)">
            <summary>  Returns the view and absolute coordinates of the cursor position for the associated selection. </summary>  
             <remarks>   
                    If an object was selected, the view returned is the view in which the object was selected.  
                    For single position, the view is the view of the cursor. If the object was selected by name,  
                    view = a null reference (Nothing in Visual Basic) and the cursor position is undefined. 
                 <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="view"> </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionRectanglePosition(NXOpen.SelectionHandle,NXOpen.Point3d@,NXOpen.Point3d@,NXOpen.Point3d@,NXOpen.Point3d@)">
            <summary>  Returns the absolute coordinates of the rectangle cursor positions. </summary>  
             <remarks>  
                The view that returns is the view of the button down position. 
                 
                button down position - is the position where you press and hold mouse button 1. 
                button up position -   is the position where you release mouse button 1. 
                 
                Pos1 and Pos2 are the absolute coordinates of the button down and 
                button up positions respectively. Pos3 is the absolute coordinates of 
                the rectangle corner which, as viewed on the screen, is horizontal with 
                pos1. Pos4 is the absolute coordinates of the rectangle corner which, 
                as viewed on the screen, is horizontal with pos2. 
                Returns an error if the last gesture was not rectangle. 
                 <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="position1"> Absolute coordinates of the button down position </param>  
            <param name="position2"> Absolute coordinates of the button up position </param>  
            <param name="position3"> Absolute coordinates of corner of screen rectangle 
                                           which is horizontal with button down position</param>  
            <param name="position4"> Absolute coordinates of corner of screen rectangle 
                                           which is horizontal with button up position </param>  
            <returns> View of button down position </returns> 
        </member>
        <member name="P:NXOpen.Selection.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="T:NXOpen.Selection.SelectionScope">
            <summary>  
                    Indicates the scope for selecting objects. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.UseDefault">
            <summary>  Use the default selection scope  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.WorkPart">
            <summary>  Use the work part  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.AnyInAssembly">
            <summary>  Use any occurrence in the assembly  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.WorkPartAndOccurrence">
            <summary>  Use the work part or any occurrence  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.SelectionAction">
            <summary>  
                    Indicates the type of action to perform when an object is selected. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.EnableAll">
            <summary>  Include objects in selection  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.EnableSpecific">
            <summary>  Include selected objects in selection  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.DisableSpecific">
            <summary>  Remove selected objects from selection  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.ClearAndEnableSpecific">
            <summary>  Clear selection and include selected objects  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.AllAndDisableSpecific">
            <summary>  Select all objects except for selected objects  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.Count">
            <summary>  Include count of selected objects  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.SelectionType">
            <summary>  
                    Indicates the general class of object to filter selection. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.All">
            <summary>  Filter to select all object types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.Features">
            <summary>  Filter to select all feature types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.Curves">
            <summary>  Filter to select all curve types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.Faces">
            <summary>  Filter to select all face types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.Edges">
            <summary>  Filter to select all edge types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.CurvesAndEdges">
            <summary>  Filter to select all curve and edge types  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.Response">
            <summary>  
                    Specify the user response for the selection operation. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.Back">
            <summary>  User selected Back  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.Cancel">
            <summary>  User selected Cancel  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.Ok">
            <summary>  User selected Ok  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.ObjectSelectedByName">
            <summary>  User selected object by name  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.ObjectSelected">
            <summary>  User selected an object  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.DialogResponse">
            <summary>  
                    Specify the user response for general dialogs. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.None">
            <summary>  No Response  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Pick">
            <summary>  User picked object on screen  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Ok">
            <summary>  User selected Ok  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Cancel">
            <summary>  User selected Cancel  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Back">
            <summary>  User selected Back (if applicable)  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Apply">
            <summary>  User selected Apply  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Help">
            <summary>  User selected Help  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.SelectionFeatureType">
            <summary>   
                    Specify the type of features to select. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionFeatureType.Browsable">
            <summary>  Select all browsable features  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionFeatureType.NoBooleanUdf">
            <summary>  Select all features except boolean and udf features  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.UistylerSelectionType">
            <summary>  
                    Indicates the general class of object to filter selection. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.InactiveSelection">
            <summary>  sets selection inactive until 
            this function is called again  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.SingleSelection">
            <summary>  allows 
            single select  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.SingleDeselection">
            <summary>  single deselect  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.RobustSelection">
            <summary>  reselect last  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.SinglePosition">
            <summary>  the position is returned if no object is selected with the 
            single select gesture   </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.RectanglePosition">
            <summary>  the position is returned if no object is selected with the 
            single select gesture  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.MaskTriple">
            <summary>   Used in selection methods to set the types of objects that are selectable. </summary>  
             <remarks>  
             
                Commonly used: 
                <code> 
            For C++: 
            in order to select...       set... 
            any edge                    type=UF_solid_type, subtype=UF_all_subtype, solid_body_subtype=UF_UI_SEL_FEATURE_ANY_EDGE 
            any face                    type=UF_solid_type, subtype=UF_all_subtype, solid_body_subtype=UF_UI_SEL_FEATURE_ANY_FACE 
             
            For .NET: 
            in order to select...       set... 
            any edge                    type=NXOpen.UF.UFConstants.UF_solid_type, subtype=0, solid_body_subtype=NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE 
            any face                    type=NXOpen.UF.UFConstants.UF_solid_type, subtype=0, solid_body_subtype=NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE 
                </code> 
             
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.MaskTriple.Type">
            <summary>  Object type. </summary>  
             <remarks>  This can be one of the object types that are listed in  
                                  uf_object_types.h. For example, for point,  
                                  use UF_point_type in C++ and 
                                  NXOpen.UF.UFConstants.UF_point_type in .NET.  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.MaskTriple.Subtype">
            <summary>  Object subtype. </summary>  
             <remarks>  This can either be 0 (UF_all_subtype) for any subtype, or a 
                                    subtype of the selected type. 
                                    The subtypes are listed in uf_object_types.h. 
                                     </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.MaskTriple.SolidBodySubtype">
            <summary>  Solid body subtype. </summary>  
             <remarks>  This is only meaningful when the type is  
                                   UF_solid_type.  In that case, this should be set to 
                                   one of the solid type constants listed in uf_ui_types.h  
                                   under "Constants for selection solid_type". For example, 
                                   to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and  
                                   NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET  </remarks>  
              
        </member>
        <member name="M:NXOpen.Selection.MaskTriple.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>  Constructor for the MaskTriple struct. </summary>  
             <remarks>   </remarks>  
              
            <param name="Type"> Object type. This can be one of the object types that are listed in  
                                  uf_object_types.h. For example, for point,  
                                  use UF_point_type in C++ and 
                                  NXOpen.UF.UFConstants.UF_point_type in .NET. </param>  
            <param name="Subtype"> Object subtype. This can either be 0 (UF_all_subtype) for any subtype, or a 
                                    subtype of the selected type. 
                                    The subtypes are listed in uf_object_types.h. 
                                    </param>  
            <param name="SolidBodySubtype"> Solid body subtype. This is only meaningful when the type is  
                                   UF_solid_type.  In that case, this should be set to 
                                   one of the solid type constants listed in uf_ui_types.h  
                                   under "Constants for selection solid_type". For example, 
                                   to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and  
                                   NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET </param>  
        </member>
        <member name="T:NXOpen.Selection.SelectionDescriptor">
            <summary>  For a rectangle deselection, the fields <b> Deselection </b>,  
                <b> MultipleSelection </b>, <b> Rectangle </b>  
                bits would be set. </summary>  
             <remarks>   
                For a name selection which selected one object, the fields <b> SelectionDescriptor.Selection </b>,  
                <b> SingleSelection </b>, and <b> NameSelection </b> 
                bits would be set. 
                If a reselect was done (an object is selected and the previous object selected is deselected),  
                only the field <b> SelectionDescriptor.Reselection </b> bit is set. 
                The fields <b> SingleSelection </b> and <b> MultipleSelection </b>  
                bits are not set for position. 
                The field <b> Rectangle </b> bit is set for rectangle selection,  
                rectangle deselection, and rectangle position. 
                You use this function with UIStyler dialogs and <see cref="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">  SelectObjects  </see> and can be called from either the selection 
                filter procedure or the selection callback. 
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.Selection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.Deselection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.Reselection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.SingleSelection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.MultipleSelection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.SinglePosition">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.RectanglePosition">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.NameSelection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.Rectangle">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="T:NXOpen.Selection.FilterCallback">
            <summary>  It is an optional callback which the user can provide to perform 
                application specific filtering when selecting objects. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="entity"> Candidate object </param>  
            <param name="entityMask"> Object type, object subtype, solid type </param>  
            <param name="selectHandle"> Selection handle </param> 
        </member>
        <member name="T:NXOpen.Selection.SelectionCallback">
            <summary>  It is an optional callback which the user can provide to customize his selection  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="selectedObjects"> Selected objects </param>  
            <param name="deselectedObjects"> Deselected objects </param>  
            <param name="selectHandle"> Selection handle </param> 
        </member>
        <member name="T:NXOpen.SelectionHandle">
            <summary>  Represents a SelectionHandle for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.SelectionHandle.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UI">
            <summary>  This class contains the various elements that represent the NX User Interface. </summary>  
             <remarks>  There is 
                a single instance of this class per session. To obtain a reference to the current UI,  
                call the static method <see cref="M:NXOpen.UI.GetUI"> GetUI </see>. 
            <para>Use the static method in this class to obtain an instance.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UI.LockAccess">
            <summary>  Locks access to the NX User Interface. </summary>  
             <remarks>  This method may be used for a custom dialog 
                    that requires the session to remain in a known state. When this method is called, 
                    all menu items that would allow the user to edit the model are grayed out. 
                    <para> 
                    Note that until <see cref="M:NXOpen.UI.UnlockAccess"> UnlockAccess </see> is called, the user will not 
                    be able to interact with the session. You must ensure that the UI is unlocked when 
                    the custom dialog terminates. 
                    </para> 
                    <para> 
                    This method will throw an exception if the UI cannot be locked. Note that if the UI has already been  
                    locked, then it is safe to call this method again. 
                    </para> 
                    <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UI.UnlockAccess">
            <summary>  Unlocks access for a UI that has been locked by a call to <see cref="M:NXOpen.UI.LockAccess"> LockAccess </see>. </summary>  
             <remarks>  If the UI 
                    is already unlocked, this method has no effect. 
                 <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UI.JournalPause">
            <summary>  Pauses execution of a journal. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UI.AskLockStatus">
            <summary>  Query NX lock status. </summary>  
             <remarks>  
                This function is useful when dismissing a custom dialog and you want 
                to determine whether or not a lock has been set. Returns <see cref="F:NXOpen.UI.Status.Lock">  UI.Status.Lock  </see>,  
                when NX is in lock status. Returns <see cref="F:NXOpen.UI.Status.Unlock">  UI.Status.Unlock  </see>,  
                when NX is in unlock status. 
                 <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UI.CreateDialog(System.String)">
            <summary>  Create a block dialog. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="dialogName"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UI.AddUtilityFunctionVisibilityHandler(NXOpen.UI.UtilityFunctionVisibilityHandler)">
            <summary>  Registers a user defined method that is called whenever an utility function state changes. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="utilityFunctionVisibilityHandler"> </param>  
            <returns> identifier of registered method (used to unregister the method) </returns> 
        </member>
        <member name="M:NXOpen.UI.RemoveUtilityFunctionVisibilityHandler(System.Int32)">
            <summary>  Unregisters a user defined method that is called whenever an utility function state changes. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="id"> identifier for method to unregister </param> 
        </member>
        <member name="M:NXOpen.UI.CreateCustomPopupMenuHandler">
            <summary>  Create a custom menu. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="P:NXOpen.UI.NXMessageBox">
            <summary>  the Uistyler for the current session. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.Styler">
            <summary>  the Uistyler for the current session. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.SelectionManager">
            <summary>  the SelectionManager for the current session. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.ObjectPreferences">
            <summary>  the UI based Object Preferences in the current session. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.UserInterfacePreferences">
            <summary>  the UI based User Interface Preferences in the current session  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.VisualizationVisualPreferences">
            <summary>  the UI based Visualization Preferences under Visual Tab in the current session  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.VisualizationLinePreferences">
            <summary>  the UI based Visualization Preferences under Line Tab in the current session  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.VisualizationShadingPreferences">
            <summary>  the UI based Visualization Preferences under Shading Tab in the current session   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.MenuBarManager">
            <summary>  Returns the <see cref="T:NXOpen.MenuBar.MenuBarManager"> MenuBar.MenuBarManager </see> belonging to the current session  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.MovieManager">
            <summary>  the Movie Manager class. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="T:NXOpen.UI.Status">
            <summary>  Indicates the Lock, Unlock status of NX functions. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.UI.Status.Lock">
            <summary>  Lock status  </summary>  
              
        </member>
        <member name="F:NXOpen.UI.Status.Unlock">
            <summary>  Unlock status  </summary>  
              
        </member>
        <member name="T:NXOpen.UI.UtilityFunctionVisibilityHandler">
            <summary>  User defined method is called whenever an NX utility function state changes. </summary>  
             <remarks>   An 
                    example of a NX utility function is the Preferences - User Interface dialog. 
                     
                    <para> 
                    The input parameter, visible is true when the function becomes 
                    visible and false when the function is no longer visible. 
                    </para> 
                     
                    <para> 
                    NX utility functions can be nested. The following scenario describes when this method 
                    is called for a function call in the middle of another function and 
                    then exiting both functions: 
                    </para> 
                     
                    <code> 
                    First utility function call 
                    UtilityFunctionVisibilityHandler - visible == true 
                     
                      Second utility function call while the first utility function is still visible 
                      UtilityFunctionVisibilityHandler - visible == true 
                       
                      Second utility function exit 
                      UtilityFunctionVisibilityHandler - visible == false 
                       
                    First utility function exit 
                    UtilityFunctionVisibilityHandler - visible == false 
                    </code> 
                         
                     <para>License requirements: None.</para> </remarks>  
             <param name="visible"> </param> 
        </member>
        <member name="T:NXOpen.UIStyler.Attachment">
            <summary>  Represents an Attachment for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>   
                 After this method is called, it is illegal to use the object.   
                 In .NET or Java, this method is automatically called when  
                 the object is deleted by the garbage collector. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetCenter(System.Boolean)">
            <summary>  Sets whether the dialog item is at the center </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="isCenter"> center</param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetAttachTypeTop(NXOpen.UIStyler.Attachment.AttachType)">
            <summary>  Sets the attach type top </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="attachTypeTop"> attach_type_top </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetAttachTypeLeft(NXOpen.UIStyler.Attachment.AttachType)">
            <summary>  Sets the attach type left </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="attachTypeLeft"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetAttachTypeRight(NXOpen.UIStyler.Attachment.AttachType)">
            <summary>  Sets the attach type right </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="attachTypeRight"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetTopOffset(System.Int32)">
            <summary>  Sets the top offset </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="offsetTop"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetLeftOffset(System.Int32)">
            <summary>  Sets the left offset </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="offsetLeft"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetRightOffset(System.Int32)">
            <summary>  Sets the right offset </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="offsetRight"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetTopDialogItem(System.String)">
            <summary>  Sets the top dialog item </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="topItemIdentifire"> Top item identifier  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetLeftDialogItem(System.String)">
            <summary>  Sets the left dialog item </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="leftItemIdentifire"> Left item identifier  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetRightDialogItem(System.String)">
            <summary>  Sets the right dialog item </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="rightItemIdentifire"> Right item identifier  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="T:NXOpen.UIStyler.Attachment.AttachType">
            <summary>  Represents alignment option for Styler Item  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.Dialog">
            <summary>  Dialog type  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.Default">
            <summary>  Default type   </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.None">
            <summary>  None type  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.NoChange">
            <summary>  No change type  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.Item">
            <summary>  Item type  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.BitMap">
            <summary>  Represents a Bit Map for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StylerItem">
            <summary>  Represents a Styler Item  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.GetItemType">
            <summary>  Gets the dialog item type. </summary>  
             <remarks>  User can write programs to query this attribute and determine the  
                type of a dialog item in order to determine what further actions should be taken. <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.InitializeAttachment">
            <summary>  Returns initialized dialog item attachment information   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns>attachment object</returns> 
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.SetAttachment(NXOpen.UIStyler.Attachment)">
            <summary> Specifies the updated dialog item attachment information  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="attachment">attachment object</param> 
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.IsEqualTo(NXOpen.UIStyler.StylerItem)">
            <summary>  Equates two styler items   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemToCompare"> styler item to compare</param>  
            <returns> </returns> 
        </member>
        <member name="T:NXOpen.UIStyler.StylerItem.ItemType">
            <summary>  Describes kind of action to be taken from callbac. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.InvalidType">
            <summary>  Invalid item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ActionButton">
            <summary>  Action Button item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Dialog">
            <summary>  Dialog item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.RadioBox">
            <summary>  Radio Box item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Real">
            <summary>  Real item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ScaleReal">
            <summary>  Real Scale item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Bitmap">
            <summary>  Bitmap item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.RowColumn">
            <summary>  Row Column item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ButtonLayout">
            <summary>  Button Layout item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ScrolledWindow">
            <summary>  Scrolled Window item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ColorTool">
            <summary>  Color Item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.SelectionBox">
            <summary>  Section Box item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Separator">
            <summary>  Separator item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.SingleSelectionList">
            <summary>  Single Selection List item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.String">
            <summary>  String item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.BeginGroup">
            <summary>  Begin Group item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Integer">
            <summary>  Integer item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ScaleInteger">
            <summary>  Scale item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.MultiList">
            <summary>  Multi List item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Label">
            <summary>  Label item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.MultiLineText">
            <summary>  Multi-line text item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.TabControl">
            <summary>  Tab Control item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.OptionMenu">
            <summary>  Option Menu item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Toggle">
            <summary>  Toggle item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.OptionToggle">
            <summary>  Option Toggle item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ToolPalette">
            <summary>  Tool Palette item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.WideString">
            <summary>  Wide String item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.PropertyPage">
            <summary>  Property Page item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.CollapsibleGroup">
            <summary>  Callapsible Group item  </summary>  
              
        </member>
        <member name="M:NXOpen.UIStyler.BitMap.SetBitmap(System.String)">
            <summary>  Sets the bitmap filename. </summary>  
             <remarks>  The filename extension must be: .UBM, .XPM, or .BMP. 
                The bitmap can be of any size.<para>License requirements: None.</para> </remarks>  
             <param name="bitmap"> filename with .ubm, .xpm, or .bmp extension that contains bitmap definition  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="T:NXOpen.UIStyler.ButtonLayout">
            <summary>  Represents a Button Layout for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.AddActivateHandler(NXOpen.UIStyler.ButtonLayout.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Callback for activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Sets the sensitivity  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> If the entire dialog item should change to the new sensitivity state,  
                    set this field to UF_STYLER_NO_SUB_INDEX. If only one subitem should change to the new sensitivity  
                    state, set this field to its zero-based index. </param>  
            <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.GetSensitivity">
            <summary>  Gets the sensitivity   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.GetSelectedIndexValue">
            <summary>  Gets selected index   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.SetDefaultAction">
            <summary>  Sets default action  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ButtonLayout.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ButtonLayout.Activate">
            <summary> Called when a dialog user clicks on a push button or presses the spacebar when a push  
                button has keyboard focus. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.CollapsibleGroup">
            <summary>  Represents a Collapsible Group for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ColorTool">
            <summary>  Represents a ColorTool for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.ColorTool.AddValueChangedHandler(NXOpen.UIStyler.ColorTool.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Callback for value changed event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="P:NXOpen.UIStyler.ColorTool.ItemValue">
            <summary>  Returns or sets  the item value  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ColorTool.Sensitivity">
            <summary>  Returns or sets  the sensitivity  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ColorTool.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ColorTool.ValueChanged">
            <summary> Called when a dialog user enters a valid color value. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogResponse">
            <summary>  Represents dialog response  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.PickResponse">
            <summary>  User response was a selection of objects. </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Ok">
            <summary>  OK button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Cancel">
            <summary>  Cancel button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Back">
            <summary>  Back button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Apply">
            <summary>  Apply button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Help">
            <summary>  Help button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.ObjectSelected">
            <summary>  Object was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.ObjectSelectedByName">
            <summary>  Object was selected by name.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.CbTerminate">
            <summary>  Callback routine has terminated.  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogIndex">
            <summary>  Represents indexes  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogIndex.NoSubIndex">
            <summary>  All sub items are selected. </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Dialog">
            <summary>  Represents a DialogItem for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetDialogIndex(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetPushButton(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetBitmap(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetButtonLayout(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetColorTool(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetGroupBox(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetIntegerItem(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetIntegerScale(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetMultiSelectList(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetMultiTextBox(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetOptionMenu(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetOptionToggle(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetPropertyPage(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetRadioBox(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetRealItem(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetRealScale(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetRowColumn(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetScrolledWindow(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetSelectionBox(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetSeparator(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetSingleSelectList(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetStringItem(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetTabControl(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetToggle(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetToolPalette(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetLabelItem(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetCollapsibleGroup(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetWideString(System.String)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetStylerItem(System.String,NXOpen.UIStyler.Dialog.ItemType)">
            <summary>  Gets the dialog item with specified item identifier   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="type"> </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetDialogItemUsingSelectionHandle(NXOpen.SelectionHandle)">
            <summary>  Gets the dialog item for a selection handle   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="select">Selection handle </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.Show">
            <summary>  Displays an NX (UIStyler generated) "bottom" dialog. </summary>  
             <remarks>   This dialog  
                    is displayed to NX. Show Method can only be called once for the  
                    dialog object.Once show method is called <see cref="M:NXOpen.UIStyler.Dialog.GetStylerItem(System.String,NXOpen.UIStyler.Dialog.ItemType)"> UIStyler.Dialog.GetStylerItem </see>  
                    will create any item 
                 <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">
            <summary>  Registers the dialog with a menu item. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="isTopDialog"> </param> 
        </member>
        <member name="T:NXOpen.UIStyler.Dialog.ItemType">
            <summary>  Represents dialog item type  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.PushButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.DialogItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.RadioBox">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.RealItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.RealScale">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.Bitmap">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.RowColumn">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.ButtonLayout">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.ScrolledWindow">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.ColorTool">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.SelectionBox">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.Separator">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.SingleSelectList">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.StringItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.GroupBox">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.IntegerItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.IntegerScale">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.MultiSelectList">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.LabelItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.MultiTextBox">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.TabControl">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.OptionMenu">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.Toggle">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.OptionToggle">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.ToolPalette">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.WideString">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.PropertyPage">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.CollapsibleGroup">
            <summary>    </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem">
            <summary>  Represents a DialogItem for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddConstructHandler(NXOpen.UIStyler.DialogItem.Construct,System.Boolean)">
            <summary> Registers construct callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="constructevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddDestructHandler(NXOpen.UIStyler.DialogItem.Destruct,System.Boolean)">
            <summary> Registers destruct callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="destructevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddOkayHandler(NXOpen.UIStyler.DialogItem.Okay,System.Boolean)">
            <summary> Registers ok callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="okayevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddApplyHandler(NXOpen.UIStyler.DialogItem.Apply,System.Boolean)">
            <summary> Registers apply callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="applyevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddBackHandler(NXOpen.UIStyler.DialogItem.Back,System.Boolean)">
            <summary> Registers back callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="backevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddCancelHandler(NXOpen.UIStyler.DialogItem.Cancel,System.Boolean)">
            <summary> Registers cancel callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="cancelevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddFileOperationHandler(NXOpen.UIStyler.DialogItem.FileOperation,System.Boolean)">
            <summary> Registers file operation callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="fileoperationevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetTitle(System.String)">
            <summary> Specifies a string to display on the top border of the dialog  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strLabel">  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetSensitivity(System.Boolean)">
            <summary> Specifies the sensitivity of the dialog. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="type">TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetNavigationSensitivity(NXOpen.UIStyler.DialogItem.DialogItemIndex,System.Boolean)">
            <summary>  Specifies the sensitivity of the navigation buttons at the bottom of the dialog. </summary>  
             <remarks>  If you set the  
                UF_STYLER_BACK_INDEX button to insensitive at creation time, the system does not show the BACK button;  
                Changing the button's sensitivity while the dialog displays does not show the Back button.  
                <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Sub item index </param>  
            <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetResize(System.Boolean)">
            <summary> Specifies wether dialog is allowed to resize  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="type">TRUE to allow dialog to resize; FALSE to freeze the dialog size</param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetWidth(System.Int32)">
            <summary> Specifies the pixel width for the dialog. </summary>  
             <remarks>  You can only set this attribute when the  
                Dialog Resize attribute is set to TRUE. You cannot enter a negative number. <para>License requirements: None.</para> </remarks>  
             <param name="width"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.GetSelectionHandle">
            <summary>  Gets the selection handle for a given dialog item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns>Selection handle </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.DialogItem.FileOperationData">
            <summary>  Returns  the file operation data  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.DialogItemIndex">
            <summary>  Describes dialog item index  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogItem.DialogItemIndex.Ok">
            <summary>  Ok index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogItem.DialogItemIndex.Apply">
            <summary>  Apply index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogItem.DialogItemIndex.Back">
            <summary>  Back index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogItem.DialogItemIndex.Cancel">
            <summary>  Cancel index  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Construct">
            <summary> Called when the dialog displays. </summary>  
             <remarks>  You can use the Constructor callback to set up dialog item attributes  
                such as populating a list or setting the sensitivity of a dialog item. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Destruct">
            <summary> Called when the dialog closes. </summary>  
             <remarks>  Use the Destructor callback to perform cleanup. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Okay">
            <summary> Called when a dialog user clicks OK or MB2 anywhere in NX or presses the OK's keyboard accelerator  
                as defined in the resource file. </summary>  
             <remarks>  OK callbacks should terminate the dialog and always return  
                UF_UI_CB_EXIT_DIALOG.  
                <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Apply">
            <summary> Called when a dialog user clicks Apply or &lt;Ctrl&gt;MB2 anywhere in NX or presses the Apply's  
                keyboard accelerator as defined in the resource file. </summary>  
             <remarks>  Apply callbacks should not terminate  
                the dialog and always return UF_UI_CB_CONTINUE_DIALOG. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Back">
            <summary> Called when a dialog user clicks Back &lt;Shift&gt;MB2 anywhere in NX or presses Back's keyboard accelerator  
                as defined in the resource file. </summary>  
             <remarks>  Back callbacks should terminate the dialog and always return  
                UF_UI_CB_EXIT_DIALOG. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Cancel">
            <summary> Called when a dialog user clicks Cancel or &lt;Alt&gt;MB2 anywhere in NX or presses Cancel's keyboard accelerator  
                as defined in the resource file. </summary>  
             <remarks> Cancel callbacks should terminate the dialog and always return UF_UI_CB_EXIT_DIALOG. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.FileOperation">
            <summary> Called just before a dialog user selects a file operation, such as in File?New, and again after a file 
                operation completes. </summary>  
             <remarks>  
                A typical use for a file operation callback would be to make sure that the system updates cached part data  
                in a part before a dialog user executes a File?Save. The callback can determine from the callback data  
                structure whether the file operation is about to begin or has just completed. It can also determine  
                which operation is being executed. This callback is only used on DA1 dialogs because the DA2 dialogs  
                are usually cancelled (automatically through the quick access menus) when a dialog user selects any of  
                the File menu options. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.FileOperationData">
            <summary>  Represents a FileOperationData for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.FileOperationData.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.FileOperationData.State">
            <summary>  Returns  the state  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.FileOperationData.Type">
            <summary>  Returns  the file operation type  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.FileOperationData.FileOperationType">
            <summary>  Describes file operation  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.New">
            <summary>  New file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Open">
            <summary>  Open file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Save">
            <summary>  Save file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAs">
            <summary>  Save as file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAll">
            <summary>  Save all file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Close">
            <summary>  Close file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Quit">
            <summary>  Quit file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAndExit">
            <summary>  Save and Exit file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.ChangePart">
            <summary>  Chaneg part file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Execute">
            <summary>  Execute file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Reopen">
            <summary>  Reopen file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAllAndClose">
            <summary>  Save all and close file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAndClose">
            <summary>  Save and close file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAsAndClose">
            <summary>  Save as and close file operation  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.FileOperationData.FileOperationState">
            <summary>  Describes file state  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationState.Enter">
            <summary>  Enter file state  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationState.Exit">
            <summary>  Exit file state  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.GroupBox">
            <summary>  Represents a GroupBox for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.GroupBox.SetLabel(System.String)">
            <summary>   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text label to display in the top line of the group box frame  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="P:NXOpen.UIStyler.GroupBox.Sensitivity">
            <summary>  Returns or sets  the sensitivity  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.GroupBox.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.IntegerItem">
            <summary>  Represents a Integer for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.IntegerItem.AddActivateHandler(NXOpen.UIStyler.IntegerItem.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerItem.SetBitmap(System.String)">
            <summary> Specifies a filename that contains a bitmap definition. </summary>  
             <remarks>  The filename must contain a UBM, XPM, or BMP  
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text  
                label. When a bitmap is present, the system uses the text label as tooltip text when a user places the  
                mouse cursor over the bitmap. We recommend that you use a 16x16 bitmap for this dialog item.  
                <para>License requirements: None.</para> </remarks>  
             <param name="bitmap">Filename with .ubm, .xpm, or .bmp extension that contains bitmap definition <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerItem.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog  
                item's intended use. If you specify a bitmap for this dialog item, it uses this text as tooltip text. <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> String to display on the left side of the text field. <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerItem.SetFocus">
            <summary>  Sets focus  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerItem.ItemValue">
            <summary>  Returns or sets the value obtained from the text field. </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerItem.Sensitivity">
            <summary>  Returns or sets  the sensitivity of Integer item  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerItem.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item. </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.IntegerItem.Activate">
            <summary> Called when a dialog user enters a valid integer value and presses Return  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.IntegerScale">
            <summary>  Represents a IntegerScale for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.IntegerScale.AddValueChangedHandler(NXOpen.UIStyler.IntegerScale.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Value changed event </param>  
            <param name="isDialogLaunchingEvent"> True if launch any dialog else False </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerScale.AddDragHandler(NXOpen.UIStyler.IntegerScale.Drag,System.Boolean)">
            <summary> Registers drag callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="dragevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerScale.SetLimits(System.Int32,System.Int32)">
            <summary> Specifies the scale's maximum and minimum value. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="minimumValue">to set minimum </param>  
            <param name="maximumValue">to set maximum </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerScale.SetLabels(System.String,System.String)">
            <summary> Specifies the text for the minimum and maximum label. </summary>  
             <remarks>  By default, the system uses the maximum/minimum  
                value as a text label.<para>License requirements: None.</para> </remarks>  
             <param name="minimumLabel">minimum limit for label  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="maximumLabel">maximum limit for label  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="P:NXOpen.UIStyler.IntegerScale.ItemValue">
            <summary>  Returns or sets   </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerScale.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the dialog item. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerScale.Visibility">
            <summary>  Returns or sets the visibility of the dialog item. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.IntegerScale.ValueChanged">
            <summary> Called when a dialog user moves the slider to a new position. </summary>  
             <remarks>   
                Do not terminate the dialog with a value-changed callback. The dialog should always return  
                UF_UI_CB_CONTINUE_DIALOG. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.IntegerScale.Drag">
            <summary> Called when a dialog user moves the slider up and down the scale. </summary>  
             <remarks>  For example, if a user moves the  
                slider from 0 to 100, the dialog calls the drag callback 100 times, one for each value that the  
                slider moves across.  
                Do not terminate the dialog with a drag callback. The dialog should always return  
                UF_UI_CB_CONTINUE_DIALOG. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.LabelItem">
            <summary>  Represents a Label for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.LabelItem.SetBitmap(System.String)">
            <summary>  Specifies a filename that contains a bitmap definition. </summary>  
             <remarks>   
                The filename must contain a UBM, XPM, or BMP extension.  
                When you use this field, the system displays a bitmap for this dialog item  
                instead of a text label. When a bitmap is present, the system uses  
                the text label as tooltip text when a user places the mouse cursor over the bitmap.  
                We recommend that you use a 16x16 bitmap for this dialog item. <para>License requirements: None.</para> </remarks>  
             <param name="bitmapFile">  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.LabelItem.SetLabel(System.String)">
            <summary>  Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog item's intended use.<para>License requirements: None.</para> </remarks>  
             <param name="strLabel">  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="P:NXOpen.UIStyler.LabelItem.Sensitivity">
            <summary>  Returns or sets  the seisitivity of the dialog item </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.LabelItem.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.MultiSelectList">
            <summary>  Represents a MultiSelectList for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.AddActivateHandler(NXOpen.UIStyler.MultiSelectList.Activate,System.Boolean)">
            <summary> Called when a dialog user selects an entry with a double mouse click or presses Return on  
                a selected item. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.AddDoubleClickHandler(NXOpen.UIStyler.MultiSelectList.DoubleClick,System.Boolean)">
            <summary> Registers double click callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="doubleclickevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.SetListItems(System.String[])">
            <summary> Specifies an array of character strings for item names that are used as selectable choices for this  
                dialog item. </summary>  
             <remarks>  
                <para>License requirements: None.</para> </remarks>  
             <param name="itemVal">array of character strings for item names <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.GetListItems">
            <summary>  Gets an array of character strings for item names that are used as selectable choices for this  
                dialog item. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <returns> An array of character strings for item names</returns> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.SetSelected(System.Int32)">
            <summary> Specifies particular list items to be selected. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subIndex"> An index of particular list items to be selected </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.SetAllSelected">
            <summary> Specifies all list entry to be selected. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.GetAllIndicesSelected">
            <summary> Gets the indices of all selected list entries are desired;  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> An array of integers for item indices of selected items </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.GetAllNameSelected">
            <summary> Gets the names of all selected list entries are desired. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <returns> An array of character strings of selected items</returns> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.Focus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>  
                <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.Deselect(System.Int32)">
            <summary> Requests a list entry to be deselected. </summary>  
             <remarks>  
                <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Index of the list entry to be deselected.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.InsertSubitems(System.Int32,System.String[])">
            <summary>   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Sub item index </param>  
            <param name="multiEntries"> An array of items to be inserted  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.Append(System.String[])">
            <summary>  Appends one or more entries to be inserted into the list  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="multiEntries">An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list. <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.DeleteSubitem(System.Int32)">
            <summary>  Deletes sub item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Zero-based index of a list entry to be deleted </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.ShowSubItem(System.Int32)">
            <summary>  Requests a list entry to be scrolled up to the first line in the list  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Zero-based index of a list entry to be scrolled up  
                                            to the first line of the list.</param> 
        </member>
        <member name="P:NXOpen.UIStyler.MultiSelectList.Sensitivity">
            <summary>  Returns or sets  the senstivity  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.MultiSelectList.Visibility">
            <summary>  Returns or sets the visibility </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.MultiSelectList.Activate">
            <summary>   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.MultiSelectList.DoubleClick">
            <summary> Called when a dialog user selects an entry with a single mouse click or presses the spacebar  
                on a selected item. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.MultiTextBox">
            <summary>  Represents a MultiTextBox for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.MultiTextBox.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog item's  
                intended use.<para>License requirements: None.</para> </remarks>  
             <param name="strLabel">new label string  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiTextBox.SetItemValues(System.String[])">
            <summary> Specifies the text for this dialog item. </summary>  
             <remarks>  It can be programmatically set by APIs supported in  
                different laguages,or interactively entered by the user. <para>License requirements: None.</para> </remarks>  
             <param name="values">array of strings to set the values in multi  
                                            select List <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiTextBox.GetItemValues">
            <summary> Specifies the text for this dialog item. </summary>  
             <remarks>  It can be programmatically get by APIs.  <para>License requirements: None.</para> </remarks>  
             <returns> to get array of strings</returns> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiTextBox.SetFocus">
            <summary> Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.MultiTextBox.Sensitivity">
            <summary>  Returns or sets the sensitivity of the dialog item. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.MultiTextBox.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.OptionMenu">
            <summary>  Represents a OptionMenu for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.AddActivateHandler(NXOpen.UIStyler.OptionMenu.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Callback for activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.SetBitmap(System.String[])">
            <summary>  Set an array of bitmap filenames  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="bitmaps"> An array of one or more bitmap filenames.  
                    If all bitmaps for the option menu reside in the same file, specify an array of just one entry,  
                    which contains the bitmap filename for this attribute. All existing choices for the option menu  
                    remains intact when this attribute is set. Only the bitmaps are changed. Note that the number of  
                    bitmaps must match the number of existing choices.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.GetBitmap">
            <summary>  Returns an array of bitmaps   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.SetLabel(System.String)">
            <summary>  Sets label  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text to be set for the descriptive label.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.SetItems(System.String[])">
            <summary>  Set an array of items  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strListArray"> An array of new choices to be used for the  
                    dialog item. Note that this removes all existing choices (both text and bitmaps)  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.GetItems">
            <summary>  Returns an array if items   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Sets the sensitivity  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> If the entire dialog item should change to the new Sensitivity state,  
                    set this field to UF_STYLER_NO_SUB_INDEX. If only one subitem should change to the new sensitivity state, 
                    set this field to its zero-based index. </param>  
            <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.GetSensitivity">
            <summary>  Gets the sensitivity   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.OptionMenu.ItemValue">
            <summary>  Returns or sets  the item value  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.OptionMenu.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.OptionMenu.Activate">
            <summary>  Called when a dialog user selects an option from the menu. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.OptionToggle">
            <summary>  Represents a OptionToggle for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.AddActivateHandler(NXOpen.UIStyler.OptionToggle.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Callback for activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.AddValueChangedHandler(NXOpen.UIStyler.OptionToggle.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Callback for value changed event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetBitmaps(System.String[])">
            <summary>  Set bitmaps  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="bitmaps"> An array of one or more bitmap filenames.  
                    If all bitmaps for the option menu reside in the same file, specify an array of just one entry,  
                    which contains the bitmap filename for this attribute. All existing choices for the option menu  
                    remain intact when this attribute is set. Only the bitmaps are changed. Note that the number of  
                    bitmaps must match the number of existing choices.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetLabel(System.String)">
            <summary>  Sets label  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text to be set for the tool tip.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetItems(System.String[])">
            <summary>  Sets items in the array  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strListArray"> An array of new choices to be used for the dialog item.  
                    Note that this removes all existing choices (both text and bitmaps).  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.GetItems">
            <summary>  Returns the items   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> An array of items </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetItemValue(System.Int32,System.Boolean)">
            <summary>  Sets item value  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Zero-based index indicating the choice to be selected.  
                    It must be in the range of existing choices.</param>  
            <param name="setCheck"> TRUE if set, FALSE if unset. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.GetItemValue(System.Boolean@)">
            <summary>  Returns item value   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="setCheck"> </param>  
            <returns> Item value </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Set the sesitivity  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> If the entire dialog item should change to the new Sensitivity state,  
                    set this field to UF_STYLER_NO_SUB_INDEX. If only one sub-item should change to the new sensitivity  
                    state, set this field to its zero-based index. </param>  
            <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.GetSensitivity">
            <summary>  Returns the sesitivity   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetDefaultAction">
            <summary>  Sets default action  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.OptionToggle.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.OptionToggle.Activate">
            <summary>  Called when a dialog user selects an option from the menu   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.OptionToggle.ValueChanged">
            <summary> Called when a dialog user clicks on the button or presses the spacebar when the button has keyboard focus. </summary>  
             <remarks>   
                Do not terminate the dialog with a value-changed callback. The dialog should always return UF_UI_CB_CONTINUE_DIALOG. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.PageSwitchData">
            <summary>  Represents a PageSwitchData for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.PageSwitchData.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PageSwitchData.ActivatedPage">
            <summary>  Returns  the activated page  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PageSwitchData.DeactivatedPage">
            <summary>  Returns  the deactivated page  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.PropertyPage">
            <summary>  Represents a PropertyPage for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.PropertyPage.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog item's intended use.  
                If you specify a bitmap for this dialog item, it uses this text as tooltip text. <para>License requirements: None.</para> </remarks>  
             <param name="strLabel">new label <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.PropertyPage.SetFocus">
            <summary>  Sets focus  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PropertyPage.Sensitivity">
            <summary>  Returns or sets  the sensitivity of property page. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PropertyPage.Visibility">
            <summary>  Returns or sets the visibility of the dialog item. </summary>  
             <remarks>  <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.PushButton">
            <summary>  Represents a PushButton for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.AddActivateHandler(NXOpen.UIStyler.PushButton.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.SetBitmap(System.String)">
            <summary> Specifies a filename that contains a bitmap definition. </summary>  
             <remarks>  The filename must contain a UBM, XPM, or BMP  
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text  
                label. When a bitmap is present, the system uses the text label as a popup hint when a user places the  
                mouse cursor over the bitmap.  <para>License requirements: None.</para> </remarks>  
             <param name="bitmap">the bitmap extension  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog item's intended  
                use. If you specify a bitmap for this dialog item, it uses this text as tooltip text.  <para>License requirements: None.</para> </remarks>  
             <param name="strLabel">the label string  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.SetFocus">
            <summary> Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.SetDefaultAction">
            <summary>  Sets default action  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PushButton.Sensitivity">
            <summary>  Returns or sets  the senstivity of dialog. </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PushButton.Visibility">
            <summary>  Returns or sets  the visibility of dialog. </summary>  
             <remarks>   <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.PushButton.Activate">
            <summary> Called when a dialog user clicks on the push button or presses the spacebar when the push button has  
                keyboard focus. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event obejct </param> 
        </member>
        <member name="T:NXOpen.UIStyler.RadioBox">
            <summary>  Represents a RadioBox for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.AddValueChangedHandler(NXOpen.UIStyler.RadioBox.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Callback for value changed event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.SetLabel(System.String)">
            <summary>  Sets label  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text to be set for the descriptive label  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Sets the sensitivity  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> </param>  
            <param name="type"> TRUE if visible, FALSE if invisible </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.GetSensitivity">
            <summary>  Gets the sensitivity   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.SetDefaultAction">
            <summary>  Set default action  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RadioBox.ItemValue">
            <summary>  Returns or sets  the item value  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RadioBox.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RadioBox.ValueChanged">
            <summary> Called when a dialog user click on a button in the radio box. </summary>  
             <remarks>  
                Do not terminate the dialog with a value-changed callback.  
                The dialog should always return UF_UI_CB_CONTINUE_DIALOG.  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.RealItem">
            <summary>  Represents a Real for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.RealItem.AddActivateHandler(NXOpen.UIStyler.RealItem.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Callback for activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealItem.SetBitmap(System.String)">
            <summary>   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strBitmap"> Filename with .ubm, .xpm, or .bmp extension that contains a bitmap definition  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealItem.SetLabel(System.String)">
            <summary>  Set the label  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text label to display on the left side of the text field.  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealItem.SetFocus">
            <summary>  Sets focus  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealItem.ItemValue">
            <summary>  Returns or sets  the item value  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealItem.Sensitivity">
            <summary>  Returns or sets  the sensitivity  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealItem.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RealItem.Activate">
            <summary>  Called when a dialog user enters a valid real value and presses Return. </summary>  
             <remarks>   <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.RealScale">
            <summary>  Represents a RealScale for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.AddValueChangedHandler(NXOpen.UIStyler.RealScale.ValueChanged,System.Boolean)">
            <summary> Called when a dialog user moves the slider up and down the scale. </summary>  
             <remarks>   
                For example, if a user moves the slider from 0.0 to 10.0,  
                the dialog calls the drag callback 100 times, one for each value that the slider moves across.  
                Do not terminate the dialog with a drag callback. The dialog should always return UF_UI_CB_CONTINUE_DIALOG.<para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Callback for value changed event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.AddDragHandler(NXOpen.UIStyler.RealScale.Drag,System.Boolean)">
            <summary> Registers dtag callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="dragevent"> Callback for add drag event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.SetLimits(System.Double,System.Double)">
            <summary>  Sets limits  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="minimumValue"> Real minimum value </param>  
            <param name="maximumValue"> Real maximum value </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.SetLabels(System.String,System.String)">
            <summary>  Sets labels  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="minimumLabel"> String minimum label  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <param name="maximumLabel"> String maximum label  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.SetDecimalPrecision(System.Int32)">
            <summary>  Sets decimal precision  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="digits"> The number significant digits </param> 
        </member>
        <member name="P:NXOpen.UIStyler.RealScale.ItemValue">
            <summary>  Returns or sets  the item value  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealScale.Sensitivity">
            <summary>  Returns or sets  the sensitivity  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealScale.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RealScale.ValueChanged">
            <summary>   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.RealScale.Drag">
            <summary> Called when a dialog user moves the slider to a new position. </summary>  
             <remarks>   
                Do not terminate the dialog with a value-changed callback.  
                The dialog should always return UF_UI_CB_CONTINUE_DIALOG. <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.RowColumn">
            <summary>  Represents a RowColumn for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RowColumn.Sensitivity">
            <summary>  Returns or sets  the sensitivity  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RowColumn.Visibility">
            <summary>  Returns or sets  the visibility  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ScrolledWindow">
            <summary>  Represents a ScrolledWindow for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ScrolledWindow.Sensitivity">
            <summary>  Returns or sets   </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ScrolledWindow.Visibility">
            <summary>  Returns or sets   </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.SelectionBox">
            <summary>  Represents a SelectionBox for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.AddActivateHandler(NXOpen.UIStyler.SelectionBox.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if launch new dialog, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.AddDoubleClickHandler(NXOpen.UIStyler.SelectionBox.DoubleClick,System.Boolean)">
            <summary> Registers double click callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show"> UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="doubleclickevent"> Double click event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if launch new dialog, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.SetListItems(System.String[])">
            <summary>  Specifies an array of character strings for item names that are used as selectable choices for this dialog item. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="values"> List of items  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.GetListItems">
            <summary>  Gets an array of character strings for item names that are used as selectable choices for this dialog item. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <returns> List of items </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.SetLabel(System.String)">
            <summary>  Specifies the descriptive text string to display below the scrolled list and above the text field. </summary>  
             <remarks>  It describes the dialog item's usage.<para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Label string  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.DeselectSubItem(System.Int32)">
            <summary>  Requests a list entry to be deselected. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.InsertSubItem(System.Int32,System.String[])">
            <summary>  Requests that one or more entries be inserted into the list. </summary>  
             <remarks>  You can insert entries at the bottom of the list or at any position within the list.<para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Position index where the insertion should be made. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then the new list entries are added to the bottom of the list. </param>  
            <param name="multiEntries">  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.Append(System.String[])">
            <summary>  Appends one or more entries to be inserted into the list  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="multiEntries">An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list. <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.DeleteSubItem(System.Int32)">
            <summary>  Deletes sub item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.ShowSubItem(System.Int32)">
            <summary>  Requests that a list entry be scrolled up to the first line in the list. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.SetValue(System.Int32)">
            <summary>  Sets the value  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="value"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.GetSelectedIndexValue">
            <summary>  Gets selected index value   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.GetSelectedString">
            <summary>  Gets selected string   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.SelectionBox.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the selection box </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.SelectionBox.Visibility">
            <summary>  Returns or sets  the visibility of the selection box </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.SelectionBox.Activate">
            <summary> Called when a dialog user selects a list entry with a single mouse click, presses the spacebar on a selected list entry, or presses Return when the cursor is in the text field. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.SelectionBox.DoubleClick">
            <summary> Called when a dialog user double-clicks on an option in the selection box or presses Return when an item is already selected. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.Separator">
            <summary>  Represents a Separator for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.Separator.Visibility">
            <summary>  Returns or sets  the visibility of the separator </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.SingleSelectList">
            <summary>  Represents a SingleSelectList for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.AddActivateHandler(NXOpen.UIStyler.SingleSelectList.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.AddDoubleClickHandler(NXOpen.UIStyler.SingleSelectList.DoubleClick,System.Boolean)">
            <summary> Registers double click callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="doubleclickevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.SetSelected(System.Int32)">
            <summary>  Specifies particular list items to be selected  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subIndex"> Inndex of particular list items to be selected</param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.SetListItems(System.String[])">
            <summary>  Specifies an array of character strings that are used as entries in the list  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="itemVal"> An array of string items  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.GetListItems">
            <summary>  Gets an array of character strings that are used as entries in the list. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <returns> An array of string items </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.DeselectSubItem(System.Int32)">
            <summary>  Requests a list entry to be deselected. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.InsertSubItem(System.Int32,System.String[])">
            <summary>  Requests one or more entries to be inserted into the list. </summary>  
             <remarks>  You can insert entries at the bottom of the list or at any position within the list. <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Position index where the insertion should be made. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then the new list entries are added to the bottom of the list.</param>  
            <param name="multiEntries">An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list. <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.Append(System.String[])">
            <summary>  Appends one or more entries to be inserted into the list  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="multiEntries">An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list. <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.DeleteSubItem(System.Int32)">
            <summary>  Requests a list entry to be deleted. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex">Zero-based index of a list entry to be deleted. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then all list entries are deleted. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.ShowSubItem(System.Int32)">
            <summary> Requests that a list entry be scrolled up to the first line in the list  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Zero-based index of a list entry to be scrolled up to the first line of the list.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.GetSelectedIndexValue">
            <summary>  Gets selected index   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.GetSelectedString">
            <summary>  Gets selected string   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.SingleSelectList.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the single select list </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.SingleSelectList.Visibility">
            <summary>  Returns or sets  the visibility of the single select list </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.SingleSelectList.Activate">
            <summary>  Called when a dialog user selects an entry with a single mouse click  
                    or presses the spacebar on an already selected item. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.SingleSelectList.DoubleClick">
            <summary>  Called when a dialog user double-clicks on an option or presses Return when an item is already selected. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.StringItem">
            <summary>  Represents a StringItem for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.AddActivateHandler(NXOpen.UIStyler.StringItem.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.SetBitmap(System.String)">
            <summary> Specifies a filename that contains a bitmap definition. </summary>  
             <remarks>  The filename must contain a UBM, XPM, or BMP  
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text  
                label. When a bitmap is present, the system uses the text label as tooltip text when a user places the  
                mouse cursor over the bitmap. We recommend that you use a 16x16 bitmap for this dialog item.  <para>License requirements: None.</para> </remarks>  
             <param name="strBitmap"> Filename with .ubm, .xpm, or .bmp extension that contains bitmap definition  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>   
                It should describe the dialog item's intended use. If you specify a bitmap for this dialog item,  
                    it uses this text as tooltip text. 
                <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> String label to display on the left side of the text field  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.SetSensitivity(System.Boolean)">
            <summary> Specifies the sensitivity of the dialog item. </summary>  
             <remarks>  When you set sensitivity to False, it grays out the  
                dialog item. This indicates that the dialog item exists but is not active.<para>License requirements: None.</para> </remarks>  
             <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.GetSensitivity">
            <summary>  To get senstivity of string control  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> TRUE if sensitive, FALSE if insensitive </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.StringItem.ItemValue">
            <summary>  Returns or sets  the string value for this dialog item. </summary>  
             <remarks>  It can be the initial value that is programmatically  
                defined, or interactively entered by the user.<para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.StringItem.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StringItem.Activate">
            <summary> Called when a dialog user enters a character string and presses Return. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.Styler">
            <summary>  Represents a Uistyler for UI Styler  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> UI </see></para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Styler.CreateStylerDialog(System.String)">
            <summary> Creates an NX (UIStyler generated) "bottom" dialog. </summary>  
             <remarks>  The ".dlg" file can only be generated from the  
                Open UIStyler.  <para>License requirements: None.</para> </remarks>  
             <param name="dialogName"> Dialog name  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param>  
            <returns> </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.Styler.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="T:NXOpen.UIStyler.StylerEvent">
            <summary>  Represents a StylerEvent  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StylerEvent.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector. <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StylerEvent.GetStylerItem">
            <summary>  Gets the dialog item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.StylerEvent.GetReason">
            <summary> Gets the reason for the event  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> Reason </returns> 
        </member>
        <member name="T:NXOpen.UIStyler.StylerEvent.Reason">
            <summary>  Describes callback reason  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.NoReason">
            <summary>  No reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ActivateReason">
            <summary>  Activate reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ValueChangedReason">
            <summary>  Value changed reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.DragReason">
            <summary>  Drag reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.DoubleClickReason">
            <summary>  Double click reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.OkReason">
            <summary>  Ok reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ApplyReason">
            <summary>  Apply reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.BackReason">
            <summary>  BAck reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.CancelReason">
            <summary>  Cancel reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ConstructReason">
            <summary>  Construct reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.DestructReason">
            <summary>  Destruct reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.FileopReason">
            <summary>  File operation reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.SwitchReason">
            <summary>  Switch reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.FileOperationReason">
            <summary>  File operation reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ExitFileOperationReason">
            <summary>  Exit file operation reason  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StylerEvent.Indicator">
            <summary>  Describes indicator value  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.NoValue">
            <summary>  No value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.StringValue">
            <summary>  String value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.StringPointerValue">
            <summary>  String pointer value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.IntegerValue">
            <summary>  Integer value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.IntegerPointerValue">
            <summary>  Integer pointer value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.RealValue">
            <summary>  Real value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.RealPointerValue">
            <summary>  Real pointer value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.SelectionValue">
            <summary>  Selection value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.OptionToggleValue">
            <summary>  Option toggle value  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StylerEvent.Miscellaneous">
            <summary>  Describes event index  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.NoSubIndex">
            <summary>  No sub index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.OkIndex">
            <summary>  Ok index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.ApplyIndex">
            <summary>  Apply index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.BackIndex">
            <summary>  Back index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.CancelIndex">
            <summary>  Cancel index  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogState">
            <summary>  Represents the dialog state  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogState.ContinueDialog">
            <summary>  Continue the dialog  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogState.ExitDialog">
            <summary>  Exit from the dialog  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.TabControl">
            <summary>  Represents a Tab Control for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.TabControl.AddSwitchHandler(NXOpen.UIStyler.TabControl.SwitchHandler,System.Boolean)">
            <summary> Registers switch callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="switchevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.TabControl.SetFocus">
            <summary>  Sets focus  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.TabControl.PageSwitchData">
            <summary>  Returns  the page switch data </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.TabControl.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the dialog item  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.TabControl.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.TabControl.SwitchHandler">
            <summary> Called when a user switches tabs. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.Toggle">
            <summary>  Represents a Toggle for UI Styler. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.AddValueChangedHandler(NXOpen.UIStyler.Toggle.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Value changed event </param>  
            <param name="isDialogLaunchingEvent"> True if launch any dialog else False </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.SetLabel(System.String)">
            <summary>  Sets the label to display on the right side of the toggle button. </summary>  
             <remarks>   
                If the toggle button displays a bitmap, then this text label is used as a popup hint instead<para>License requirements: None.</para> </remarks>  
             <param name="strLabel">  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Sets the sensitivity of the toggle button  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> </param>  
            <param name="type"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.GetSensitivity">
            <summary>  Gets the sensitivity   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>  <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.SetDefaultAction">
            <summary>  Indicates that this dialog item should override the accelerator  
                on the second mouse button, which normally accelerates to the OK button. </summary>  
             <remarks>   
                When you set this attribute, a click on the second mouse button triggers  
                this dialog item's ON/OFF state and calls the Value Changed callback  
                instead of the action of the OK button.<para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.Toggle.ItemValue">
            <summary>  Returns or sets  an item value  </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.Toggle.Visibility">
            <summary>  Returns or sets  the visibility of the toggle </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Toggle.ValueChanged">
            <summary>  Called when a dialog user clicks on the button or presses the spacebar when the button has keyboard focus. </summary>  
             <remarks>   
                    Do not terminate the dialog with a value-changed callback. The dialog should always return UF_UI_CB_CONTINUE_DIALOG <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.ToolPalette">
            <summary>  Represents a ToolPalette for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.AddActivateHandler(NXOpen.UIStyler.ToolPalette.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.SetLabel(System.String)">
            <summary>  Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>   
                It should describe the dialog item's intended use. <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> String label  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.SetSensitivity(System.Int32,System.Boolean)">
            <summary>   </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Sub item index </param>  
            <param name="type"> True if sentivity is set otherwise False </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.GetSensitivity">
            <summary>  Gets the sensitivity of the dialog item  </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <returns> True if sensitivity is set otherwise False </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.SetDefault(System.Int32)">
            <summary>  Indicates that this dialog item should override the accelerator  
                on the second mouse button, which normally accelerates to the OK button. </summary>  
             <remarks>   
                When you set this attribute, a click on the second mouse button triggers 
                this dialog item's Activate callback instead of the action of the OK button.<para>License requirements: None.</para> </remarks>  
             <param name="dialogId"> </param> 
        </member>
        <member name="P:NXOpen.UIStyler.ToolPalette.ItemValue">
            <summary>  Returns or sets  the currently selected choice for this dialog item. </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ToolPalette.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ToolPalette.Activate">
            <summary>  Called when a dialog user selects a button in the tool palette. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.WideString">
            <summary>  Represents a WideString for UI Styler  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.WideString.AddActivateHandler(NXOpen.UIStyler.WideString.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see> <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.WideString.SetLabel(System.String)">
            <summary>  Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>   
                It should describe the dialog item's intended use<para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Label string  <para> NOTE: The full Unicode character set is not supported for this parameter. </para></param> 
        </member>
        <member name="M:NXOpen.UIStyler.WideString.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.WideString.ItemValue">
            <summary>  Returns or sets  the string value for this dialog item. </summary>  
             <remarks>  
                 It can be the initial value that is programmatically defined, or interactively entered by the user. <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.WideString.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the wide string </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.WideString.Visibility">
            <summary>  Returns or sets  the visibility of the wide string </summary>  
             <remarks> <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.WideString.Activate">
            <summary>  Called when a dialog user enters a character string and presses Return. </summary>  
             <remarks> <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
    </members>
</doc>
